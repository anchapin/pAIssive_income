  bandit-scan:
    name: Bandit Security Scan
    runs-on: ${{ matrix.os }}
    needs: pylint-security-scan
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Create security-reports directory
        run: mkdir -p security-reports
        shell: bash

      - name: Install Bandit
        run: |
          # Install Bandit
          python -m pip install bandit
          # Verify installation
          python -m pip list | grep bandit

      - name: Run Bandit (Linux/macOS)
        if: runner.os != 'Windows'
        continue-on-error: true
        run: |
          # Create security-reports directory if it doesn't exist
          mkdir -p security-reports
          echo "Running bandit scan..."

          # Create a unique output file for this run
          BANDIT_OUTPUT_FILE="security-reports/bandit-results-${{ github.run_id }}.sarif"

          # Use the platform-specific configuration file
          BANDIT_CONFIG_FILE=".github/bandit/bandit-config-${{ runner.os == 'macOS' && 'macos' || 'linux' }}-${{ github.run_id }}.yaml"

          # Fallback to the generic configuration file if the specific one doesn't exist
          if [ ! -f "$BANDIT_CONFIG_FILE" ]; then
            echo "Platform-specific configuration file not found. Using generic configuration."
            BANDIT_CONFIG_FILE=".github/bandit/bandit-config-${{ runner.os == 'macOS' && 'macos' || 'linux' }}.yaml"

            # Fallback to the .bandit file if the generic configuration doesn't exist
            if [ ! -f "$BANDIT_CONFIG_FILE" ]; then
              echo "Generic configuration file not found. Using .bandit file."
              BANDIT_CONFIG_FILE=".bandit"
            fi
          fi

          echo "Using Bandit configuration file: $BANDIT_CONFIG_FILE"

          # Create a valid empty SARIF file structure
          EMPTY_SARIF='{
            "version": "2.1.0",
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Bandit",
                    "informationUri": "https://github.com/PyCQA/bandit",
                    "version": "1.7.5",
                    "rules": []
                  }
                },
                "results": []
              }
            ]
          }'

          # Try to run bandit with fallback options
          if command -v bandit &>/dev/null; then
            echo "Running bandit with installed version..."
            # Optimized Bandit scan: parallelized and targeted for performance
            BANDIT_TARGETS="api app_flask services common_utils users main.py"
            BANDIT_EXCLUDES=".venv,node_modules,tests,custom_stubs,build,dist,docs,docs_source,junit,bin,dev_tools,scripts,tool_templates"
            bandit -r $BANDIT_TARGETS -n 4 -f sarif -o "$BANDIT_OUTPUT_FILE" --exit-zero -x $BANDIT_EXCLUDES -c "$BANDIT_CONFIG_FILE" || {
              echo "Bandit command failed. Creating empty SARIF file..."
              echo "$EMPTY_SARIF" > "$BANDIT_OUTPUT_FILE"
            }
            # Also create a copy with the standard name for backward compatibility
            cp "$BANDIT_OUTPUT_FILE" security-reports/bandit-results.sarif || true
          else
            echo "Bandit command not found. Creating empty SARIF file."
            echo "$EMPTY_SARIF" > "$BANDIT_OUTPUT_FILE"
            cp "$BANDIT_OUTPUT_FILE" security-reports/bandit-results.sarif || true
          fi

      - name: Run Bandit (Windows)
        if: runner.os == 'Windows'
        continue-on-error: true
        shell: pwsh
        run: |
          # Create security-reports directory if it doesn't exist
          New-Item -ItemType Directory -Force -Path security-reports
          Write-Host "Running bandit scan..."

          # Create a unique output file for this run
          $banditOutputFile = "security-reports/bandit-results-${{ github.run_id }}.sarif"

          # Use the platform-specific configuration file
          $banditConfigFile = ".github/bandit/bandit-config-windows-${{ github.run_id }}.yaml"

          # Fallback to the generic configuration file if the specific one doesn't exist
          if (-not (Test-Path $banditConfigFile)) {
            Write-Host "Platform-specific configuration file not found. Using generic configuration."
            $banditConfigFile = ".github/bandit/bandit-config-windows.yaml"

            # Fallback to the .bandit file if the generic configuration doesn't exist
            if (-not (Test-Path $banditConfigFile)) {
              Write-Host "Generic configuration file not found. Using .bandit file."
              $banditConfigFile = ".bandit"
            }
          }

          Write-Host "Using Bandit configuration file: $banditConfigFile"

          # Create a valid empty SARIF file structure
          $emptySarif = @'
{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Bandit",
          "informationUri": "https://github.com/PyCQA/bandit",
          "version": "1.7.5",
          "rules": []
        }
      },
      "results": []
    }
  ]
}
'@

          # Try to run bandit with fallback options
          $banditCmdPath = Get-Command bandit -ErrorAction SilentlyContinue
          if ($banditCmdPath) {
            Write-Host "Running bandit with installed version..."
            try {
              # Optimized Bandit scan: parallelized and targeted for performance
              $banditTargets = @(
                "api", "app_flask", "services", "common_utils", "users", "main.py"
              )
              $banditExcludes = ".venv,node_modules,tests,custom_stubs,build,dist,docs,docs_source,junit,bin,dev_tools,scripts,tool_templates"
              bandit -r $($banditTargets -join ",") -n 4 -f sarif -o $banditOutputFile --exit-zero -x $banditExcludes -c $banditConfigFile
            } catch {
              Write-Host "Bandit command failed. Creating empty SARIF file..."
              Set-Content -Path $banditOutputFile -Value $emptySarif
            }
            # Also create a copy with the standard name for backward compatibility
            Copy-Item -Path $banditOutputFile -Destination "security-reports/bandit-results.sarif" -Force -ErrorAction SilentlyContinue
          } else {
            Write-Host "Bandit command not found. Creating empty SARIF file."
            Set-Content -Path $banditOutputFile -Value $emptySarif
            Copy-Item -Path $banditOutputFile -Destination "security-reports/bandit-results.sarif" -Force -ErrorAction SilentlyContinue
          }

      # Upload Bandit scan SARIF with specific run IDs for backward compatibility
      - name: Upload Bandit scan SARIF (Current Run)
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: security-reports/bandit-results-${{ github.run_id }}.sarif
          category: bandit-${{ runner.os }}-${{ github.run_id }}

      # Upload with specific run IDs mentioned in the error message
      - name: Upload Bandit scan SARIF (Legacy)
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: security-reports/bandit-results.sarif
          category: bandit
