name: Setup pnpm (Reusable)
true:
  workflow_call:
    inputs:
      node-version:
        required: false
        type: string
        default: '18'
      pnpm-version:
        required: false
        type: string
        default: '8'
      working-directory:
        required: false
        type: string
        default: .
      install-dependencies:
        required: false
        type: boolean
        default: true
      verify-package-json:
        required: false
        type: boolean
        default: true
      create-if-missing:
        required: false
        type: boolean
        default: true
jobs:
  setup-pnpm:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
        - ubuntu-latest
        - windows-latest
      fail-fast: false
    steps:
    - name: Setup pnpm
      uses: pnpm/action-setup@v5
      with:
        version: ${{ inputs.pnpm-version }}
    - name: Add pnpm to PATH (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: 'export PATH=$(pnpm bin):$PATH

        echo "PATH=$(pnpm bin):$PATH" >> $GITHUB_ENV

        echo "Current PATH: $PATH"

        which pnpm || { echo "Error: pnpm is still not in PATH."; exit 1; }

        '
    - name: Add pnpm to PATH (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: "Write-Host \"Current PATH: $($env:PATH)\"\n$pnpmCmd = Get-Command pnpm\
        \ -ErrorAction SilentlyContinue\nif (-not $pnpmCmd) {\n    Write-Host \"pnpm\
        \ not found in PATH. Attempting to add it manually...\"\n    \n    # Try to\
        \ find Node.js installation directory\n    $nodePath = (Get-Command node -ErrorAction\
        \ SilentlyContinue).Source\n    if ($nodePath) {\n        $nodeDir = Split-Path\
        \ -Parent $nodePath\n        Write-Host \"Node.js found at: $nodeDir\"\n \
        \       \n        # Add Node.js directory to PATH (pnpm might be there)\n\
        \        $env:PATH = \"$nodeDir;$env:PATH\"\n        [System.Environment]::SetEnvironmentVariable(\"\
        PATH\",\n        $env:PATH,\n        [System.EnvironmentVariableTarget]::Process)\n\
        \        \n        # Check for pnpm in common locations\n        $pnpmLocations\
        \ = @(\n            \"$nodeDir\\pnpm.cmd\",\n            \"$nodeDir\\node_modules\\\
        pnpm\\bin\\pnpm.js\",\n            \"$env:APPDATA\\npm\\pnpm.cmd\",\n    \
        \        \"$env:LOCALAPPDATA\\pnpm\\pnpm.cmd\"\n        )\n        \n    \
        \    foreach ($loc in $pnpmLocations) {\n            if (Test-Path $loc) {\n\
        \                Write-Host \"Found pnpm at: $loc\"\n                $pnpmDir\
        \ = Split-Path -Parent $loc\n                $env:PATH = \"$pnpmDir;$env:PATH\"\
        \n                [System.Environment]::SetEnvironmentVariable(\"PATH\",\n\
        \                $env:PATH,\n                [System.EnvironmentVariableTarget]::Process)\n\
        \                break\n            }\n        }\n    }\n    \n    # Try again\
        \ after PATH modifications\n    $pnpmCmd = Get-Command pnpm -ErrorAction SilentlyContinue\n\
        \    if (-not $pnpmCmd) {\n        # Last resort: Install pnpm globally with\
        \ npm\n        Write-Host \"Still can't find pnpm. Installing globally with\
        \ npm...\"\n        npm install -g pnpm\n        if ($LASTEXITCODE -ne 0)\
        \ {\n            Write-Error \"Failed to install pnpm globally with npm.\"\
        \n            exit 1\n        }\n        \n        # Refresh PATH after npm\
        \ install\n        $env:PATH = [System.Environment]::GetEnvironmentVariable(\"\
        PATH\",\n        [System.EnvironmentVariableTarget]::Process)\n        $pnpmCmd\
        \ = Get-Command pnpm -ErrorAction SilentlyContinue\n    }\n    \n    # Final\
        \ check\n    if (-not $pnpmCmd) {\n        Write-Error \"Error: pnpm is still\
        \ not found in PATH after all attempts.\"\n        exit 1\n    }\n}\n\nWrite-Host\
        \ \"pnpm command found at: $($pnpmCmd.Source)\"\nWrite-Host \"Verifying pnpm\
        \ version:\"\npnpm --version\n"
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: pnpm
        cache-dependency-path: pnpm-lock.yaml
    - name: Verify package.json (Linux)
      if: inputs.verify-package-json && runner.os == 'Linux'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: "echo \"Current working directory: $(pwd)\"\necho \"Searching for package.json...\"\
        \n\nif [ -f \"package.json\" ]; then\n  echo \"Found package.json in current\
        \ directory.\"\n  echo \"Contents of package.json:\"\n  cat package.json\n\
        elif [ \"${{ inputs.create-if-missing }}\" == \"true\" ]; then\n  echo \"\
        Creating a minimal package.json for testing purposes.\"\n  echo '{\n    \"\
        name\": \"paissive_income_test\",\n    \"version\": \"1.0.0\",\n    \"description\"\
        : \"Temporary package.json for testing\",\n    \"private\": true\n  }' > package.json\n\
        \  echo \"Created minimal package.json:\"\n  cat package.json\nelse\n  echo\
        \ \"Error: package.json not found in the current directory.\"\n  ls -la\n\
        \  exit 1\nfi\n"
    - name: Verify package.json (Windows)
      if: inputs.verify-package-json && runner.os == 'Windows'
      shell: powershell
      working-directory: ${{ inputs.working-directory }}
      run: "Write-Host \"Current working directory: $(Get-Location)\"\nWrite-Host\
        \ \"Searching for package.json...\"\n\nif (Test-Path \"package.json\") {\n\
        \  Write-Host \"Found package.json in current directory.\"\n  Write-Host \"\
        Contents of package.json:\"\n  Get-Content package.json\n} elseif (\"${{ inputs.create-if-missing\
        \ }}\" -eq \"true\") {\n  Write-Host \"Creating a minimal package.json for\
        \ testing purposes.\"\n  $minimalPackageJson = @{\n    name = \"paissive_income_test\"\
        \n    version = \"1.0.0\"\n    description = \"Temporary package.json for\
        \ testing\"\n    private = $true\n  } | ConvertTo-Json\n  \n  Set-Content\
        \ -Path \"package.json\" -Value $minimalPackageJson\n  Write-Host \"Created\
        \ minimal package.json:\"\n  Get-Content \"package.json\"\n} else {\n  Write-Host\
        \ \"Error: package.json not found in the current directory.\"\n  Get-ChildItem\
        \ -Force\n  exit 1\n}\n"
    - name: Install dependencies (Linux)
      if: inputs.install-dependencies && runner.os == 'Linux'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: "pnpm install --reporter=default || {\n  echo \"Failed to install Node.js\
        \ dependencies with pnpm. Possible issues:\";\n  echo \"- Missing or conflicting\
        \ dependencies in package.json.\";\n  echo \"- pnpm not set up properly.\"\
        ;\n  exit 1;\n}\n"
    - name: Install dependencies (Windows)
      if: inputs.install-dependencies && runner.os == 'Windows'
      shell: powershell
      working-directory: ${{ inputs.working-directory }}
      run: "pnpm install --reporter=default\nif ($LASTEXITCODE -ne 0) {\n  Write-Error\
        \ \"Failed to install Node.js dependencies with pnpm. Possible issues:\"\n\
        \  Write-Error \"- Missing or conflicting dependencies in package.json.\"\n\
        \  Write-Error \"- pnpm not set up properly.\"\n  exit 1\n}\n"
    timeout-minutes: 30
'on':
  workflow_call: {}
  workflow_dispatch: {}
