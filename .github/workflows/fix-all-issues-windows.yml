name: Fix All Issues (Windows)

on:
  workflow_dispatch:
    inputs:
      specific_file:
        description: 'Specific file to fix'
        required: false
        type: string
      syntax_only:
        description: 'Fix only syntax errors'
        required: false
        default: false
        type: boolean
      format_only:
        description: 'Fix only formatting issues'
        required: false
        default: false
        type: boolean
      no_black:
        description: 'Skip Black formatter'
        required: false
        default: false
        type: boolean
      no_isort:
        description: 'Skip isort'
        required: false
        default: false
        type: boolean
      no_ruff:
        description: 'Skip Ruff linter'
        required: false
        default: false
        type: boolean
      verbose:
        description: 'Enable verbose output'
        required: false
        default: true
        type: boolean

jobs:
  fix-issues:
    runs-on: windows-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 black isort ruff
        python -m pip install -r requirements-dev.txt
        if (Test-Path -Path "requirements.txt") {
          python -m pip install -r requirements.txt
        }
      shell: pwsh

    - name: Check script exists
      run: |
        if (-not (Test-Path -Path "fix_all_issues_final.py")) {
          Write-Error "Error: fix_all_issues_final.py not found!"
          exit 1
        }
        Write-Host "Script found, proceeding..."
      shell: pwsh

    - name: Fix issues
      run: |
        # Build command with appropriate flags
        $CMD = "python fix_all_issues_final.py"

        if ('${{ inputs.verbose }}' -eq 'true') {
          $CMD += " --verbose"
        }

        if ('${{ inputs.syntax_only }}' -eq 'true') {
          $CMD += " --syntax-only"
        }

        if ('${{ inputs.format_only }}' -eq 'true') {
          $CMD += " --format-only"
        }

        if ('${{ inputs.no_black }}' -eq 'true') {
          $CMD += " --no-black"
        }

        if ('${{ inputs.no_isort }}' -eq 'true') {
          $CMD += " --no-isort"
        }

        if ('${{ inputs.no_ruff }}' -eq 'true') {
          $CMD += " --no-ruff"
        }

        # Run the command with specific file or all files
        if ('${{ inputs.specific_file }}' -ne '') {
          $FILE_PATH = '${{ inputs.specific_file }}'
          if (Test-Path -Path $FILE_PATH) {
            Write-Host "Fixing specific file: $FILE_PATH"
            Invoke-Expression "$CMD $FILE_PATH"
          } else {
            Write-Error "Error: File $FILE_PATH not found!"
            exit 1
          }
        } else {
          Write-Host "Fixing all Python files..."
          Invoke-Expression $CMD
        }

        # Check exit code
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Error: fix_all_issues_final.py failed!"
          exit 1
        }
      shell: pwsh

    - name: Check for changes
      id: git-check
      run: |
        $changes = git status --porcelain
        if ($changes) {
          Write-Host "changes=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "Changes detected:"
          Write-Host $changes
        } else {
          Write-Host "No changes detected"
        }
      shell: pwsh

    - name: Commit changes
      if: steps.git-check.outputs.changes == 'true'
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add .

        # Determine commit message based on what was fixed
        if ('${{ inputs.syntax_only }}' -eq 'true') {
          $COMMIT_MSG = "Auto-fix syntax issues"
        } elseif ('${{ inputs.format_only }}' -eq 'true') {
          $COMMIT_MSG = "Auto-fix formatting issues"
        } else {
          $COMMIT_MSG = "Auto-fix syntax and formatting issues"
        }

        git commit -m "$COMMIT_MSG"
        git push
      shell: pwsh
