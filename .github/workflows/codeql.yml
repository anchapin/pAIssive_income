name: CodeQL Analysis
true:
  pull_request:
    branches:
    - main
    - dev
    - master
    - develop
    paths-ignore:
    - '**/*.md'
    - '**/*.txt'
    - '**/*.rst'
    - '**/*.png'
    - '**/*.jpg'
    - '**/*.jpeg'
    - '**/*.gif'
    - '**/*.svg'
    - '**/*.ico'
    - .gitignore
    - docs/**
    - LICENSE
    - SECURITY.md
    - CONTRIBUTING.md
    - CODE_OF_CONDUCT.md
  schedule:
  - cron: 0 4 * * 1
  workflow_dispatch: {}
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
permissions:
  security-events: write
  actions: read
  contents: read
jobs:
  analyze-javascript:
    name: Analyze JavaScript/TypeScript
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        - windows-latest
        - macos-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Cache CodeQL database
      uses: actions/cache@v4
      with:
        path: ~/.codeql/databases
        key: codeql-javascript-${{ github.sha }}
        restore-keys: 'codeql-javascript-

          '
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: '8'
    - name: Add pnpm to PATH (Linux/macOS)
      if: runner.os != 'Windows'
      shell: bash
      run: 'export PATH=$(pnpm bin):$PATH

        echo "PATH=$(pnpm bin):$PATH" >> $GITHUB_ENV

        echo "Current PATH: $PATH"

        which pnpm || { echo "Error: pnpm is still not in PATH."; exit 1; }

        '
    - name: Add pnpm to PATH (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: "$pnpmPath = (& pnpm bin)\n$env:PATH = \"$pnpmPath;$env:PATH\"\necho \"\
        PATH=$pnpmPath;$env:PATH\" | Out-File -FilePath $env:GITHUB_ENV -Append\n\
        Write-Host \"Current PATH: $env:PATH\"\nif (-not (Get-Command pnpm -ErrorAction\
        \ SilentlyContinue)) {\n  Write-Host \"Error: pnpm is not in PATH.\"\n  exit\
        \ 1\n}\n"
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: pnpm
    - name: Check pnpm version
      shell: bash
      run: pnpm --version
    - name: Install dependencies
      shell: bash
      run: "# Check for package.json in the root directory\nif [ -f package.json ];\
        \ then\n  echo \"Installing dependencies with pnpm in root directory...\"\n\
        \  pnpm install\nelse\n  echo \"No package.json found in root directory,\n\
        \  checking ui/react_frontend...\"\n  # Check for package.json in ui/react_frontend\n\
        \  if [ -f ui/react_frontend/package.json ]; then\n    echo \"Installing dependencies\
        \ with pnpm in ui/react_frontend...\"\n    cd ui/react_frontend && pnpm install\n\
        \  else\n    echo \"No package.json found in ui/react_frontend,\n    skipping\
        \ dependency installation.\"\n  fi\nfi\n"
      continue-on-error: true
    - name: Create .codeqlignore file
      shell: bash
      run: 'echo "Creating .codeqlignore file instead of running fix script..."

        cat > .codeqlignore << ''EOL''

        .venv/**

        venv/**

        env/**

        .env/**

        **/virtualenv/**

        **/site-packages/**

        **/dist-packages/**

        **/node_modules/**

        **/dist/**

        **/build/**

        **/vendor/**

        **/external/**

        **/third_party/**

        **/__pycache__/**

        **/.pytest_cache/**

        **/.mypy_cache/**

        **/.ruff_cache/**

        **/*.pyc

        **/*.pyo

        **/*.pyd

        **/test/**

        **/tests/**

        **/__tests__/**

        **/__mocks__/**

        **/*.test.js

        **/*.test.ts

        **/*.test.jsx

        **/*.test.tsx

        **/*.spec.js

        **/*.spec.ts

        **/*.spec.jsx

        **/*.spec.tsx

        **/.github/**

        **/.vscode/**

        **/.idea/**

        **/coverage/**

        **/.git/**

        **/docs/**

        **/*.md

        **/*.mdx

        **/*.rst

        **/sphinx/**

        **/playwright-report/**

        **/generated/**

        **/sarif-results/**

        **/*.sarif

        **/*.sarif.json

        ui/react_frontend/node_modules/**

        sdk/javascript/node_modules/**

        EOL


        # List directories to verify

        echo "Current directories:"

        ls -la

        '
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript-typescript
        queries: security-and-quality
        config-file: ./.github/codeql/security-os-config.yml
    - name: Install Node.js dependencies
      shell: bash
      run: "# Function to install dependencies with fallback\ninstall_deps() {\n \
        \ local dir=$1\n  local original_dir=$(pwd)\n\n  if [ -n \"$dir\" ]; then\n\
        \    cd \"$dir\" || return 1\n  fi\n\n  echo \"Installing dependencies in\
        \ $(pwd)...\"\n\n  # Try with pnpm first (preferred)\n  if command -v pnpm\
        \ &>/dev/null; then\n    echo \"Using pnpm to install dependencies...\"\n\
        \    pnpm install || {\n      echo \"pnpm install failed, trying with npm...\"\
        \n      npm install || {\n        echo \"Both pnpm and npm installation failed\
        \ in $(pwd)\"\n        cd \"$original_dir\"\n        return 1\n      }\n \
        \   }\n  else\n    # Fallback to npm if pnpm is not available\n    echo \"\
        pnpm not found, using npm to install dependencies...\"\n    npm install ||\
        \ {\n      echo \"npm installation failed in $(pwd)\"\n      cd \"$original_dir\"\
        \n      return 1\n    }\n  fi\n\n  if [ -n \"$dir\" ]; then\n    cd \"$original_dir\"\
        \n  fi\n\n  return 0\n}\n\n# Install dependencies in root directory if package.json\
        \ exists\nif [ -f \"package.json\" ]; then\n  echo \"Found package.json in\
        \ root directory\"\n  install_deps\nfi\n\n# Install dependencies in ui/react_frontend\
        \ if package.json exists\nif [ -f \"ui/react_frontend/package.json\" ]; then\n\
        \  echo \"Found package.json in ui/react_frontend\"\n  install_deps \"ui/react_frontend\"\
        \nfi\n\n# Install dependencies in sdk/javascript if package.json exists\n\
        if [ -f \"sdk/javascript/package.json\" ]; then\n  echo \"Found package.json\
        \ in sdk/javascript\"\n  install_deps \"sdk/javascript\"\nfi\n"
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    - name: Check disk space (Linux/macOS)
      if: runner.os != 'Windows'
      shell: bash
      run: df -h
    - name: Check disk space (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: Get-Volume
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: /language:javascript-typescript
        upload: true
        output: sarif-results/javascript-typescript-${{ runner.os }}.sarif
    - name: Upload language-specific CodeQL configuration
      uses: github/codeql-action/upload-sarif@v3
      continue-on-error: true
      with:
        sarif_file: sarif-results/javascript-typescript-${{ runner.os }}.sarif
        category: /language:javascript-typescript
    - name: Upload SARIF results
      uses: actions/upload-artifact@v4
      with:
        name: javascript-typescript-${{ runner.os }}-sarif
        path: sarif-results/javascript-typescript-${{ runner.os }}.sarif
        retention-days: 7
  analyze-python:
    name: Analyze Python
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        - windows-latest
        - macos-latest
        python-version:
        - '3.9'
        - '3.10'
        - '3.11'
        - '3.12'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Cache CodeQL database
      uses: actions/cache@v4
      with:
        path: ~/.codeql/databases
        key: codeql-python-${{ matrix.python-version }}-${{ github.sha }}
        restore-keys: 'codeql-python-${{ matrix.python-version }}-

          '
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: pip
    - name: Install Python dependencies
      shell: bash
      run: 'python -m pip install --upgrade pip setuptools wheel

        pip install -r requirements.txt

        pip install -r requirements-dev.txt

        '
      continue-on-error: true
    - name: Create Python-specific CodeQL custom queries
      shell: bash
      run: "mkdir -p .github/codeql/python-queries\ncat > .github/codeql/python-queries/logging-validation.ql\
        \ << 'EOL'\n/**\n * @name Python Log Injection Check\n * @description Detects\
        \ potential log injection vulnerabilities in Python code\n * @kind path-problem\n\
        \ * @problem.severity error\n * @precision high\n * @id py/log-injection\n\
        \ * @tags security\n *       logging\n *       injection\n */\n\nimport python\n\
        import semmle.python.dataflow.new.DataFlow\nimport semmle.python.dataflow.new.TaintTracking\n\
        import semmle.python.Concepts\n\nclass LoggingCall extends DataFlow::CallCfgNode\
        \ {:\n  LoggingCall() {\n    exists(string name |\n      name = this.getFunction().toString()\
        \ and\n      name.matches([\"%log%\", \"%print%\", \"%logger%\"])\n    )\n\
        \  }\n}\n\nclass LogInjectionConfig extends TaintTracking::Configuration {:\n\
        \  LogInjectionConfig() { this = \"LogInjectionConfig\" }\n\n  override predicate\
        \ isSource(DataFlow::Node source) {\n    exists(DataFlow::ParameterNode param\
        \ |\n      param = source\n    )\n  }\n\n  override predicate isSink(DataFlow::Node\
        \ sink) {\n    exists(LoggingCall call |\n      sink = call.getAnArgument()\n\
        \    )\n  }\n}\n\nfrom LogInjectionConfig config,\nDataFlow::PathNode source,\n\
        DataFlow::PathNode sink\nwhere config.hasFlowPath(source, sink)\nselect sink.getNode(),\
        \ source, sink, \n       \"This logging call may contain unsanitized input\
        \ from $@.\",\n       source.getNode(), \"this user-provided value\"\nEOL\n"
    - name: Initialize CodeQL for Python
      uses: github/codeql-action/init@v3
      with:
        languages: python
        queries: security-and-quality, ./.github/codeql/python-queries/logging-validation.ql
    - name: Perform CodeQL Analysis for Python
      uses: github/codeql-action/analyze@v3
      with:
        category: /language:python
        upload: true
        output: sarif-results/python-${{ runner.os }}.sarif
    - name: Upload language-specific CodeQL configuration
      uses: github/codeql-action/upload-sarif@v3
      continue-on-error: true
      with:
        sarif_file: sarif-results/python-${{ runner.os }}.sarif
        category: /language:python
    - name: Upload SARIF results
      uses: actions/upload-artifact@v4
      with:
        name: python-${{ runner.os }}-sarif
        path: sarif-results/python-${{ runner.os }}.sarif
        retention-days: 7
    - name: Add custom CodeQL ruleset
      shell: bash
      run: "mkdir -p .github/codeql/custom-queries\ncat > .github/codeql/custom-queries/log-injection.ql\
        \ << 'EOL'\n/**\n * @name Log Injection Check\n * @description Detects potential\
        \ log injection vulnerabilities\n * @kind path-problem\n * @problem.severity\
        \ error\n * @precision high\n * @id js/log-injection\n * @tags security\n\
        \ *       log-injection\n */\n\nimport javascript\nimport DataFlow::PathGraph\n\
        \nclass LoggingCall extends DataFlow::CallNode {:\n  LoggingCall() {\n   \
        \ exists(string name |\n      name = this.getCalleeName() and\n      name.toLowerCase().matches(\"\
        %log%\")\n    )\n  }\n}\n\nclass LogInjectionConfiguration extends TaintTracking::Configuration\
        \ {:\n  LogInjectionConfiguration() { this = \"LogInjectionConfiguration\"\
        \ }\n\n  override predicate isSource(DataFlow::Node source) {\n    exists(DataFlow::ParameterNode\
        \ param |\n      param = source and\n      not param.getName().toLowerCase().matches(\"\
        %sanitized%\")\n    )\n  }\n\n  override predicate isSink(DataFlow::Node sink)\
        \ {\n    exists(LoggingCall call |\n      sink = call.getAnArgument() and\n\
        \      not sink.asExpr().getFile().getAbsolutePath().matches(\"%test%\")\n\
        \    )\n  }\n}\n\nfrom LogInjectionConfiguration config,\nDataFlow::PathNode\
        \ source,\nDataFlow::PathNode sink\nwhere config.hasFlowPath(source, sink)\n\
        select sink,\nsource,\nsink,\n\"Log injection from $@.\",\nsource,\n\"user-provided\
        \ value\"\nEOL\n"
    - name: Update CodeQL config with custom queries
      shell: bash
      run: "cat > .github/codeql/security-os-config.yml << 'EOL'\nname: \"Custom CodeQL\
        \ Config\"\n\nqueries:\n  - uses: security-extended\n  - uses: security-and-quality\n\
        \  - uses: ./.github/codeql/custom-queries/log-injection.ql\n\npaths:\n  -\
        \ src\n  - api\n  - ui\n\npaths-ignore:\n  - '**/node_modules/**'\n  - '**/dist/**'\n\
        \  - '**/build/**'\n  - '**/coverage/**'\n  - '**/test/**'\n  - '**/tests/**'\n\
        EOL\n"
'on':
  push:
    branches:
    - main
    - develop
    - master
  pull_request:
    branches:
    - main
    - develop
    - master
  workflow_dispatch: {}
