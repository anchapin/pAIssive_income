name: "CodeQL Analysis"

# This workflow performs CodeQL analysis for JavaScript/TypeScript and Python
# It runs on push to main branches, pull requests to main branches, and on a weekly schedule
# The workflow is designed to provide comprehensive security analysis with detailed configuration

on:
  push:
    branches: [ main, dev, master, develop ]
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - '**/*.rst'
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.jpeg'
      - '**/*.gif'
      - '**/*.svg'
      - '**/*.ico'
      - '.gitignore'
      - 'docs/**'
      - 'LICENSE'
      - 'SECURITY.md'
      - 'CONTRIBUTING.md'
      - 'CODE_OF_CONDUCT.md'
  pull_request:
    branches: [ main, dev, master, develop ]
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - '**/*.rst'
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.jpeg'
      - '**/*.gif'
      - '**/*.svg'
      - '**/*.ico'
      - '.gitignore'
      - 'docs/**'
      - 'LICENSE'
      - 'SECURITY.md'
      - 'CONTRIBUTING.md'
      - 'CODE_OF_CONDUCT.md'
  schedule:
    - cron: '0 4 * * 1'  # Weekly on Monday at 4 AM UTC (off-peak hours)
  workflow_dispatch:  # Allow manual triggering

# Limit concurrent runs to conserve resources
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  # Required for all workflows
  security-events: write
  # Only needed for workflows in private repositories
  actions: read
  contents: read

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    timeout-minutes: 90 # Increased timeout for potentially long builds

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript-typescript', 'python' ]
        # Add os matrix if platform-specific issues arise or for broader testing
        # os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full git history for better analysis

      # JavaScript/TypeScript specific setup
      - name: Setup pnpm
        if: matrix.language == 'javascript-typescript'
        uses: pnpm/action-setup@v4
        with:
          version: '8' # Specify pnpm version
          run_install: false # We will run install manually later

      - name: Set up Node.js
        if: matrix.language == 'javascript-typescript'
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Specify Node.js version
          cache: 'pnpm' # Cache pnpm dependencies

      - name: Add pnpm to PATH (Linux/macOS)
        if: matrix.language == 'javascript-typescript' && runner.os != 'Windows'
        shell: bash
        run: |
          echo "PATH=$(pnpm -g bin):$(pnpm bin):$PATH" >> $GITHUB_ENV
          echo "Current PATH: $PATH"
          which pnpm || {
            echo "pnpm not found in PATH. Installing globally with npm..."
            npm install -g pnpm
            echo "PATH=$(npm bin -g):$PATH" >> $GITHUB_ENV # Add npm global bin to PATH
            which pnpm || { echo "Error: pnpm is still not in PATH after npm install."; exit 1; }
          }

      - name: Add pnpm to PATH (Windows)
        if: matrix.language == 'javascript-typescript' && runner.os == 'Windows'
        shell: pwsh
        run: |
          try {
            # Add pnpm to PATH if it exists in the default location
            $pnpmPath = "$env:LOCALAPPDATA\pnpm"
            if (Test-Path $pnpmPath) {
              echo "Adding $pnpmPath to PATH"
              echo "$pnpmPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
            }
            # Verify pnpm is available
            $pnpmVersion = pnpm --version
            echo "pnpm version: $pnpmVersion"
          } catch {
            echo "Error setting up pnpm: $_"
            echo "Installing pnpm globally with npm..."
            npm install -g pnpm
            # Add npm global bin to PATH
            $npmBin = npm bin -g
            echo "Adding npm global bin to PATH: $npmBin"
            echo "$npmBin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
            # Verify pnpm is now available
            try {
              $pnpmVersion = pnpm --version
              echo "pnpm version after npm install: $pnpmVersion"
            } catch {
              echo "pnpm still not available after npm install. CodeQL might use npm."
            }
          }

      - name: Verify Node.js and pnpm installation
        if: matrix.language == 'javascript-typescript'
        shell: bash
        run: |
          echo "Node.js version: $(node --version)"
          echo "npm version: $(npm --version)"
          if command -v pnpm &>/dev/null; then
            echo "pnpm version: $(pnpm --version)"
          else
            echo "pnpm not found, CodeQL might use npm for dependency installation."
          fi

      # Python specific setup
      - name: Set up Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12' # Specify Python version

      - name: Install uv (Python package manager)
        if: matrix.language == 'python'
        shell: bash
        run: |
          echo "Installing uv..."
          pip install uv

      - name: Install Python dependencies
        if: matrix.language == 'python'
        shell: bash
        run: |
          # Install from requirements.txt if it exists
          if [ -f "requirements.txt" ]; then
            echo "Installing Python dependencies from requirements.txt using uv..."
            uv pip install --system -r requirements.txt
          else
            echo "No requirements.txt found. Skipping this step."
            echo "If your Python project has dependencies, ensure they are declared in requirements.txt or pyproject.toml."
          fi
          # Install the project itself (e.g., if it's a package)
          echo "Installing the current project using uv (if setup.py or pyproject.toml exists)..."
          uv pip install --system .

      - name: Configure pip for CodeQL (Python)
        if: matrix.language == 'python'
        run: |
          echo "PIP_NO_CACHE_DIR=true" >> $GITHUB_ENV
          echo "PIP_DISABLE_PIP_VERSION_CHECK=true" >> $GITHUB_ENV

      # Common steps for all languages
      - name: Check disk space before analysis
        shell: bash
        run: df -h

      # This step ensures CodeQL config exists, or creates a default one.
      # It also checks for lock files for JS and dependency files for Python.
      - name: Ensure CodeQL configuration and verify dependencies
        shell: bash
        run: |
          # Ensure CodeQL config directory and file
          mkdir -p .github/codeql
          if [ ! -f ".github/codeql/security-os-config.yml" ]; then
            echo "CodeQL config file not found. Creating minimal .github/codeql/security-os-config.yml..."
            cat <<EOF > .github/codeql/security-os-config.yml
name: "Unified CodeQL Configuration"
# This file can be expanded with specific queries, paths to ignore, etc.
# Example:
# paths-ignore:
#   - 'src/tests'
# queries:
#   - uses: security-and-quality
EOF
          else
            echo "CodeQL config file .github/codeql/security-os-config.yml already exists."
          fi

          if [[ "${{ matrix.language }}" == "javascript-typescript" ]]; then
            echo "Verifying JavaScript/TypeScript lock files..."
            if [ -f "pnpm-lock.yaml" ]; then
              echo "pnpm-lock.yaml found."
            elif [ -f "package-lock.json" ]; then
              echo "package-lock.json found."
            elif [ -f "yarn.lock" ]; then
              echo "yarn.lock found."
            else
              echo "Warning: No JS/TS lock file (pnpm-lock.yaml, package-lock.json, or yarn.lock) found."
              echo "CodeQL analysis quality may be reduced. Consider committing a lock file."
            fi
          elif [[ "${{ matrix.language }}" == "python" ]]; then
            echo "Verifying Python dependency files..."
            if [ ! -f "requirements.txt" ] && [ ! -f "pyproject.toml" ]; then
              echo "Warning: Neither requirements.txt nor pyproject.toml found."
              echo "CodeQL analysis quality may be reduced. Ensure Python dependencies are declared."
            else
              if [ -f "requirements.txt" ]; then
                echo "requirements.txt found."
              fi
              if [ -f "pyproject.toml" ]; then
                echo "pyproject.toml found."
              fi
            fi
          fi

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          # If you wish to use a custom CodeQL configuration file, uncomment the following line
          # config-file: ./.github/codeql/security-os-config.yml
          # queries: +security-extended, +security-and-quality # Example: run more queries
          # Add any specific CodeQL flags or configurations here
          # For example, to specify a build mode for compiled languages:
          # build-mode: autobuild # or 'none' if you provide custom build steps

      # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, Swift).
      # If this step fails, then you should remove it and run the build manually (see below)
      # For JavaScript, Python, Ruby, TypeScript, autobuild is a no-op.
      - name: Autobuild
        if: matrix.language != 'javascript-typescript' && matrix.language != 'python' # Autobuild is no-op for JS/TS and Python
        uses: github/codeql-action/autobuild@v3

      # If Autobuild fails above, remove it and uncomment the following three lines
      # and configure them (or add more) to build your code if your project
      # uses a compiled language
      # - run: |
      #     echo "Run, Build Application using script"
      #     ./build_script

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

      - name: Check disk space after analysis
        shell: bash
        run: df -h
