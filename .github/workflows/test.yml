name: Python Tests (Reusable)
true:
  workflow_call:
    inputs:
      python-version:
        required: true
        type: string
      test-path:
        required: false
        type: string
        default: tests/
jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: '~/.cache/uv

          ~/.uv

          .pytest_cache

          '
        key: ${{ runner.os }}-uv-test-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: '${{ runner.os }}-uv-test-

          '
    - name: Install uv
      run: 'curl -LsSf https://astral.sh/uv/install.sh | sh

        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

        '
    - name: Install dependencies
      run: "python -m pip install --upgrade pip\n# Cleanup old distributions\nfind\
        \ . -type d -name \"*.egg-info\" -exec rm -rf {} + || true\nfind . -type d\
        \ -name \"*.dist-info\" -exec rm -rf {} + || true\nfind . -name \"*.egg\"\
        \ -exec rm -f {} + || true\n\n# Create virtual environment with uv\nuv venv\
        \ .venv || {\n  echo \"Failed to create virtual environment with uv. Falling\
        \ back to Python's venv module...\"\n  python -m venv .venv\n}\n\n# Activate\
        \ virtual environment\nsource .venv/bin/activate\n\n# Install dependencies\
        \ with uv\nuv pip install pytest pytest-cov pytest-xdist pytest-asyncio ||\
        \ {\n  echo \"Failed to install test dependencies with uv pip. Installing\
        \ uv in the virtual environment...\"\n  python -m pip install --upgrade \"\
        uv>=0.7.8\"\n  uv pip install pytest pytest-cov pytest-xdist pytest-asyncio\n\
        }\n\nif [ -f requirements-dev.txt ]; then\n  uv pip install -r requirements-dev.txt\
        \ || echo \"Some requirements failed, continuing...\"\nfi\nif [ -f requirements.txt\
        \ ]; then\n  uv pip install -r requirements.txt || echo \"Some requirements\
        \ failed, continuing...\"\nfi\n\nuv pip install -e . -v\n"
    - name: Create junit directory
      run: mkdir -p junit
    - name: Run tests
      env:
        PYTHONPATH: ${{ github.workspace }}
        FLASK_ENV: development
        DATABASE_URL: 'sqlite:///:memory:'
        TESTING: 'true'
      run: "# Activate virtual environment\nsource .venv/bin/activate\n\n# Run tests\
        \ with pytest\npytest ${{ inputs.test-path }} \\\n  -n auto \\\n  -v \\\n\
        \  --import-mode=importlib \\\n  --cov=. \\\n  --cov-report=xml \\\n  --cov-report=term-missing\
        \ \\\n  --cov-fail-under=5 \\\n  --junitxml=junit/test-results.xml\n"
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.run_id }}-${{ github.job }}
        path: junit/test-results.xml
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ github.run_id }}
        path: coverage.xml
'on':
  push:
    branches:
    - main
    - develop
    - master
  pull_request:
    branches:
    - main
    - develop
    - master
  workflow_dispatch: {}
