name: Python Tests (Reusable)

on:
  workflow_call:
    inputs:
      python-version:
        required: true
        type: string
      test-path:
        required: false
        type: string
        default: "tests/"

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            ~/.uv
            .pytest_cache
          key: ${{ runner.os }}-uv-test-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-uv-test-

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          # Cleanup old distributions
          find . -type d -name "*.egg-info" -exec rm -rf {} + || true
          find . -type d -name "*.dist-info" -exec rm -rf {} + || true
          find . -name "*.egg" -exec rm -f {} + || true

          # Create virtual environment with uv
          uv venv .venv || {
            echo "Failed to create virtual environment with uv. Falling back to Python's venv module..."
            python -m venv .venv
          }

          # Activate virtual environment
          source .venv/bin/activate

          # First install aiohttp explicitly to ensure it's available
          python -m pip install --upgrade pip
          python -m pip install aiohttp>=3.9.0

          # Verify aiohttp is installed
          python -c "import aiohttp; print(f'aiohttp version: {aiohttp.__version__}')" || {
            echo "Failed to import aiohttp. Trying alternative installation..."
            python -m pip install --force-reinstall aiohttp>=3.9.0
            python -c "import aiohttp; print(f'aiohttp version: {aiohttp.__version__}')"
          }

          # Install test dependencies
          python -m pip install pytest pytest-cov pytest-xdist pytest-asyncio

          # Install project requirements
          if [ -f requirements-dev.txt ]; then
            python -m pip install -r requirements-dev.txt || {
              echo "Failed to install from requirements-dev.txt with pip. Trying with uv..."
              uv pip install -r requirements-dev.txt
            }
          fi

          if [ -f requirements.txt ]; then
            python -m pip install -r requirements.txt || {
              echo "Failed to install from requirements.txt with pip. Trying with uv..."
              uv pip install -r requirements.txt
            }
          fi

          # Install the package in development mode
          python -m pip install -e . -v || {
            echo "Failed to install package with pip. Trying with uv..."
            uv pip install -e . -v
          }

      - name: Create junit directory
        run: mkdir -p junit

      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          # Activate virtual environment
          source .venv/bin/activate

          # Run tests with pytest
          # Use the coverage threshold of 80%
          pytest ${{ inputs.test-path }} \
            -n auto \
            -v \
            --import-mode=importlib \
            --cov=. \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=80 \
            --junitxml=junit/test-results.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_id }}-${{ github.job }}
          path: junit/test-results.xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.run_id }}
          path: coverage.xml