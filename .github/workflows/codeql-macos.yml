name: "CodeQL Analysis - macOS"

# This workflow performs CodeQL analysis for JavaScript/TypeScript and Python on macOS
# It runs on push to main branches, pull requests to main branches, and on a weekly schedule
# The workflow is designed to provide comprehensive security analysis with detailed configuration

on:
  pull_request:
    branches: [ main, dev, master, develop ]
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - '**/*.rst'
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.jpeg'
      - '**/*.gif'
      - '**/*.svg'
      - '**/*.ico'
      - '.gitignore'
      - 'docs/**'
      - 'LICENSE'
      - 'SECURITY.md'
      - 'CONTRIBUTING.md'
      - 'CODE_OF_CONDUCT.md'
  schedule:
    - cron: '0 4 * * 1'  # Weekly on Monday at 4 AM UTC (off-peak hours)
  workflow_dispatch:  # Allow manual triggering
  workflow_run:
    workflows: ["Auto Fix (Linting & CodeQL Issues)"]
    types:
      - completed

# Limit concurrent runs to conserve resources
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  # Required for all workflows
  security-events: write
  # Only needed for workflows in private repositories
  actions: read
  contents: read

jobs:
  analyze-javascript:
    name: Analyze JavaScript/TypeScript
    runs-on: macos-latest
    timeout-minutes: 90  # Increased timeout for larger codebases
    env:
      TOOL_API_KEY: "ci-test-api-key-for-github-actions"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full git history for better analysis

      # Cache CodeQL database to speed up analysis
      - name: Cache CodeQL database
        uses: actions/cache@v4
        with:
          path: ~/.codeql/databases
          key: codeql-javascript-${{ github.sha }}
          restore-keys: |
            codeql-javascript-

      # Set up pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '8'

      # Add pnpm to PATH (macOS)
      - name: Add pnpm to PATH
        shell: bash
        run: |
          export PATH=$(pnpm bin):$PATH
          echo "PATH=$(pnpm bin):$PATH" >> $GITHUB_ENV
          echo "Current PATH: $PATH"
          which pnpm || { echo "Error: pnpm is still not in PATH."; exit 1; }

      # Set up Node.js for better JavaScript/TypeScript analysis
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.1' # Specify a patch version
          # Disable cache to avoid potential issues with pnpm
          # cache: 'pnpm'

      # Verify pnpm installation
      - name: Check pnpm version
        run: pnpm --version

      # Install dependencies if package.json exists
      - name: Install dependencies
        run: |
          # Check for package.json in the root directory
          if [ -f package.json ]; then
            echo "Installing dependencies with pnpm in root directory..."
            pnpm install
          else
            echo "No package.json found in root directory, checking ui/react_frontend..."
            # Check for package.json in ui/react_frontend
            if [ -f ui/react_frontend/package.json ]; then
              echo "Installing dependencies with pnpm in ui/react_frontend..."
              cd ui/react_frontend && pnpm install
            else
              echo "No package.json found in ui/react_frontend, skipping dependency installation."
            fi
          fi
        continue-on-error: true

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript
          queries: security-and-quality
          config-file: ./.github/codeql/security-os-macos.yml

      # Autobuild attempts to build any compiled languages
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      # Display disk space before analysis
      - name: Check disk space
        run: df -h

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/security/os:macos-latest"
          upload: true
          output: sarif-results/javascript-typescript-macos.sarif

      # Add OS-specific configuration for macOS
      - name: Upload OS-specific CodeQL configuration
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: sarif-results/javascript-typescript-macos.sarif
          category: "/security/os:macos-latest"

      # Upload SARIF results as an artifact
      - name: Upload SARIF results
        uses: actions/upload-artifact@v4
        with:
          name: javascript-typescript-macos-sarif
          path: sarif-results/javascript-typescript-macos.sarif
          retention-days: 7

  analyze-python:
    name: Analyze Python
    runs-on: macos-latest
    timeout-minutes: 90  # Increased timeout for larger codebases

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full git history for better analysis

      # Cache CodeQL database to speed up analysis
      - name: Cache CodeQL database
        uses: actions/cache@v4
        with:
          path: ~/.codeql/databases
          key: codeql-python-${{ github.sha }}
          restore-keys: |
            codeql-python-

      # Set up Python for better analysis
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          # Remove cache: 'pip' to avoid cache folder path issues

      # Install dependencies if requirements.txt exists
      - name: Install dependencies
        run: |
          echo "Verifying lock files exist before CodeQL analysis..."
          LOCK_FILES=$(find . -name "package-lock.json" -o -name "yarn.lock" -o -name "pnpm-lock.yaml")

          if [ -z "$LOCK_FILES" ]; then
            echo "Warning: No lock files found. Creating a minimal package-lock.json in the root directory."

            echo '{"name":"paissive-income","version":"1.0.0","lockfileVersion":3,"requires":true,"packages":{"":{"name":"paissive-income","version":"1.0.0"}}}' > package-lock.json

            echo "Created minimal package-lock.json in the root directory."

            if [ -f "package-lock.json" ]; then
              echo "Verification: package-lock.json exists and contains:"
              cat package-lock.json

              if command -v node &>/dev/null; then
                echo "Validating JSON with Node.js..."
                node -e "try { const data = require('./package-lock.json'); console.log('JSON is valid'); } catch(e) { console.error('Invalid JSON:', e.message); process.exit(1); }" || {
                  echo '{"name":"paissive-income","version":"1.0.0","lockfileVersion":3}' > package-lock.json
                  echo "Created simplified package-lock.json."
                }
              else
                echo "Node.js not available for JSON validation, skipping validation step."
              fi

              if [ -f ".gitignore" ]; then
                if ! grep -q "package-lock.json" .gitignore; then
                  echo "Adding package-lock.json to .gitignore..."
                  echo -e "\n# Generated during CodeQL analysis\npackage-lock.json" >> .gitignore
                fi
              fi
            else
              echo "CRITICAL ERROR: Failed to create package-lock.json, trying alternative method..."
              printf '{"name":"paissive-income","version":"1.0.0","lockfileVersion":3}\n' > package-lock.json

              if [ -f "package-lock.json" ]; then
                echo "Successfully created package-lock.json with alternative method."
                cat package-lock.json
              else
                echo '{"name":"paissive-income","version":"1.0.0"}' > package.json
                echo "Created package.json as fallback."
              fi
            fi
          else
            echo "Found lock files:"
            echo "$LOCK_FILES"
          fi
        continue-on-error: true

      # Install dependencies for JavaScript/TypeScript
      - name: Install Node.js dependencies
        if: matrix.language == 'javascript-typescript'
        shell: bash
        run: |
          # Function to install dependencies with fallback
          install_deps() {
            local dir=$1
            local original_dir=$(pwd)

            if [ -n "$dir" ]; then
              cd "$dir" || return 1
            fi

            echo "Installing dependencies in $(pwd)..."

            # Try with pnpm first (preferred)
            if command -v pnpm &>/dev/null; then
              echo "Using pnpm to install dependencies..."
              pnpm install || {
                echo "pnpm install failed, trying with npm..."
                npm install || {
                  echo "Both pnpm and npm installation failed in $(pwd)"
                  if [ -n "$dir" ]; then
                    cd "$original_dir"
                  fi
                  return 1
                }
              }
            else
              # Fallback to npm if pnpm is not available
              echo "pnpm not found, installing globally..."
              npm install -g pnpm
              echo "Using newly installed pnpm to install dependencies..."
              pnpm install || {
                echo "pnpm install failed, trying with npm..."
                npm install || {
                  echo "Both pnpm and npm installation failed in $(pwd)"
                  if [ -n "$dir" ]; then
                    cd "$original_dir"
                  fi
                  return 1
                }
              }
            fi

            if [ -n "$dir" ]; then
              cd "$original_dir"
            fi

            return 0
          }

          # Install dependencies in root directory if package.json exists
          if [ -f "package.json" ]; then
            echo "Found package.json in root directory"
            install_deps
          fi

          # Install dependencies in ui/react_frontend if package.json exists
          if [ -f "ui/react_frontend/package.json" ]; then
            echo "Found package.json in ui/react_frontend"
            install_deps "ui/react_frontend"
          fi

          # Install dependencies in sdk/javascript if package.json exists
          if [ -f "sdk/javascript/package.json" ]; then
            echo "Found package.json in sdk/javascript"
            install_deps "sdk/javascript"
          fi
        continue-on-error: true

      # Install dependencies for Python
      - name: Install Python dependencies
        if: matrix.language == 'python'
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade "uv>=0.7.8"
          if [ -f requirements.txt ]; then
            echo "Installing pip dependencies from requirements.txt using 'uv pip'..."
            uv pip install -r requirements.txt || {
              echo "Failed to install with uv pip, falling back to regular pip..."
              python -m pip install --upgrade pip
              pip install -r requirements.txt
            }
          elif [ -f requirements-dev.txt ]; then
            echo "Installing pip dependencies from requirements-dev.txt using 'uv pip'..."
            uv pip install -r requirements-dev.txt || {
              echo "Failed to install with uv pip, falling back to regular pip..."
              python -m pip install --upgrade pip
              pip install -r requirements-dev.txt
            }
          else
            echo "No requirements.txt or requirements-dev.txt found, skipping dependency installation."
          fi

          # Install package in development mode if setup.py exists
          if [ -f setup.py ]; then
            echo "Installing package in development mode using 'uv pip'..."
            uv pip install -e . || {
              echo "Failed to install package with uv pip, falling back to regular pip..."
              python -m pip install --upgrade pip
              pip install -e .
            }
          fi
        continue-on-error: true

      # Ensure CodeQL configuration files exist
      - name: Ensure CodeQL configuration files
        shell: bash
        run: |
          if [ -f ".github/scripts/ensure-codeql-configs.sh" ]; then
            echo "Running ensure-codeql-configs.sh script..."
            bash .github/scripts/ensure-codeql-configs.sh
          else
            echo "ensure-codeql-configs.sh script not found. Creating minimal configuration..."
            mkdir -p .github/codeql
            cat > .github/codeql/security-os-macos.yml << 'EOF'
name: "CodeQL Configuration for macOS"
os: macos-latest
queries:
  - uses: security-and-quality
  - uses: security-extended
  - uses: security
disable-default-queries: false
trap-for-errors: true
            EOF
            cat > .github/codeql/security-os-config.yml << 'EOF'
name: "Unified CodeQL Configuration"
queries:
  - uses: security-and-quality
  - uses: security-extended
  - uses: security
disable-default-queries: false
trap-for-errors: true
            EOF
          fi

      # Initialize CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: security-and-quality
          config-file: ./.github/codeql/security-os-macos.yml

      # Autobuild attempts to build any compiled languages
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      # Display disk space before analysis
      - name: Check disk space
        run: df -h

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/security/os:macos-latest"
          upload: true
          output: sarif-results/python-macos.sarif

      # Add OS-specific configuration for macOS
      - name: Upload OS-specific CodeQL configuration
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: sarif-results/python-macos.sarif
          category: "/security/os:macos-latest"

      # Upload SARIF results as an artifact
      - name: Upload SARIF results
        uses: actions/upload-artifact@v4
        with:
          name: python-macos-sarif
          path: sarif-results/python-macos.sarif
          retention-days: 7
