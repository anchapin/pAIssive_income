name: Docker Compose Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  docker-compose-integration:
    runs-on: ubuntu-latest
    
    steps:
      - name: Initial disk space check
        run: |
          echo "Initial disk space:"
          df -h
          echo "Memory usage:"
          free -m

      - name: Clean up runner workspace
        run: |
          echo "Cleaning up runner workspace..."
          rm -rf /tmp/* || true
          sudo apt-get clean
          echo "Disk space after workspace cleanup:"
          df -h

      - name: Clean up Docker system
        run: |
          echo "Cleaning up unused Docker images, containers, and volumes..."
          docker system prune -a -f --volumes
          echo "Disk space after Docker cleanup:"
          df -h

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Use Docker's official GitHub Action for Docker Compose setup
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
          buildkitd-flags: --debug
          driver-opts: |
            image=moby/buildkit:latest
            network=host
        continue-on-error: true

      - name: Install Buildx as default builder
        run: docker buildx install
        continue-on-error: true

      # Verify Docker Compose installation
      - name: Verify Docker Compose installation
        run: |
          echo "Checking Docker Compose installation..."
          if docker compose version; then
            echo "✅ Docker Compose plugin is available"
          elif docker-compose --version; then
            echo "✅ Standalone Docker Compose is available"
          else
            echo "⚠️ Docker Compose not found. Installing Docker Compose plugin..."
            sudo apt-get update
            sudo apt-get install -y docker-compose-plugin

            if docker compose version; then
              echo "✅ Docker Compose plugin installed successfully"
            else
              echo "⚠️ Failed to install Docker Compose plugin. Installing standalone Docker Compose..."
              COMPOSE_VERSION="v2.20.2"
              sudo curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose

              if docker-compose --version; then
                echo "✅ Standalone Docker Compose installed successfully"
              else
                echo "❌ All Docker Compose installation attempts failed"
                exit 1
              fi
            fi
          fi

      # Check Docker daemon status before network creation
      - name: Verify Docker setup
        run: |
          echo "Checking Docker daemon status..."
          if ! docker info >/dev/null 2>&1; then
            echo "ERROR: Docker daemon is not responding. Attempting to restart..."
            sudo systemctl restart docker || true
            sleep 10
            if ! docker info >/dev/null 2>&1; then
              echo "CRITICAL: Docker daemon failed to restart."
              exit 1
            fi
          fi
          echo "Docker is running."

      # Create Docker network with simple approach
      - name: Create Docker network
        run: |
          echo "Creating Docker network 'paissive-network'..."
          docker network create paissive-network || echo "Network 'paissive-network' already exists."
          docker network inspect paissive-network || echo "Failed to inspect network, but continuing..."

      # Debug Docker networks
      - name: Debug Docker networks
        run: |
          echo "Inspecting all Docker networks..."
          docker network ls
          echo "Inspecting 'paissive-network'..."
          docker network inspect paissive-network || echo "Network 'paissive-network' does not exist."

      # Check if Docker Hub secrets are set
      - name: Check Docker Hub secrets
        id: check-secrets
        run: |
          if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ] || [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "::warning::DOCKERHUB_USERNAME and/or DOCKERHUB_TOKEN secrets are not set. Docker Hub login will be skipped, which may lead to rate limiting."
            echo "dockerhub_secrets_set=false" >> $GITHUB_OUTPUT
          else
            echo "dockerhub_secrets_set=true" >> $GITHUB_OUTPUT
          fi

      # Log in to Docker Hub to avoid rate limits
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        if: steps.check-secrets.outputs.dockerhub_secrets_set == 'true'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Pull Docker images with enhanced retry logic and fallback options
      - name: Pull Docker images
        run: |
          echo "Pulling Docker images with enhanced retry logic and fallback options..."
          max_attempts=5
          attempt=1

          # Function to try pulling an image with retries
          try_pull_image() {
            local image="$1"
            local current_attempt=1
            local max_local_attempts=3

            while [ $current_attempt -le $max_local_attempts ]; do
              echo "Attempt $current_attempt of $max_local_attempts to pull $image"
              if docker pull "$image"; then
                return 0
              fi
              current_attempt=$((current_attempt + 1))
              sleep $((current_attempt * 5))
            done
            return 1
          }

          # Try to pull postgres image with fallbacks
          postgres_image="postgres:15.3-alpine"
          fallback_images=("postgres:14-alpine" "postgres:13-alpine" "postgres:12-alpine")

          if ! try_pull_image "$postgres_image"; then
            echo "Primary postgres image failed. Trying fallback images..."
            for fallback_image in "${fallback_images[@]}"; do
              if try_pull_image "$fallback_image"; then
                echo "Successfully pulled fallback image $fallback_image"
                # Update docker-compose.yml with the successful fallback image
                sed -i "s|postgres:15.3-alpine|$fallback_image|g" docker-compose.yml
                postgres_image="$fallback_image"
                break
              fi
            done
          fi

          # Try to pull node image for frontend
          node_image="node:18-alpine"
          if ! try_pull_image "$node_image"; then
            echo "Failed to pull node image. Trying fallback images..."
            fallback_node_images=("node:16-alpine" "node:14-alpine")
            for fallback_image in "${fallback_node_images[@]}"; do
              if try_pull_image "$fallback_image"; then
                echo "Successfully pulled fallback node image $fallback_image"
                # Update Dockerfile.dev with the successful fallback image if it exists
                if [ -f "ui/react_frontend/Dockerfile.dev" ]; then
                  sed -i "s|FROM node:18-alpine|FROM $fallback_image|g" ui/react_frontend/Dockerfile.dev
                fi
                break
              fi
            done
          fi

          # Verify we have a postgres image
          if ! docker image inspect "$postgres_image" >/dev/null 2>&1; then
            echo "Failed to pull any postgres image. Exiting."
            exit 1
          fi

          echo "Successfully pulled all required images"

      # Build and start services with Docker Compose
      - name: Build and start services
        run: |
          # Try both docker compose and docker-compose commands for compatibility
          echo "Building and starting services with Docker Compose..."
          
          # First try with docker compose plugin
          if command -v docker compose >/dev/null 2>&1; then
            echo "Using docker compose plugin..."
            docker compose up --build -d || {
              echo "Failed with docker compose plugin, trying standalone docker-compose..."
              docker-compose up --build -d
            }
          else
            echo "Using standalone docker-compose..."
            docker-compose up --build -d
          fi
          
          # Check if services started
          echo "Checking if services started..."
          docker ps
          
          # Show logs for debugging
          echo "Docker Compose logs:"
          docker compose logs || docker-compose logs

      # Check database health
      - name: Check database health
        run: |
          echo "Checking database health..."
          max_attempts=20
          for i in $(seq 1 $max_attempts); do
            echo "Attempt $i of $max_attempts to check database health"
            
            # Check if database container is running
            if docker ps | grep -q paissive-postgres; then
              echo "Database container is running"
              
              # Try to connect to the database
              if docker exec paissive-postgres pg_isready -U myuser -d mydb; then
                echo "Database is ready and accepting connections"
                exit 0
              else
                echo "Database container is running but not accepting connections yet"
              fi
            else
              echo "Database container is not running yet"
            fi
            
            # Wait before next attempt
            sleep_time=$((5 + i / 2))
            echo "Waiting $sleep_time seconds before next attempt..."
            sleep $sleep_time
          done
          
          echo "Database did not become ready in time after $max_attempts attempts."
          docker ps
          docker logs paissive-postgres
          exit 1

      # Debugging logs (always run)
      - name: Debugging logs
        if: always()
        run: |
          echo "Collecting comprehensive debugging information..."

          echo "===== SYSTEM INFORMATION ====="
          echo "Disk space:"
          df -h
          echo "Memory usage:"
          free -m
          echo "Running processes (top 10 by memory):"
          ps aux --sort=-%mem | head -n 10

          echo "===== DOCKER INFORMATION ====="
          echo "Docker version:"
          docker version || true
          echo "Docker Compose version:"
          docker compose version || docker-compose --version || true
          echo "Docker system info:"
          docker info || true
          echo "Docker disk usage:"
          docker system df -v || true
          echo "Docker service status:"
          docker ps || true
          echo "Docker images:"
          docker images || true

          echo "===== LOGS ====="
          echo "Database logs:"
          docker logs paissive-postgres || true
          echo "App logs:"
          docker logs paissive-income-app || true
          echo "Frontend logs:"
          docker logs paissive-frontend || true
