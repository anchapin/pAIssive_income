name: Resource Monitor

on:
  schedule:
    - cron: '*/30 * * * *'  # Every 30 minutes
  workflow_dispatch:

jobs:
  monitor-resources:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      issues: write
      metadata: read
      pull-requests: read

    steps:
      - name: Check running workflows
        id: check-workflows
        uses: actions/github-script@v7
        with:
          script: |
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              status: 'in_progress',
              per_page: 100
            });

            const runningWorkflows = runs.workflow_runs.length;
            const workflowNames = runs.workflow_runs.map(run => run.name);

            console.log(`Currently running workflows: ${runningWorkflows}`);
            console.log(`Workflow names: ${workflowNames.join(', ')}`);

            core.setOutput('running_count', runningWorkflows);
            core.setOutput('workflow_names', workflowNames.join(', '));

            // Alert if too many concurrent workflows
            if (runningWorkflows > 5) {
              core.setOutput('alert', 'true');
              core.setOutput('alert_message', `High number of concurrent workflows detected: ${runningWorkflows}`);
            } else {
              core.setOutput('alert', 'false');
            }

      - name: Create alert issue if needed
        id: create-alert
        if: steps.check-workflows.outputs.alert == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const runningCount = '${{ steps.check-workflows.outputs.running_count }}';
            const workflowNames = '${{ steps.check-workflows.outputs.workflow_names }}';

            const title = `⚠️ High Concurrent Workflow Usage Alert`;
            const body = `
            ## Resource Usage Alert

            **Current running workflows:** ${runningCount}
            **Workflow names:** ${workflowNames}
            **Time:** ${new Date().toISOString()}

            ### Potential Issues

            High numbers of concurrent workflows can lead to:
            - Memory exhaustion ("Killed" errors)
            - Slower execution times
            - Resource contention

            ### Recommended Actions

            1. **Review concurrent workflow strategy**
            2. **Consider adding concurrency controls** to limit parallel runs
            3. **Check for stuck or long-running workflows**
            4. **Monitor for memory-related failures**

            ### Concurrency Control Example

            Add this to workflow files to limit concurrent runs:
            \`\`\`yaml
            concurrency:
              group: \${{ github.workflow }}-\${{ github.ref }}
              cancel-in-progress: true
            \`\`\`

            ---
            *This alert was automatically generated by the Resource Monitor*
            `;

            try {
              // Check if there's already a recent alert
              const existingIssues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                labels: 'resource-alert',
                per_page: 10
              });

              const recentAlert = existingIssues.data.find(issue =>
                issue.title.includes('High Concurrent Workflow Usage') &&
                issue.created_at > new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString() // 2 hours
              );

              if (!recentAlert) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: body,
                  labels: ['resource-alert', 'ci/cd', 'performance']
                });
                console.log('Created resource usage alert');
                core.setOutput('alert_created', 'true');
              } else {
                console.log('Recent resource alert already exists, skipping creation');
                core.setOutput('alert_created', 'false');
              }
            } catch (error) {
              console.log('Failed to create issue due to permissions. Using workflow summary instead.');
              console.log('Error:', error.message);

              // Add to workflow summary as fallback
              await core.summary
                .addHeading('⚠️ Resource Usage Alert')
                .addRaw(`**Current running workflows:** ${runningCount}`)
                .addBreak()
                .addRaw(`**Workflow names:** ${workflowNames}`)
                .addBreak()
                .addRaw(`**Time:** ${new Date().toISOString()}`)
                .addHeading('Potential Issues', 3)
                .addList([
                  'Memory exhaustion ("Killed" errors)',
                  'Slower execution times',
                  'Resource contention'
                ])
                .addHeading('Recommended Actions', 3)
                .addList([
                  'Review concurrent workflow strategy',
                  'Consider adding concurrency controls to limit parallel runs',
                  'Check for stuck or long-running workflows',
                  'Monitor for memory-related failures'
                ])
                .write();

              core.setOutput('alert_created', 'summary');
            }

      - name: Log resource status
        run: |
          echo "Resource monitoring completed at $(date)"
          echo "Running workflows: ${{ steps.check-workflows.outputs.running_count }}"
          echo "Alert status: ${{ steps.check-workflows.outputs.alert }}"
          if [ "${{ steps.check-workflows.outputs.alert }}" = "true" ]; then
            echo "Alert method: ${{ steps.create-alert.outputs.alert_created || 'none' }}"
          fi
