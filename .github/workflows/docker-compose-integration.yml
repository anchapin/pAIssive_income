name: Docker Compose Integration

on:
  pull_request:
    branches: [main, master]

jobs:
  docker-compose-integration:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Create Docker network explicitly before starting services
      - name: Create Docker network
        run: |
          echo "Creating Docker network paissive-network..."
          docker network inspect paissive-network >/dev/null 2>&1 || docker network create paissive-network

      # Set up Docker Compose explicitly
      - name: Set up Docker Compose
        uses: hoverkraft-tech/compose-action@v2.2.0
        with:
          compose-file: "./docker-compose.yml"
          up-flags: "--detach"

      # Install curl for health checks
      - name: Install curl
        run: |
          sudo apt-get update
          sudo apt-get install -y curl

      - name: Check Docker services status
        run: |
          echo "Checking Docker services status..."
          docker compose ps || docker-compose ps

      - name: Check database health
        run: |
          echo "Checking database health..."
          for i in {1..15}; do
            if docker compose exec db pg_isready -U myuser -d mydb || docker-compose exec db pg_isready -U myuser -d mydb; then
              echo "Database is ready."
              break
            else
              echo "Waiting for database to be ready... (attempt $i/15)"
              sleep 10
            fi
            if [ $i -eq 15 ]; then
              echo "Database did not become ready in time."
              docker compose logs db || docker-compose logs db
            fi
          done

      - name: Wait for Flask app to be healthy
        run: |
          echo "Waiting for Flask app to be healthy..."
          for i in {1..30}; do
            if curl -f http://localhost:5000/health; then
              echo "Flask app is healthy."
              exit 0
            else
              echo "Waiting for Flask app... (attempt $i/30)"
              sleep 5
            fi
          done
          echo "Flask app did not become healthy in time."
          docker compose logs || docker-compose logs
          exit 1

      - name: Debugging logs (if failure)
        if: failure()
        run: |
          echo "Collecting debugging information..."
          docker compose ps || docker-compose ps
          docker compose logs db || docker-compose logs db
          docker compose logs app || docker-compose logs app
          echo "Checking network connectivity..."
          docker network ls
          docker network inspect paissive-network || true

      # The Docker Compose action will automatically tear down services in its post-run step
