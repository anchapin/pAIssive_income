name: Docker Compose Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  integration-test:
    runs-on: ubuntu-latest

    steps:
      - name: Initial disk space check
        run: |
          echo "Initial disk space:"
          df -h
          echo "Memory usage:"
          free -m

      - name: Clean up runner workspace
        run: |
          echo "Cleaning up runner workspace..."
          rm -rf /tmp/* || true
          sudo apt-get clean
          echo "Disk space after workspace cleanup:"
          df -h

      - name: Clean up Docker system
        run: |
          echo "Cleaning up unused Docker images, containers, and volumes..."
          docker system prune -a -f --volumes
          echo "Disk space after Docker cleanup:"
          df -h

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Buildx as default builder
        run: docker buildx install

      # Create Docker network explicitly before starting services
      - name: Create Docker network
        run: |
          echo "Creating Docker network paissive-network..."
          docker network inspect paissive-network >/dev/null 2>&1 || docker network create paissive-network

      # Check if Docker Hub secrets are set
      - name: Check Docker Hub secrets
        id: check-secrets
        run: |
          if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ] || [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "::warning::DOCKERHUB_USERNAME and/or DOCKERHUB_TOKEN secrets are not set. Docker Hub login will be skipped, which may lead to rate limiting."
            echo "dockerhub_secrets_set=false" >> $GITHUB_OUTPUT
          else
            echo "dockerhub_secrets_set=true" >> $GITHUB_OUTPUT
          fi

      # Log in to Docker Hub to avoid rate limits
      # This step will only run if DOCKERHUB_USERNAME and DOCKERHUB_TOKEN secrets are set
      # Set these secrets in your repository settings to avoid Docker Hub rate limits
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        if: steps.check-secrets.outputs.dockerhub_secrets_set == 'true'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Check disk space before pulling images
      - name: Check disk space before pulling images
        run: |
          echo "Disk space before pulling images:"
          df -h

      # Pull Docker images with enhanced retry logic and exponential backoff
      - name: Pull Docker images
        run: |
          echo "Pulling Docker images with enhanced retry logic and exponential backoff..."
          max_attempts=7  # Increased from 5 to 7 for more retries
          attempt=1

          # Function to check if we have enough disk space and clean up if needed
          check_disk_space() {
            available_space=$(df -m / | awk 'NR==2 {print $4}')
            echo "Available disk space: $available_space MB"

            if [ "$available_space" -lt 1000 ]; then
              echo "WARNING: Low disk space detected ($available_space MB). Performing cleanup..."
              docker system prune -a -f --volumes
              rm -rf /tmp/* || true
              sudo apt-get clean

              # Check if we freed up enough space
              available_space=$(df -m / | awk 'NR==2 {print $4}')
              echo "Available disk space after cleanup: $available_space MB"

              if [ "$available_space" -lt 500 ]; then
                echo "CRITICAL: Still low on disk space after cleanup. Removing additional files..."
                sudo rm -rf /var/lib/apt/lists/* || true
                sudo rm -rf /usr/share/dotnet || true
                sudo rm -rf /usr/local/lib/android || true
                sudo rm -rf /opt/ghc || true

                available_space=$(df -m / | awk 'NR==2 {print $4}')
                echo "Available disk space after aggressive cleanup: $available_space MB"
              fi
            fi

            # Return success if we have at least 500MB
            if [ "$available_space" -ge 500 ]; then
              return 0
            else
              return 1
            fi
          }

          # Try to pull the main image with exponential backoff
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts to pull postgres:15.3-alpine"

            # Check and ensure we have enough disk space
            check_disk_space

            # Calculate backoff time (exponential with jitter)
            backoff_time=$((5 * 2 ** (attempt - 1) + RANDOM % 5))
            echo "Using backoff time of $backoff_time seconds if this attempt fails"

            # Try to pull with a timeout to handle network issues
            if timeout 300s docker pull postgres:15.3-alpine; then
              echo "Successfully pulled postgres:15.3-alpine"
              break
            else
              echo "Failed to pull postgres:15.3-alpine on attempt $attempt"

              # Check if we're out of disk space
              check_disk_space

              # Try alternative registry mirrors if we're at later attempts
              if [ $attempt -ge 3 ] && [ $attempt -lt $max_attempts ]; then
                echo "Trying alternative registry for postgres:15.3-alpine..."
                if timeout 300s docker pull mcr.microsoft.com/mirror/docker/library/postgres:15.3-alpine 2>/dev/null; then
                  echo "Successfully pulled postgres:15.3-alpine from Microsoft mirror"
                  docker tag mcr.microsoft.com/mirror/docker/library/postgres:15.3-alpine postgres:15.3-alpine
                  break
                fi
              fi

              # If this is the last attempt, try fallback images
              if [ $attempt -eq $max_attempts ]; then
                echo "All attempts to pull postgres:15.3-alpine failed"
                echo "Trying fallback images in order of preference..."

                # Try multiple fallback images in order of preference
                for fallback_image in "postgres:14-alpine" "postgres:13-alpine" "postgres:alpine"; do
                  echo "Trying fallback image: $fallback_image"
                  if timeout 180s docker pull $fallback_image; then
                    echo "Successfully pulled $fallback_image as fallback"
                    # Update docker-compose.yml to use the fallback image
                    sed -i "s|postgres:15.3-alpine|$fallback_image|g" docker-compose.yml
                    echo "Updated docker-compose.yml to use $fallback_image"

                    # Verify the change was made
                    echo "Verifying docker-compose.yml update:"
                    grep -A 2 "image: postgres" docker-compose.yml

                    # Successfully pulled a fallback image
                    break 2  # Break out of both loops
                  fi
                done

                # If we get here, all fallback images failed too
                echo "CRITICAL: All fallback images failed to pull. Checking system status:"
                df -h
                docker info
                curl -v https://registry-1.docker.io/v2/ || true
                echo "Failed to pull any PostgreSQL image. Exiting."
                exit 1
              fi

              echo "Retrying in $backoff_time seconds..."
              sleep $backoff_time
              attempt=$((attempt+1))
            fi
          done

          # Final disk space check after pulling images
          echo "Disk space after pulling images:"
          df -h

      # Check disk space before starting Docker Compose
      - name: Check disk space before Docker Compose
        run: |
          echo "Disk space before starting Docker Compose:"
          df -h

          # Ensure we have enough disk space for Docker Compose
          available_space=$(df -m / | awk 'NR==2 {print $4}')
          echo "Available disk space: $available_space MB"

          # We need at least 1GB of free space for Docker Compose to work reliably
          if [ "$available_space" -lt 1000 ]; then
            echo "WARNING: Low disk space before starting Docker Compose. Performing cleanup..."

            # First level cleanup
            docker system prune -a -f --volumes
            rm -rf /tmp/* || true
            sudo apt-get clean

            # Check if we freed up enough space
            available_space=$(df -m / | awk 'NR==2 {print $4}')
            echo "Available disk space after initial cleanup: $available_space MB"

            # If still low, perform more aggressive cleanup
            if [ "$available_space" -lt 800 ]; then
              echo "CRITICAL: Still low on disk space. Performing aggressive cleanup..."

              # Remove unused packages
              sudo apt-get autoremove -y || true

              # Remove additional large directories that might be present on GitHub runners
              sudo rm -rf /usr/local/share/boost || true
              sudo rm -rf /usr/local/lib/android || true
              sudo rm -rf /usr/share/dotnet || true
              sudo rm -rf /opt/ghc || true
              sudo rm -rf /usr/local/.ghcup || true

              # Remove Docker images not needed for this workflow
              docker images | grep -v 'postgres' | awk '{if(NR>1)print $3}' | xargs -r docker rmi -f || true

              # Final disk space check
              available_space=$(df -m / | awk 'NR==2 {print $4}')
              echo "Available disk space after aggressive cleanup: $available_space MB"

              # If we still don't have enough space, warn but continue
              if [ "$available_space" -lt 500 ]; then
                echo "WARNING: Still low on disk space after all cleanup attempts. This may cause issues."
                echo "Continuing anyway, but expect potential failures."
              fi
            fi
          fi

          echo "Disk space after all cleanup operations:"
          df -h

      # Verify Docker Compose installation and version
      - name: Verify Docker Compose installation
        run: |
          echo "Checking Docker Compose installation..."
          docker compose version || docker-compose --version

          # Validate docker-compose.yml file
          echo "Validating docker-compose.yml file..."
          docker compose config || docker-compose config

          # Check for any syntax errors in the file
          echo "Checking for syntax errors in docker-compose.yml..."
          if ! docker compose config >/dev/null 2>&1 && ! docker-compose config >/dev/null 2>&1; then
            echo "ERROR: docker-compose.yml has syntax errors. Displaying file content:"
            cat docker-compose.yml
            exit 1
          fi

      # Set up Docker Compose with fallback mechanism
      - name: Set up Docker Compose
        id: compose-setup
        continue-on-error: true
        uses: hoverkraft-tech/compose-action@v2.2.0
        with:
          compose-file: "./docker-compose.yml"
          up-flags: "--detach"

      # Fallback if the action fails
      - name: Docker Compose fallback
        if: steps.compose-setup.outcome == 'failure'
        run: |
          echo "Docker Compose action failed. Trying manual Docker Compose setup..."

          # Check if docker-compose.yml exists and is valid
          echo "Checking if docker-compose.yml exists and is valid..."
          if [ ! -f "docker-compose.yml" ]; then
            echo "ERROR: docker-compose.yml file not found!"
            ls -la
            exit 1
          fi

          # Validate docker-compose.yml
          echo "Validating docker-compose.yml..."
          docker compose config || docker-compose config || {
            echo "ERROR: Invalid docker-compose.yml file. Displaying content:"
            cat docker-compose.yml
            exit 1
          }

          # Try to start services manually with more detailed error handling
          echo "Starting services manually with docker compose..."
          if ! docker compose up -d; then
            if ! docker-compose up -d; then
              echo "ERROR: Failed to start services with docker compose. Trying with build flag..."
              if ! docker compose up -d --build; then
                if ! docker-compose up -d --build; then
                  echo "ERROR: All attempts to start Docker Compose services failed."
                  echo "Checking Docker system status:"
                  docker info
                  echo "Checking docker-compose.yml content:"
                  cat docker-compose.yml
                  echo "Checking Docker images:"
                  docker images
                  echo "Checking Docker containers:"
                  docker ps -a
                  exit 0  # Continue the workflow despite the error
                fi
              fi
            fi
          fi

          # Final check
          echo "Final service status check:"
          docker compose ps || docker-compose ps

      # Check disk space after Docker Compose startup
      - name: Check disk space after Docker Compose startup
        run: |
          echo "Disk space after starting Docker Compose:"
          df -h

      # Install curl for health checks
      - name: Install curl
        run: |
          sudo apt-get update
          sudo apt-get install -y curl

      - name: Check Docker services status
        run: |
          echo "Checking Docker services status..."
          docker compose ps || docker-compose ps
          echo "Docker disk usage:"
          docker system df

      - name: Check database health
        env:
          CI: "true"
          GITHUB_ACTIONS: "true"
        run: |
          echo "Checking database health..."
          max_attempts=20  # Increased from 15 to 20 for more patience
          for i in $(seq 1 $max_attempts); do
            echo "Attempt $i of $max_attempts to check database health"

            # Check disk space during health checks
            if [ $((i % 3)) -eq 0 ]; then  # Check every 3 attempts
              echo "Disk space during database health check (attempt $i):"
              df -h

              # If disk space is critically low, perform emergency cleanup
              available_space=$(df -m / | awk 'NR==2 {print $4}')
              if [ "$available_space" -lt 500 ]; then
                echo "WARNING: Low disk space during database health check. Performing cleanup..."
                docker system prune -a -f --volumes
                rm -rf /tmp/* || true
                sudo apt-get clean
              fi
            fi

            # Check if Docker is running properly
            if ! docker info >/dev/null 2>&1; then
              echo "ERROR: Docker daemon is not responding. Attempting to restart Docker..."
              sudo systemctl restart docker || true
              sleep 10
              if ! docker info >/dev/null 2>&1; then
                echo "CRITICAL: Docker daemon failed to restart. Cannot continue."
                exit 1
              fi
            fi

            # Check container status first with detailed diagnostics
            echo "Checking database container status..."
            if ! (docker compose ps db | grep -q "Up" || docker-compose ps db | grep -q "Up"); then
              echo "Database container is not running. Checking container logs:"
              docker compose logs db || docker-compose logs db

              echo "Checking container details:"
              docker inspect $(docker ps -aq -f name=paissive-postgres) || true

              # Check if the container exists but is not running
              if docker ps -a | grep -q paissive-postgres; then
                echo "Container exists but is not running. Checking last logs before restart:"
                docker logs paissive-postgres --tail 50 || true

                # Try to restart the database container
                echo "Attempting to restart the database container..."
                docker compose restart db || docker-compose restart db || docker restart paissive-postgres
              else
                echo "Container does not exist. Attempting to recreate it..."
                docker compose up -d db || docker-compose up -d db
              fi

              # If this is the last attempt, give up
              if [ $i -eq $max_attempts ]; then
                echo "Database container failed to start after $max_attempts attempts."
                echo "Final system status:"
                df -h
                docker system df
                docker ps -a
                exit 1
              fi

              # Wait longer between retries as we progress
              sleep_time=$((10 + i))
              echo "Waiting $sleep_time seconds before next attempt..."
              sleep $sleep_time
              continue
            fi

            # Check database readiness with more detailed diagnostics
            echo "Checking if PostgreSQL is accepting connections..."
            if docker compose exec db pg_isready -U myuser -d mydb -h db || docker-compose exec db pg_isready -U myuser -d mydb -h db; then
              echo "Database is ready and accepting connections."

              # Verify we can actually connect and run a simple query
              echo "Verifying database connection with a simple query..."
              if docker compose exec db psql -U myuser -d mydb -c "SELECT 1" || docker-compose exec db psql -U myuser -d mydb -c "SELECT 1"; then
                echo "Database connection verified successfully."
                break
              else
                echo "WARNING: pg_isready succeeded but psql query failed. This may indicate partial readiness."
                if [ $i -eq $max_attempts ]; then
                  echo "Database connection verification failed after $max_attempts attempts."
                  docker compose logs db || docker-compose logs db
                  exit 1
                fi
              fi
            else
              echo "Waiting for database to be ready... (attempt $i/$max_attempts)"

              # On every 5th attempt, check PostgreSQL logs in more detail
              if [ $((i % 5)) -eq 0 ]; then
                echo "Checking PostgreSQL logs in detail (attempt $i):"
                docker compose exec db cat /var/log/postgresql/postgresql-*.log 2>/dev/null || true

                # Check if PostgreSQL process is running inside container
                echo "Checking if PostgreSQL process is running inside container:"
                docker compose exec db ps aux | grep postgres || docker-compose exec db ps aux | grep postgres || true
              fi

              if [ $i -eq $max_attempts ]; then
                echo "Database did not become ready in time after $max_attempts attempts."
                docker compose logs db || docker-compose logs db
                echo "Final system status:"
                df -h
                docker system df
                exit 1
              fi

              # Exponential backoff for sleep time
              sleep_time=$((5 + i / 2))
              echo "Waiting $sleep_time seconds before next attempt..."
              sleep $sleep_time
            fi
          done

          echo "Database health check completed successfully."

      - name: Check disk space before Flask app health check
        run: |
          echo "Disk space before Flask app health check:"
          df -h
          docker system df

      - name: Wait for Flask app to be healthy
        env:
          CI: "true"
          GITHUB_ACTIONS: "true"
        run: |
          echo "Waiting for Flask app to be healthy..."
          max_attempts=60  # Increased from 50 to 60 for more patience

          # Function to check disk space and clean up if needed
          check_disk_space() {
            available_space=$(df -m / | awk 'NR==2 {print $4}')
            echo "Available disk space: $available_space MB"

            if [ "$available_space" -lt 500 ]; then
              echo "WARNING: Low disk space during Flask app health check. Performing cleanup..."
              docker system prune -a -f --volumes
              rm -rf /tmp/* || true
              sudo apt-get clean

              # Check if we freed up enough space
              available_space=$(df -m / | awk 'NR==2 {print $4}')
              echo "Available disk space after cleanup: $available_space MB"
            fi
          }

          # Function to check container status and logs
          check_container_status() {
            echo "Checking container status:"
            docker compose ps app || docker-compose ps app || true

            echo "Checking container details:"
            docker inspect $(docker ps -aq -f name=paissive-income-app) || true

            echo "Checking Flask app logs:"
            docker compose logs --tail=50 app || docker-compose logs --tail=50 app || true

            # Check if the container is actually running
            echo "Checking if Flask app container is running:"
            if docker ps | grep -q paissive-income-app; then
              echo "Container is running. Checking processes inside container:"
              docker compose exec app ps aux || docker-compose exec app ps aux || docker exec paissive-income-app ps aux || true

              # Check if Flask process is running
              echo "Checking for Python/Flask process:"
              docker compose exec app ps aux | grep python || docker-compose exec app ps aux | grep python || docker exec paissive-income-app ps aux | grep python || true

              # Check if port 5000 is listening
              echo "Checking if port 5000 is listening in container:"
              docker compose exec app netstat -tulpn | grep 5000 || docker-compose exec app netstat -tulpn | grep 5000 || docker exec paissive-income-app netstat -tulpn | grep 5000 || true

              # Check logs for common Flask errors
              echo "Checking logs for common Flask errors:"
              docker compose logs app | grep -i "error" | tail -20 || docker-compose logs app | grep -i "error" | tail -20 || true
            else
              echo "Container is not running. Attempting to restart..."
              docker compose restart app || docker-compose restart app || true
            fi
          }

          # Try to reach the health endpoint with increasing timeout
          for i in $(seq 1 $max_attempts); do
            # Check disk space periodically
            if [ $((i % 5)) -eq 0 ]; then
              echo "Disk space check at attempt $i:"
              check_disk_space
            fi

            # Calculate timeout with progressive increase
            timeout=$((10 + i / 5))
            echo "Attempt $i of $max_attempts: Checking Flask app health with $timeout second timeout..."

            # Try different methods to check health
            if curl -v -f -m $timeout http://localhost:5000/health 2>/dev/null; then
              echo "SUCCESS: Flask app is healthy!"
              exit 0
            elif wget -O- -T $timeout http://localhost:5000/health 2>/dev/null; then
              echo "SUCCESS: Flask app is healthy (verified with wget)!"
              exit 0
            else
              echo "Health check failed on attempt $i/$max_attempts"

              # More detailed diagnostics on regular intervals
              if [ $((i % 5)) -eq 0 ] || [ $i -gt $((max_attempts - 5)) ]; then
                check_container_status

                # Try to restart the app container if we're getting close to max attempts
                if [ $i -gt $((max_attempts - 10)) ]; then
                  echo "Getting close to max attempts, trying to restart the app container..."
                  docker compose restart app || docker-compose restart app || true
                  sleep 15  # Give it a bit more time to restart
                fi
              fi

              # Check network connectivity to the port
              echo "Checking network connectivity to port 5000..."
              nc -zv localhost 5000 || true

              # Calculate sleep time with progressive increase but cap at 20 seconds
              sleep_time=$((5 + i / 6))
              if [ $sleep_time -gt 20 ]; then
                sleep_time=20
              fi
              echo "Waiting $sleep_time seconds before next attempt..."
              sleep $sleep_time
            fi
          done

          echo "FAILURE: Flask app did not become healthy after $max_attempts attempts."
          echo "Collecting final diagnostic information..."

          echo "Final container status:"
          docker compose ps || docker-compose ps || docker ps

          echo "Final app logs:"
          docker compose logs --tail=100 app || docker-compose logs --tail=100 app || docker logs paissive-income-app

          echo "Checking Flask app configuration:"
          docker compose exec app cat /app/run_ui.py || docker-compose exec app cat /app/run_ui.py || true

          echo "Checking if Flask process is running in container:"
          docker compose exec app ps aux | grep python || docker-compose exec app ps aux | grep python || docker exec paissive-income-app ps aux | grep python || true

          echo "Checking if port 5000 is listening in container:"
          docker compose exec app netstat -tulpn | grep 5000 || docker-compose exec app netstat -tulpn | grep 5000 || docker exec paissive-income-app netstat -tulpn | grep 5000 || true

          echo "Checking host port bindings:"
          netstat -tulpn | grep 5000 || ss -tulpn | grep 5000 || true

          echo "Final system status:"
          df -h
          docker system df

          # Try one last direct check of the health endpoint with maximum verbosity
          echo "Final attempt with maximum verbosity:"
          curl -v -m 30 http://localhost:5000/health || true

          exit 1

      - name: Debugging logs (always run)
        if: always()
        run: |
          echo "Collecting comprehensive debugging information..."

          echo "===== SYSTEM INFORMATION ====="
          echo "Disk space:"
          df -h
          echo "Memory usage:"
          free -m
          echo "CPU information:"
          lscpu || cat /proc/cpuinfo
          echo "System load:"
          uptime
          echo "Running processes (top 10 by memory):"
          ps aux --sort=-%mem | head -n 10

          echo "===== DOCKER INFORMATION ====="
          echo "Docker version:"
          docker version || true
          echo "Docker Compose version:"
          docker compose version || docker-compose --version || true
          echo "Docker system info:"
          docker info || true
          echo "Docker disk usage:"
          docker system df -v || true
          echo "Docker service status:"
          docker compose ps || docker-compose ps || true
          echo "Docker images:"
          docker images || true
          echo "Docker containers (all):"
          docker ps -a || true

          echo "===== LOGS ====="
          echo "Database logs:"
          docker compose logs db || docker-compose logs db || true
          echo "App logs:"
          docker compose logs app || docker-compose logs app || true
          echo "Docker build logs:"
          docker compose logs --no-color --timestamps app || docker-compose logs --no-color --timestamps app || true

          echo "===== NETWORK INFORMATION ====="
          echo "Network interfaces:"
          ip addr || ifconfig || true
          echo "Network routes:"
          ip route || route -n || true
          echo "Docker networks:"
          docker network ls || true
          echo "Docker network inspection:"
          docker network inspect paissive-network || true

          echo "===== CONTAINER DETAILS ====="
          echo "Docker container inspection (app):"
          docker inspect $(docker ps -q -f name=paissive-income-app) || true
          echo "Docker container health status (app):"
          docker inspect --format='{{json .State.Health}}' $(docker ps -q -f name=paissive-income-app) || true
          echo "Docker container inspection (db):"
          docker inspect $(docker ps -q -f name=paissive-postgres) || true
          echo "Docker container health status (db):"
          docker inspect --format='{{json .State.Health}}' $(docker ps -q -f name=paissive-postgres) || true

          echo "===== FINAL CLEANUP ====="
          echo "Performing final cleanup to free space for artifact uploads..."
          docker system prune -a -f --volumes || true
          rm -rf /tmp/* || true
          sudo apt-get clean || true
          echo "Final disk space:"
          df -h

      # The Docker Compose action will automatically tear down services in its post-run step
