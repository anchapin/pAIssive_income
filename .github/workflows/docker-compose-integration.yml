name: Docker Compose Integration

on:
  pull_request:
    branches: [main, master]
  workflow_dispatch:  # Allow manual triggering

jobs:
  docker-compose-integration:
    runs-on: ubuntu-22.04

    steps:
      - name: Initial disk space check
        run: |
          echo "Initial disk space:"
          df -h
          echo "Memory usage:"
          free -m

      - name: Clean up runner workspace
        run: |
          echo "Cleaning up runner workspace..."
          rm -rf /tmp/* || true
          sudo apt-get clean
          echo "Disk space after workspace cleanup:"
          df -h

      - name: Clean up Docker system
        run: |
          echo "Cleaning up unused Docker images, containers, and volumes..."
          docker system prune -a -f --volumes
          echo "Disk space after Docker cleanup:"
          df -h

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Use Docker's official GitHub Action for Docker Compose setup
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest

      - name: Install Buildx as default builder
        run: docker buildx install

      # Verify Docker Compose installation
      - name: Verify Docker Compose installation
        run: |
          echo "Checking Docker Compose installation..."
          if docker compose version; then
            echo "✅ Docker Compose plugin is available"
          elif docker-compose --version; then
            echo "✅ Standalone Docker Compose is available"
          else
            echo "⚠️ Docker Compose not found. Installing Docker Compose plugin..."
            sudo apt-get update
            sudo apt-get install -y docker-compose-plugin

            if docker compose version; then
              echo "✅ Docker Compose plugin installed successfully"
            else
              echo "⚠️ Failed to install Docker Compose plugin. Installing standalone Docker Compose..."
              COMPOSE_VERSION="v2.20.2"
              sudo curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose

              if docker-compose --version; then
                echo "✅ Standalone Docker Compose installed successfully"
              else
                echo "❌ All Docker Compose installation attempts failed"
                exit 1
              fi
            fi
          fi

      # Check Docker daemon status before network creation
      - name: Verify Docker setup
        run: |
          echo "Checking Docker daemon status..."
          if ! docker info >/dev/null 2>&1; then
            echo "ERROR: Docker daemon is not responding. Attempting to restart..."
            sudo systemctl restart docker || true
            sleep 10
            if ! docker info >/dev/null 2>&1; then
              echo "CRITICAL: Docker daemon failed to restart."
              exit 1
            fi
          fi
          echo "Docker is running."

      # Create Docker network
      - name: Create Docker network
        run: |
          echo "Creating Docker network 'paissive-network'..."
          docker network create paissive-network || echo "Network 'paissive-network' already exists."
          docker network inspect paissive-network

      # Debug Docker networks
      - name: Debug Docker networks
        run: |
          echo "Inspecting all Docker networks..."
          docker network ls
          echo "Inspecting 'paissive-network'..."
          docker network inspect paissive-network || echo "Network 'paissive-network' does not exist."

      # Check if Docker Hub secrets are set
      - name: Check Docker Hub secrets
        id: check-secrets
        run: |
          if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ] || [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "::warning::DOCKERHUB_USERNAME and/or DOCKERHUB_TOKEN secrets are not set. Docker Hub login will be skipped, which may lead to rate limiting."
            echo "dockerhub_secrets_set=false" >> $GITHUB_OUTPUT
          else
            echo "dockerhub_secrets_set=true" >> $GITHUB_OUTPUT
          fi

      # Log in to Docker Hub to avoid rate limits
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        if: steps.check-secrets.outputs.dockerhub_secrets_set == 'true'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install Buildx as default builder
        run: docker buildx install

      # Check Docker daemon status before network creation
      - name: Verify Docker setup
        run: |
          echo "Checking Docker daemon status..."
          if ! docker info >/dev/null 2>&1; then
            echo "ERROR: Docker daemon is not responding. Attempting to restart..."
            sudo systemctl restart docker || true
            sleep 10
            if ! docker info >/dev/null 2>&1; then
              echo "CRITICAL: Docker daemon failed to restart."
              exit 1
            fi
          fi
          echo "Docker is running."

      # Create Docker network with simple approach
      - name: Create Docker network
        run: |
          echo "Creating Docker network 'paissive-network'..."
          docker network create paissive-network || echo "Network 'paissive-network' already exists."
          docker network inspect paissive-network

      # Debug Docker networks
      - name: Debug Docker networks
        run: |
          echo "Inspecting all Docker networks..."
          docker network ls
          echo "Inspecting 'paissive-network'..."
          docker network inspect paissive-network || echo "Network 'paissive-network' does not exist."

# This section is now handled earlier in the workflow

      # Build and start services with Docker Compose
      - name: Build and start services
        run: |
          # Try both docker compose and docker-compose commands for compatibility
          docker compose up --build -d || docker-compose up --build -d

      # Check disk space before pulling images
      - name: Check disk space before pulling images
        run: |
          echo "Disk space before pulling images:"
          df -h

      # Pull Docker images with enhanced retry logic and fallback options
      - name: Pull Docker images
        run: |
          echo "Pulling Docker images with enhanced retry logic and fallback options..."
          max_attempts=5
          attempt=1

          # Function to try pulling an image with retries
          try_pull_image() {
            local image="$1"
            local current_attempt=1
            local max_local_attempts=3

            while [ $current_attempt -le $max_local_attempts ]; do
              echo "Attempt $current_attempt of $max_local_attempts to pull $image"
              if docker pull "$image"; then
                return 0
              fi
              current_attempt=$((current_attempt + 1))
              sleep $((current_attempt * 5))
            done
            return 1
          }

          # Try to pull postgres image with fallbacks
          postgres_image="postgres:15.3-alpine"
          fallback_images=("postgres:14-alpine" "postgres:13-alpine" "postgres:12-alpine")

          if ! try_pull_image "$postgres_image"; then
            echo "Primary postgres image failed. Trying fallback images..."
            for fallback_image in "${fallback_images[@]}"; do
              if try_pull_image "$fallback_image"; then
                echo "Successfully pulled fallback image $fallback_image"
                # Update docker-compose.yml with the successful fallback image
                sed -i "s|postgres:15.3-alpine|$fallback_image|g" docker-compose.yml
                postgres_image="$fallback_image"
                break
              fi
            done
          fi

          # Try to pull node image for frontend
          node_image="node:18-alpine"
          if ! try_pull_image "$node_image"; then
            echo "Failed to pull node image. Trying fallback images..."
            fallback_node_images=("node:16-alpine" "node:14-alpine")
            for fallback_image in "${fallback_node_images[@]}"; do
              if try_pull_image "$fallback_image"; then
                echo "Successfully pulled fallback node image $fallback_image"
                # Update Dockerfile.dev with the successful fallback image
                sed -i "s|FROM node:18-alpine|FROM $fallback_image|g" ui/react_frontend/Dockerfile.dev
                break
              fi
            done
          fi

          # Check if @ag-ui-protocol/ag-ui is available as an optional dependency
          echo "Checking for @ag-ui-protocol/ag-ui package..."
          if grep -q '"@ag-ui-protocol/ag-ui"' ui/react_frontend/package.json; then
            echo "@ag-ui-protocol/ag-ui found in package.json"

            # Ensure it's in optionalDependencies, not dependencies
            if ! grep -q '"optionalDependencies"' ui/react_frontend/package.json; then
              echo "Adding optionalDependencies section to package.json"
              # Create a temporary file with jq to modify the JSON properly
              cat ui/react_frontend/package.json | jq '. + {"optionalDependencies": {"@ag-ui-protocol/ag-ui": "^1.0.0"}}' > ui/react_frontend/package.json.tmp
              mv ui/react_frontend/package.json.tmp ui/react_frontend/package.json
            elif ! grep -q '"@ag-ui-protocol/ag-ui"' ui/react_frontend/package.json | grep -q "optionalDependencies"; then
              echo "Moving @ag-ui-protocol/ag-ui to optionalDependencies"
              # This is a complex operation that would be better with jq, but we'll use a simple approach
              # First, remove it from dependencies if it exists there
              sed -i '/"@ag-ui-protocol\/ag-ui"/d' ui/react_frontend/package.json
              # Then add it to optionalDependencies
              sed -i '/"optionalDependencies": {/a \    "@ag-ui-protocol/ag-ui": "^1.0.0"' ui/react_frontend/package.json
            fi
          else
            echo "@ag-ui-protocol/ag-ui not found in package.json, adding as optional dependency"
            # Add optionalDependencies section if it doesn't exist
            if ! grep -q '"optionalDependencies"' ui/react_frontend/package.json; then
              # Add before the last closing brace
              sed -i '$i\  "optionalDependencies": {\n    "@ag-ui-protocol/ag-ui": "^1.0.0"\n  },' ui/react_frontend/package.json
            else
              # Add to existing optionalDependencies
              sed -i '/"optionalDependencies": {/a \    "@ag-ui-protocol/ag-ui": "^1.0.0",' ui/react_frontend/package.json
            fi
          fi

          # Verify we have a postgres image
          if ! docker image inspect "$postgres_image" >/dev/null 2>&1; then
            echo "Failed to pull any postgres image. Exiting."
            exit 1
          fi

          echo "Successfully pulled all required images"

      # Check disk space before starting Docker Compose
      - name: Check disk space before Docker Compose
        run: |
          echo "Disk space before starting Docker Compose:"
          df -h

          # Ensure we have enough disk space for Docker Compose
          available_space=$(df -m / | awk 'NR==2 {print $4}')
          echo "Available disk space: $available_space MB"

          # We need at least 1GB of free space for Docker Compose to work reliably
          if [ "$available_space" -lt 1000 ]; then
            echo "WARNING: Low disk space before starting Docker Compose. Performing cleanup..."

            # First level cleanup
            docker system prune -a -f --volumes
            rm -rf /tmp/* || true
            sudo apt-get clean

            # Check if we freed up enough space
            available_space=$(df -m / | awk 'NR==2 {print $4}')
            echo "Available disk space after initial cleanup: $available_space MB"

            # If still low, perform more aggressive cleanup
            if [ "$available_space" -lt 800 ]; then
              echo "CRITICAL: Still low on disk space. Performing aggressive cleanup..."

              # Remove unused packages
              sudo apt-get autoremove -y || true

              # Remove additional large directories that might be present on GitHub runners
              sudo rm -rf /usr/local/share/boost || true
              sudo rm -rf /usr/local/lib/android || true
              sudo rm -rf /usr/share/dotnet || true
              sudo rm -rf /opt/ghc || true
              sudo rm -rf /usr/local/.ghcup || true

              # Remove Docker images not needed for this workflow
              docker images | grep -v 'postgres' | awk '{if(NR>1)print $3}' | xargs -r docker rmi -f || true

              # Final disk space check
              available_space=$(df -m / | awk 'NR==2 {print $4}')
              echo "Available disk space after aggressive cleanup: $available_space MB"

              # If we still don't have enough space, warn but continue
              if [ "$available_space" -lt 500 ]; then
                echo "WARNING: Still low on disk space after all cleanup attempts. This may cause issues."
                echo "Continuing anyway, but expect potential failures."
              fi
            fi
          fi

          echo "Disk space after all cleanup operations:"
          df -h

      # Verify Docker Compose installation and version
      - name: Verify Docker Compose installation
        run: |
          echo "Checking Docker Compose installation..."

          # Function to check if a command exists
          command_exists() {
            command -v "$1" >/dev/null 2>&1
          }

          # Check which Docker Compose version is available
          if command_exists "docker compose"; then
            echo "Using Docker Compose plugin:"
            docker compose version
            COMPOSE_CMD="docker compose"
          elif command_exists "docker-compose"; then
            echo "Using standalone Docker Compose:"
            docker-compose --version
            COMPOSE_CMD="docker-compose"
          else
            echo "ERROR: No Docker Compose installation found. Attempting emergency installation..."

            # Try emergency installation of Docker Compose
            COMPOSE_VERSION="v2.20.2"  # Use a specific stable version
            sudo curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose

            if command_exists "docker-compose"; then
              echo "Emergency installation successful:"
              docker-compose --version
              COMPOSE_CMD="docker-compose"
            else
              echo "ERROR: All Docker Compose installation attempts failed."
              exit 1
            fi
          fi

          # Validate docker-compose.yml file
          echo "Validating docker-compose.yml file..."
          $COMPOSE_CMD config || {
            echo "ERROR: docker-compose.yml validation failed. Checking file existence and permissions..."
            ls -la docker-compose.yml

            echo "Checking file content:"
            cat docker-compose.yml

            echo "Checking for common syntax issues..."
            # Check for indentation issues
            sed -i 's/\t/  /g' docker-compose.yml

            # Check for line ending issues
            dos2unix docker-compose.yml 2>/dev/null || true

            # Try validation again after fixes
            if ! $COMPOSE_CMD config; then
              echo "ERROR: docker-compose.yml still has syntax errors after attempted fixes."
              exit 1
            else
              echo "Fixed docker-compose.yml syntax issues."
            fi
          }

          echo "Docker Compose verification completed successfully."

      # Validate docker-compose.yml
      - name: Validate docker-compose.yml
        run: |
          echo "Validating docker-compose.yml configuration..."

          # Function to check if a command exists
          command_exists() {
            command -v "$1" >/dev/null 2>&1
          }

          # Determine which Docker Compose command to use
          if command_exists "docker compose"; then
            COMPOSE_CMD="docker compose"
          elif command_exists "docker-compose"; then
            COMPOSE_CMD="docker-compose"
          else
            echo "ERROR: No Docker Compose installation found."
            exit 1
          fi

          # First, check for syntax errors
          if ! $COMPOSE_CMD config -q 2>/dev/null; then
            echo "ERROR: docker-compose.yml has syntax errors. Displaying file content:"
            cat docker-compose.yml
            echo "Attempting to fix common issues..."

            # Check for indentation issues
            sed -i 's/\t/  /g' docker-compose.yml

            # Check for line ending issues
            dos2unix docker-compose.yml 2>/dev/null || true

            # Try validation again after fixes
            if ! $COMPOSE_CMD config -q 2>/dev/null; then
              echo "ERROR: docker-compose.yml still has syntax errors after attempted fixes."
              exit 1
            else
              echo "Fixed docker-compose.yml syntax issues."
            fi
          fi

          # Validate service configurations
          echo "Validating service configurations..."
          $COMPOSE_CMD config

          # Check for required services
          if ! $COMPOSE_CMD config --services | grep -q "app" || ! $COMPOSE_CMD config --services | grep -q "db"; then
            echo "ERROR: Required services 'app' and 'db' not found in docker-compose.yml"
            exit 1
          fi

          # Check for frontend service
          if ! $COMPOSE_CMD config --services | grep -q "frontend"; then
            echo "ERROR: Required service 'frontend' not found in docker-compose.yml"
            exit 1
          fi

          # Verify ag-ui environment variable is set in frontend service
          echo "Checking for ag-ui environment variable in frontend service..."
          if ! grep -q "REACT_APP_AG_UI_ENABLED" docker-compose.yml; then
            echo "WARNING: REACT_APP_AG_UI_ENABLED environment variable not found in frontend service."
            echo "Adding REACT_APP_AG_UI_ENABLED=true to frontend service environment..."
            sed -i '/CHOKIDAR_USEPOLLING=true/a \      - REACT_APP_AG_UI_ENABLED=true' docker-compose.yml

            # Verify the change was made
            if grep -q "REACT_APP_AG_UI_ENABLED" docker-compose.yml; then
              echo "Successfully added REACT_APP_AG_UI_ENABLED environment variable."
            else
              echo "WARNING: Failed to add REACT_APP_AG_UI_ENABLED environment variable. Trying alternative approach..."
              # Try an alternative approach using awk
              awk '/CHOKIDAR_USEPOLLING=true/ { print; print "      - REACT_APP_AG_UI_ENABLED=true"; next }1' docker-compose.yml > docker-compose.yml.tmp
              mv docker-compose.yml.tmp docker-compose.yml

              # Final verification
              if grep -q "REACT_APP_AG_UI_ENABLED" docker-compose.yml; then
                echo "Successfully added REACT_APP_AG_UI_ENABLED environment variable using alternative approach."
              else
                echo "WARNING: Could not add REACT_APP_AG_UI_ENABLED environment variable. Manual inspection required."
              fi
            fi
          else
            echo "REACT_APP_AG_UI_ENABLED environment variable is already set in frontend service."
          fi

          # Ensure frontend node_modules volume is properly configured
          echo "Checking for frontend-node-modules volume..."
          if ! grep -q "frontend-node-modules:" docker-compose.yml; then
            echo "Adding frontend-node-modules volume to docker-compose.yml..."
            # Add the volume to the volumes section
            sed -i '/volumes:/a \  frontend-node-modules:\n    driver: local' docker-compose.yml

            # Verify the change was made
            if grep -q "frontend-node-modules:" docker-compose.yml; then
              echo "Successfully added frontend-node-modules volume."
            else
              echo "WARNING: Failed to add frontend-node-modules volume. Manual inspection required."
            fi
          else
            echo "frontend-node-modules volume is already defined in docker-compose.yml."
          fi

          # Ensure frontend volumes are properly configured
          echo "Checking frontend volumes configuration..."
          if grep -q "- /app/node_modules" docker-compose.yml; then
            echo "Updating frontend volumes configuration..."
            # Replace anonymous volume with named volume
            sed -i 's|- /app/node_modules|- frontend-node-modules:/app/node_modules|g' docker-compose.yml

            # Add :cached to the source code mount if not present
            sed -i 's|- ./ui/react_frontend:/app$|- ./ui/react_frontend:/app:cached|g' docker-compose.yml

            echo "Frontend volumes configuration updated."
          else
            echo "Frontend volumes appear to be properly configured."
          fi

          # Final validation after all modifications
          echo "Performing final validation of docker-compose.yml..."
          if $COMPOSE_CMD config; then
            echo "docker-compose.yml validation successful"
          else
            echo "ERROR: Final validation of docker-compose.yml failed."
            exit 1
          fi

      # Set up Docker Compose with fallback mechanism
      - name: Set up Docker Compose
        id: compose-setup
        continue-on-error: true
        uses: hoverkraft-tech/compose-action@v2.2.0
        with:
          compose-file: "./docker-compose.yml"
          up-flags: "--detach"

      # Fallback if the action fails
      - name: Docker Compose fallback
        if: steps.compose-setup.outcome == 'failure'
        run: |
          echo "Docker Compose action failed. Trying manual Docker Compose setup..."

          # Function to check if a command exists
          command_exists() {
            command -v "$1" >/dev/null 2>&1
          }

          # Determine which Docker Compose command to use
          if command_exists "docker compose"; then
            COMPOSE_CMD="docker compose"
          elif command_exists "docker-compose"; then
            COMPOSE_CMD="docker-compose"
          else
            echo "ERROR: No Docker Compose installation found. Attempting emergency installation..."

            # Try emergency installation of Docker Compose
            COMPOSE_VERSION="v2.20.2"  # Use a specific stable version
            sudo curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose

            if command_exists "docker-compose"; then
              echo "Emergency installation successful:"
              docker-compose --version
              COMPOSE_CMD="docker-compose"
            else
              echo "ERROR: All Docker Compose installation attempts failed."
              exit 1
            fi
          fi

          # Try to start services manually
          echo "Starting services manually with $COMPOSE_CMD..."
          $COMPOSE_CMD up -d

          # Check if services started
          echo "Checking if services started..."
          if ! $COMPOSE_CMD ps; then
            echo "ERROR: Failed to start services with $COMPOSE_CMD. Trying with build flag..."
            $COMPOSE_CMD up -d --build

            # Check again after build
            if ! $COMPOSE_CMD ps; then
              echo "ERROR: Failed to start services even with build flag. Checking for errors..."
              $COMPOSE_CMD logs
              exit 1
            fi
          fi

          # Final check
          echo "Final service status check:"
          $COMPOSE_CMD ps

      # Check disk space after Docker Compose startup
      - name: Check disk space after Docker Compose startup
        run: |
          echo "Disk space after starting Docker Compose:"
          df -h

      # Install required tools for health checks and JSON manipulation
      - name: Install required tools
        run: |
          echo "Installing required tools..."
          sudo apt-get update
          sudo apt-get install -y curl wget jq dos2unix

      - name: Check Docker services status
        run: |
          echo "Checking Docker services status..."

          # Function to check if a command exists
          command_exists() {
            command -v "$1" >/dev/null 2>&1
          }

          # Determine which Docker Compose command to use
          if command_exists "docker compose"; then
            COMPOSE_CMD="docker compose"
          elif command_exists "docker-compose"; then
            COMPOSE_CMD="docker-compose"
          else
            echo "ERROR: No Docker Compose installation found."
            exit 1
          fi

          $COMPOSE_CMD ps
          echo "Docker disk usage:"
          docker system df

      - name: Check database health
        run: |
          echo "Checking database health..."

          # Function to check if a command exists
          command_exists() {
            command -v "$1" >/dev/null 2>&1
          }

          # Determine which Docker Compose command to use
          if command_exists "docker compose"; then
            COMPOSE_CMD="docker compose"
          elif command_exists "docker-compose"; then
            COMPOSE_CMD="docker-compose"
          else
            echo "ERROR: No Docker Compose installation found."
            exit 1
          fi

          max_attempts=20  # Increased from 15 to 20 for more patience
          for i in $(seq 1 $max_attempts); do
            echo "Attempt $i of $max_attempts to check database health"

            # Check disk space during health checks
            if [ $((i % 3)) -eq 0 ]; then  # Check every 3 attempts
              echo "Disk space during database health check (attempt $i):"
              df -h

              # If disk space is critically low, perform emergency cleanup
              available_space=$(df -m / | awk 'NR==2 {print $4}')
              if [ "$available_space" -lt 500 ]; then
                echo "WARNING: Low disk space during database health check. Performing cleanup..."
                docker system prune -a -f --volumes
                rm -rf /tmp/* || true
                sudo apt-get clean
              fi
            fi

            # Check if Docker is running properly
            if ! docker info >/dev/null 2>&1; then
              echo "ERROR: Docker daemon is not responding. Attempting to restart Docker..."
              sudo systemctl restart docker || true
              sleep 10
              if ! docker info >/dev/null 2>&1; then
                echo "CRITICAL: Docker daemon failed to restart. Cannot continue."
                exit 1
              fi
            fi

            # Check container status first with detailed diagnostics
            echo "Checking database container status..."
            if ! ($COMPOSE_CMD ps db | grep -q "Up"); then
              echo "Database container is not running. Checking container logs:"
              $COMPOSE_CMD logs db

              echo "Checking container details:"
              docker inspect $(docker ps -aq -f name=paissive-postgres) || true

              # Check if the container exists but is not running
              if docker ps -a | grep -q paissive-postgres; then
                echo "Container exists but is not running. Checking last logs before restart:"
                docker logs paissive-postgres --tail 50 || true

                # Try to restart the database container
                echo "Attempting to restart the database container..."
                $COMPOSE_CMD restart db || docker restart paissive-postgres
              else
                echo "Container does not exist. Attempting to recreate it..."
                $COMPOSE_CMD up -d db
              fi

              # If this is the last attempt, give up
              if [ $i -eq $max_attempts ]; then
                echo "Database container failed to start after $max_attempts attempts."
                echo "Final system status:"
                df -h
                docker system df
                docker ps -a
                exit 1
              fi

              # Wait longer between retries as we progress
              sleep_time=$((10 + i))
              echo "Waiting $sleep_time seconds before next attempt..."
              sleep $sleep_time
              continue
            fi

            # Check database readiness with more detailed diagnostics
            echo "Checking if PostgreSQL is accepting connections..."
            if $COMPOSE_CMD exec db pg_isready -U myuser -d mydb -h db; then
              echo "Database is ready and accepting connections."

              # Verify we can actually connect and run a simple query
              echo "Verifying database connection with a simple query..."
              if $COMPOSE_CMD exec db psql -U myuser -d mydb -c "SELECT 1"; then
                echo "Database connection verified successfully."
                break
              else
                echo "WARNING: pg_isready succeeded but psql query failed. This may indicate partial readiness."
                if [ $i -eq $max_attempts ]; then
                  echo "Database connection verification failed after $max_attempts attempts."
                  $COMPOSE_CMD logs db
                  exit 1
                fi
              fi
            else
              echo "Waiting for database to be ready... (attempt $i/$max_attempts)"

              # On every 5th attempt, check PostgreSQL logs in more detail
              if [ $((i % 5)) -eq 0 ]; then
                echo "Checking PostgreSQL logs in detail (attempt $i):"
                $COMPOSE_CMD exec db cat /var/log/postgresql/postgresql-*.log 2>/dev/null || true

                # Check if PostgreSQL process is running inside container
                echo "Checking if PostgreSQL process is running inside container:"
                $COMPOSE_CMD exec db ps aux | grep postgres || true
              fi

              if [ $i -eq $max_attempts ]; then
                echo "Database did not become ready in time after $max_attempts attempts."
                $COMPOSE_CMD logs db
                echo "Final system status:"
                df -h
                docker system df
                exit 1
              fi

              # Exponential backoff for sleep time
              sleep_time=$((5 + i / 2))
              echo "Waiting $sleep_time seconds before next attempt..."
              sleep $sleep_time
            fi
          done

          echo "Database health check completed successfully."

      - name: Check disk space before Flask app health check
        run: |
          echo "Disk space before Flask app health check:"
          df -h
          docker system df

      - name: Wait for Flask app to be healthy
        run: |
          echo "Waiting for Flask app to be healthy..."

          # Function to check if a command exists
          command_exists() {
            command -v "$1" >/dev/null 2>&1
          }

          # Determine which Docker Compose command to use
          if command_exists "docker compose"; then
            COMPOSE_CMD="docker compose"
          elif command_exists "docker-compose"; then
            COMPOSE_CMD="docker-compose"
          else
            echo "ERROR: No Docker Compose installation found."
            exit 1
          fi

          max_attempts=60  # Increased from 50 to 60 for more patience

          # Function to check disk space and clean up if needed
          check_disk_space() {
            available_space=$(df -m / | awk 'NR==2 {print $4}')
            echo "Available disk space: $available_space MB"

            if [ "$available_space" -lt 500 ]; then
              echo "WARNING: Low disk space during Flask app health check. Performing cleanup..."
              docker system prune -a -f --volumes
              rm -rf /tmp/* || true
              sudo apt-get clean

              # Check if we freed up enough space
              available_space=$(df -m / | awk 'NR==2 {print $4}')
              echo "Available disk space after cleanup: $available_space MB"
            fi
          }

          # Function to check container status and logs
          check_container_status() {
            echo "Checking container status:"
            $COMPOSE_CMD ps app || true

            echo "Checking container details:"
            docker inspect $(docker ps -aq -f name=paissive-income-app) || true

            echo "Checking Flask app logs:"
            $COMPOSE_CMD logs --tail=50 app || true

            # Check if the container is actually running
            echo "Checking if Flask app container is running:"
            if docker ps | grep -q paissive-income-app; then
              echo "Container is running. Checking processes inside container:"
              $COMPOSE_CMD exec app ps aux || docker exec paissive-income-app ps aux || true

              # Check if Flask process is running
              echo "Checking for Python/Flask process:"
              $COMPOSE_CMD exec app ps aux | grep python || docker exec paissive-income-app ps aux | grep python || true

              # Check if port 5000 is listening
              echo "Checking if port 5000 is listening in container:"
              $COMPOSE_CMD exec app netstat -tulpn | grep 5000 || docker exec paissive-income-app netstat -tulpn | grep 5000 || true

              # Check logs for common Flask errors
              echo "Checking logs for common Flask errors:"
              $COMPOSE_CMD logs app | grep -i "error" | tail -20 || true
            else
              echo "Container is not running. Attempting to restart..."
              $COMPOSE_CMD restart app || true
            fi
          }

          # Function to check frontend container status
          check_frontend_status() {
            echo "Checking frontend container status:"
            $COMPOSE_CMD ps frontend || true

            echo "Checking frontend container details:"
            docker inspect $(docker ps -aq -f name=paissive-frontend) || true

            echo "Checking frontend logs:"
            $COMPOSE_CMD logs --tail=50 frontend || true

            # Check if the container is actually running
            echo "Checking if frontend container is running:"
            if docker ps | grep -q paissive-frontend; then
              echo "Frontend container is running. Checking processes inside container:"
              $COMPOSE_CMD exec frontend ps aux || docker exec paissive-frontend ps aux || true

              # Check if Node process is running
              echo "Checking for Node process:"
              $COMPOSE_CMD exec frontend ps aux | grep node || docker exec paissive-frontend ps aux | grep node || true

              # Check if port 3000 is listening
              echo "Checking if port 3000 is listening in container:"
              $COMPOSE_CMD exec frontend netstat -tulpn | grep 3000 || docker exec paissive-frontend netstat -tulpn | grep 3000 || true
            else
              echo "Frontend container is not running. Attempting to restart..."
              $COMPOSE_CMD restart frontend || true
            fi
          }

          # Try to reach the health endpoint with increasing timeout
          for i in $(seq 1 $max_attempts); do
            # Check disk space periodically
            if [ $((i % 5)) -eq 0 ]; then
              echo "Disk space check at attempt $i:"
              check_disk_space
            fi

            # Calculate timeout with progressive increase
            timeout=$((10 + i / 5))
            echo "Attempt $i of $max_attempts: Checking Flask app health with $timeout second timeout..."

            # Try different methods to check health
            if curl -v -f -m $timeout http://localhost:5000/health 2>/dev/null; then
              echo "SUCCESS: Flask app is healthy!"

              # Now check frontend health
              echo "Checking frontend health..."
              if curl -v -f -m $timeout http://localhost:3000 2>/dev/null; then
                echo "SUCCESS: Frontend is also healthy!"
                exit 0
              else
                echo "WARNING: Flask app is healthy but frontend is not responding."
                check_frontend_status

                # If we're getting close to max attempts, try to restart the frontend
                if [ $i -gt $((max_attempts - 15)) ]; then
                  echo "Getting close to max attempts, trying to restart the frontend container..."
                  docker compose restart frontend || docker-compose restart frontend || true
                  sleep 15  # Give it a bit more time to restart
                fi
              fi
            elif wget -O- -T $timeout http://localhost:5000/health 2>/dev/null; then
              echo "SUCCESS: Flask app is healthy (verified with wget)!"

              # Now check frontend health
              echo "Checking frontend health..."
              if wget -O- -T $timeout http://localhost:3000 2>/dev/null; then
                echo "SUCCESS: Frontend is also healthy (verified with wget)!"
                exit 0
              else
                echo "WARNING: Flask app is healthy but frontend is not responding."
                check_frontend_status
              fi
            else
              echo "Health check failed on attempt $i/$max_attempts"

              # More detailed diagnostics on regular intervals
              if [ $((i % 5)) -eq 0 ] || [ $i -gt $((max_attempts - 5)) ]; then
                check_container_status
                check_frontend_status

                # Try to restart the containers if we're getting close to max attempts
                if [ $i -gt $((max_attempts - 10)) ]; then
                  echo "Getting close to max attempts, trying to restart the containers..."
                  $COMPOSE_CMD restart app frontend || true
                  sleep 15  # Give it a bit more time to restart
                fi
              fi

              # Check network connectivity to the ports
              echo "Checking network connectivity to port 5000..."
              nc -zv localhost 5000 || true
              echo "Checking network connectivity to port 3000..."
              nc -zv localhost 3000 || true

              # Calculate sleep time with progressive increase but cap at 20 seconds
              sleep_time=$((5 + i / 6))
              if [ $sleep_time -gt 20 ]; then
                sleep_time=20
              fi
              echo "Waiting $sleep_time seconds before next attempt..."
              sleep $sleep_time
            fi
          done

          echo "FAILURE: Services did not become healthy after $max_attempts attempts."
          echo "Collecting final diagnostic information..."

          echo "Final container status:"
          $COMPOSE_CMD ps || docker ps

          echo "Final app logs:"
          $COMPOSE_CMD logs --tail=100 app || docker logs paissive-income-app

          echo "Final frontend logs:"
          $COMPOSE_CMD logs --tail=100 frontend || docker logs paissive-frontend

          echo "Checking Flask app configuration:"
          $COMPOSE_CMD exec app cat /app/run_ui.py || true

          echo "Checking if Flask process is running in container:"
          $COMPOSE_CMD exec app ps aux | grep python || docker exec paissive-income-app ps aux | grep python || true

          echo "Checking if port 5000 is listening in container:"
          $COMPOSE_CMD exec app netstat -tulpn | grep 5000 || docker exec paissive-income-app netstat -tulpn | grep 5000 || true

          echo "Checking if Node process is running in frontend container:"
          $COMPOSE_CMD exec frontend ps aux | grep node || docker exec paissive-frontend ps aux | grep node || true

          echo "Checking if port 3000 is listening in frontend container:"
          $COMPOSE_CMD exec frontend netstat -tulpn | grep 3000 || docker exec paissive-frontend netstat -tulpn | grep 3000 || true

          echo "Checking host port bindings:"
          netstat -tulpn | grep -E '5000|3000' || ss -tulpn | grep -E '5000|3000' || true

          echo "Final system status:"
          df -h
          docker system df

          # Try one last direct check of the health endpoints with maximum verbosity
          echo "Final attempt with maximum verbosity for Flask app:"
          curl -v -m 30 http://localhost:5000/health || true
          echo "Final attempt with maximum verbosity for frontend:"
          curl -v -m 30 http://localhost:3000 || true

          exit 1

      - name: Debugging logs (always run)
        if: always()
        run: |
          echo "Collecting comprehensive debugging information..."

          echo "===== SYSTEM INFORMATION ====="
          echo "Disk space:"
          df -h
          echo "Memory usage:"
          free -m
          echo "CPU information:"
          lscpu || cat /proc/cpuinfo
          echo "System load:"
          uptime
          echo "Running processes (top 10 by memory):"
          ps aux --sort=-%mem | head -n 10

          echo "===== DOCKER INFORMATION ====="
          echo "Docker version:"
          docker version || true
          # Function to check if a command exists
          command_exists() {
            command -v "$1" >/dev/null 2>&1
          }

          # Determine which Docker Compose command to use
          if command_exists "docker compose"; then
            COMPOSE_CMD="docker compose"
          elif command_exists "docker-compose"; then
            COMPOSE_CMD="docker-compose"
          else
            echo "WARNING: No Docker Compose installation found."
            COMPOSE_CMD=""
          fi

          echo "Docker Compose version:"
          if [ -n "$COMPOSE_CMD" ]; then
            $COMPOSE_CMD version
          else
            echo "Docker Compose not available"
          fi

          echo "Docker system info:"
          docker info || true
          echo "Docker disk usage:"
          docker system df -v || true
          echo "Docker service status:"
          if [ -n "$COMPOSE_CMD" ]; then
            $COMPOSE_CMD ps || true
          else
            docker ps || true
          fi
          echo "Docker images:"
          docker images || true
          echo "Docker containers (all):"
          docker ps -a || true

          echo "===== LOGS ====="
          if [ -n "$COMPOSE_CMD" ]; then
            echo "Database logs:"
            $COMPOSE_CMD logs db || true
            echo "App logs:"
            $COMPOSE_CMD logs app || true
            echo "Frontend logs:"
            $COMPOSE_CMD logs frontend || true
            echo "Docker build logs (app):"
            $COMPOSE_CMD logs --no-color --timestamps app || true
            echo "Docker build logs (frontend):"
            $COMPOSE_CMD logs --no-color --timestamps frontend || true
          else
            echo "Docker Compose not available for logs. Using docker logs instead."
            echo "Database logs:"
            docker logs paissive-postgres || true
            echo "App logs:"
            docker logs paissive-income-app || true
            echo "Frontend logs:"
            docker logs paissive-frontend || true
          fi

          echo "===== NETWORK INFORMATION ====="
          echo "Network interfaces:"
          ip addr || ifconfig || true
          echo "Network routes:"
          ip route || route -n || true
          echo "Docker networks:"
          docker network ls || true
          echo "Docker network inspection:"
          docker network inspect paissive-network || true

          echo "===== CONTAINER DETAILS ====="
          # Check if app container exists
          if docker ps -q -f name=paissive-income-app >/dev/null 2>&1; then
            echo "Docker container inspection (app):"
            docker inspect $(docker ps -q -f name=paissive-income-app)
            echo "Docker container health status (app):"
            docker inspect --format='{{json .State.Health}}' $(docker ps -q -f name=paissive-income-app)
          else
            echo "App container not found"
          fi

          # Check if db container exists
          if docker ps -q -f name=paissive-postgres >/dev/null 2>&1; then
            echo "Docker container inspection (db):"
            docker inspect $(docker ps -q -f name=paissive-postgres)
            echo "Docker container health status (db):"
            docker inspect --format='{{json .State.Health}}' $(docker ps -q -f name=paissive-postgres)
          else
            echo "DB container not found"
          fi

          # Check if frontend container exists
          if docker ps -q -f name=paissive-frontend >/dev/null 2>&1; then
            echo "Docker container inspection (frontend):"
            docker inspect $(docker ps -q -f name=paissive-frontend)
            echo "Docker container health status (frontend):"
            docker inspect --format='{{json .State.Health}}' $(docker ps -q -f name=paissive-frontend)
          else
            echo "Frontend container not found"
          fi

          echo "===== FINAL CLEANUP ====="
          echo "Performing final cleanup to free space for artifact uploads..."
          docker system prune -a -f --volumes || true
          rm -rf /tmp/* || true
          sudo apt-get clean || true
          echo "Final disk space:"
          df -h

      # The Docker Compose action will automatically tear down services in its post-run step
