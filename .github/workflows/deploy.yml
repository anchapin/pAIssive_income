name: Deploy Application

on:
  push:
    branches: [ main, master, develop ]
    tags:
      - 'v*.*.*'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: yourorganization/paissive-income
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=yourorganization/paissive-income:buildcache
          cache-to: type=registry,ref=yourorganization/paissive-income:buildcache,mode=max

  deploy:
    name: Deploy to Environment
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Set Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
      
      - name: Set environment based on branch or tag
        id: set-env
        run: |
          if [[ $GITHUB_REF == refs/heads/main || $GITHUB_REF == refs/heads/master ]]; then
            echo "env=production" >> $GITHUB_OUTPUT
            echo "ENV=production" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == refs/heads/develop ]]; then
            echo "env=staging" >> $GITHUB_OUTPUT
            echo "ENV=staging" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "env=production" >> $GITHUB_OUTPUT
            echo "ENV=production" >> $GITHUB_ENV
          else
            echo "env=development" >> $GITHUB_OUTPUT
            echo "ENV=development" >> $GITHUB_ENV
          fi
      
      - name: Setup environment-specific config
        run: |
          # Create the configmap from the appropriate environment file
          kubectl create configmap env-config --from-env-file=.github/environments/${{ env.ENV }}.env -o yaml --dry-run=client > kubernetes/generated-configmap.yaml
          
          # Load secrets from GitHub secrets to environment variables
          if [[ "${{ env.ENV }}" == "production" || "${{ env.ENV }}" == "staging" ]]; then
            echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
            echo "DB_HOST=${{ secrets.DB_HOST_PROD }}" >> $GITHUB_ENV
          else
            echo "DB_USER=${{ secrets.DB_USER_DEV }}" >> $GITHUB_ENV
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD_DEV }}" >> $GITHUB_ENV
            echo "DB_HOST=${{ secrets.DB_HOST_DEV }}" >> $GITHUB_ENV
          fi
          
          # Replace environment variables in the configmap
          envsubst < kubernetes/generated-configmap.yaml > kubernetes/final-configmap.yaml
      
      - name: Deploy to Kubernetes
        run: |
          # Replace image tag in deployment file
          sed -i "s|image: yourorganization/paissive-income:.*|image: yourorganization/paissive-income:${GITHUB_SHA}|" kubernetes/deployment.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f kubernetes/final-configmap.yaml --namespace=$ENV
          kubectl apply -f kubernetes/deployment.yaml --namespace=$ENV
          kubectl apply -f kubernetes/service.yaml --namespace=$ENV
          kubectl apply -f kubernetes/persistent-volume-claims.yaml --namespace=$ENV
          
          # Verify deployment
          kubectl rollout status deployment/paissive-income --namespace=$ENV

      - name: Notify deployment status
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_USERNAME: GitHub Actions
          SLACK_ICON: https://github.com/github.png?size=48
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: Deployment to ${{ steps.set-env.outputs.env }}
          SLACK_MESSAGE: 'Application deployed to ${{ steps.set-env.outputs.env }}: ${{ job.status }}'

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: pip
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements-dev.txt
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run tests
        run: |
          pytest