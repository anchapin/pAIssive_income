name: MCP Adapter Tests

on:
  push:
    branches: [ main, dev, master, develop ]
    paths:
      - 'ai_models/adapters/mcp_adapter.py'
      - 'ai_models/adapters/adapter_factory.py'
      - 'ai_models/adapters/exceptions.py'
      - 'tests/ai_models/adapters/test_mcp_adapter.py'
      - 'tests/ai_models/test_mcp_import.py'
      - 'tests/test_mcp_top_level_import.py'
      - 'tests/ai_models/adapters/conftest.py'
      - 'tests/ai_models/adapters/pytest.ini'
      - 'run_mcp_tests.py'
      - 'install_mcp_sdk.py'
      - 'scripts/run/run_mcp_tests.py'
      - 'scripts/setup/install_mcp_sdk.py'
      - '.github/workflows/mcp-adapter-tests.yml'
  pull_request:
    branches: [ main, dev, master, develop ]
    paths:
      - 'ai_models/adapters/mcp_adapter.py'
      - 'ai_models/adapters/adapter_factory.py'
      - 'ai_models/adapters/exceptions.py'
      - 'tests/ai_models/adapters/test_mcp_adapter.py'
      - 'tests/ai_models/test_mcp_import.py'
      - 'tests/test_mcp_top_level_import.py'
      - 'tests/ai_models/adapters/conftest.py'
      - 'tests/ai_models/adapters/pytest.ini'
      - 'run_mcp_tests.py'
      - 'install_mcp_sdk.py'
      - 'scripts/run/run_mcp_tests.py'
      - 'scripts/setup/install_mcp_sdk.py'
      - '.github/workflows/mcp-adapter-tests.yml'

jobs:
  test-mcp-adapter:
    name: Test MCP Adapter
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies (Unix)
        if: runner.os != 'Windows'
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov pytest-xdist pytest-asyncio

          # Check if requirements.txt exists
          if [ -f "requirements.txt" ] || [ -e "requirements.txt" ]; then
            echo "Installing dependencies from requirements.txt"
            python -m pip install -r requirements.txt || {
              echo "Failed to install dependencies from requirements.txt"
              echo "Installing minimal dependencies for MCP tests"
              python -m pip install pyyaml requests
            }
          else
            echo "requirements.txt not found, installing minimal dependencies for MCP tests"
            python -m pip install pyyaml requests
          fi

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov pytest-xdist pytest-asyncio

          # Set CI environment variables
          $env:CI = "true"
          $env:GITHUB_ACTIONS = "true"

          # Check if requirements.txt exists
          if (Test-Path "requirements.txt") {
            Write-Host "Installing dependencies from requirements.txt"
            try {
              # Install minimal dependencies first to ensure basic functionality
              python -m pip install pyyaml requests

              # Then try to install from requirements.txt
              python -m pip install -r requirements.txt
            } catch {
              Write-Host "Failed to install dependencies from requirements.txt"
              Write-Host "Installing minimal dependencies for MCP tests"
              python -m pip install pyyaml requests
            }
          } else {
            Write-Host "requirements.txt not found, installing minimal dependencies for MCP tests"
            python -m pip install pyyaml requests
          }

      - name: Install MCP SDK (Unix)
        if: runner.os != 'Windows'
        run: |
          # Check if the script exists in the root directory
          if [ -f "install_mcp_sdk.py" ]; then
            python install_mcp_sdk.py
          elif [ -f "scripts/setup/install_mcp_sdk.py" ]; then
            python scripts/setup/install_mcp_sdk.py
          else
            echo "MCP SDK installation script not found, creating mock module"
            # Create a minimal mock module
            mkdir -p modelcontextprotocol
            echo 'class Client:
                def __init__(self, endpoint, **kwargs):
                    self.endpoint = endpoint
                    self.kwargs = kwargs
                def connect(self): pass
                def disconnect(self): pass
                def send_message(self, message): return f"Mock response to: {message}"
            ' > modelcontextprotocol/__init__.py
            pip install -e .
          fi

      - name: Install MCP SDK (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Check if the script exists in the root directory
          if (Test-Path "install_mcp_sdk.py") {
            python install_mcp_sdk.py
          } elseif (Test-Path "scripts/setup/install_mcp_sdk.py") {
            python scripts/setup/install_mcp_sdk.py
          } else {
            Write-Host "MCP SDK installation script not found, creating mock module"
            # Create a minimal mock module directly
            New-Item -Path "modelcontextprotocol" -ItemType Directory -Force

            # Create a simple Python one-liner to create the module file
            python -c "with open('modelcontextprotocol/__init__.py', 'w') as f: f.write('class Client:\\n    def __init__(self, endpoint, **kwargs):\\n        self.endpoint = endpoint\\n        self.kwargs = kwargs\\n    def connect(self):\\n        pass\\n    def disconnect(self):\\n        pass\\n    def send_message(self, message):\\n        return f\"Mock response to: {message}\"\\n')"

            # Install the module
            pip install -e .
          }

      - name: Run MCP adapter tests (Unix)
        if: runner.os != 'Windows'
        run: |
          # Check if the script exists in the root directory
          if [ -f "run_mcp_tests.py" ]; then
            python run_mcp_tests.py
          elif [ -f "scripts/run/run_mcp_tests.py" ]; then
            python scripts/run/run_mcp_tests.py
          else
            echo "MCP tests script not found, running tests directly"
            python -m pytest -v tests/ai_models/adapters/test_mcp_adapter.py tests/ai_models/test_mcp_import.py tests/test_mcp_top_level_import.py --no-header --no-summary -k "not test_mcp_server" --confcutdir=tests/ai_models/adapters --noconftest
          fi

      - name: Run MCP adapter tests (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Check if the script exists in the root directory
          if (Test-Path "run_mcp_tests.py") {
            python run_mcp_tests.py
          } elseif (Test-Path "scripts/run/run_mcp_tests.py") {
            python scripts/run/run_mcp_tests.py
          } else {
            Write-Host "MCP tests script not found, running tests directly"
            python -m pytest -v tests/ai_models/adapters/test_mcp_adapter.py tests/ai_models/test_mcp_import.py tests/test_mcp_top_level_import.py --no-header --no-summary -k "not test_mcp_server" --confcutdir=tests/ai_models/adapters --noconftest
          }

      - name: Run MCP adapter tests with coverage
        run: |
          python -m pytest -v --cov=ai_models.adapters.mcp_adapter --cov=ai_models.adapters.exceptions --cov-report=xml --cov-report=term --cov-fail-under=15 tests/ai_models/adapters/test_mcp_adapter.py tests/ai_models/test_mcp_import.py tests/test_mcp_top_level_import.py --no-header --no-summary -k "not test_mcp_server" --confcutdir=tests/ai_models/adapters --noconftest

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: mcp-adapter
          name: codecov-mcp-adapter
