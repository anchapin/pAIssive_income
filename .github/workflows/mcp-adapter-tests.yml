name: MCP Adapter Tests
true:
  push:
    branches:
    - main
    - dev
    - master
    - develop
    paths:
    - ai_models/adapters/mcp_adapter.py
    - ai_models/adapters/adapter_factory.py
    - ai_models/adapters/exceptions.py
    - tests/ai_models/adapters/test_mcp_adapter.py
    - tests/ai_models/test_mcp_import.py
    - tests/test_mcp_top_level_import.py
    - tests/ai_models/adapters/conftest.py
    - tests/ai_models/adapters/pytest.ini
    - run_mcp_tests.py
    - install_mcp_sdk.py
    - scripts/run/run_mcp_tests.py
    - scripts/setup/install_mcp_sdk.py
    - .github/workflows/mcp-adapter-tests.yml
  pull_request:
    branches:
    - main
    - dev
    - master
    - develop
    paths:
    - ai_models/adapters/mcp_adapter.py
    - ai_models/adapters/adapter_factory.py
    - ai_models/adapters/exceptions.py
    - tests/ai_models/adapters/test_mcp_adapter.py
    - tests/ai_models/test_mcp_import.py
    - tests/test_mcp_top_level_import.py
    - tests/ai_models/adapters/conftest.py
    - tests/ai_models/adapters/pytest.ini
    - run_mcp_tests.py
    - install_mcp_sdk.py
    - scripts/run/run_mcp_tests.py
    - scripts/setup/install_mcp_sdk.py
    - .github/workflows/mcp-adapter-tests.yml
jobs:
  test-mcp-adapter:
    name: Test MCP Adapter
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
        - ubuntu-latest
        - macos-latest
      fail-fast: false
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: '~/.cache/pip

          ~/.cache/uv

          .pytest_cache'
        key: ${{ runner.os }}-deps-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: ${{ runner.os }}-deps-
    - name: Install dependencies (Unix)
      if: runner.os != 'Windows'
      run: "python -m pip install --upgrade pip\npython -m pip install pytest --ignore=tests/test_mcp_import.py\
        \ --ignore=tests/test_mcp_top_level_import.py pytest --ignore=tests/test_mcp_import.py\
        \ --ignore=tests/test_mcp_top_level_import.py-cov pytest --ignore=tests/test_mcp_import.py\
        \ --ignore=tests/test_mcp_top_level_import.py-xdist pytest --ignore=tests/test_mcp_import.py\
        \ --ignore=tests/test_mcp_top_level_import.py-asyncio\n\n# Check if requirements.txt\
        \ exists\nif [ -f \"requirements.txt\" ] || [ -e \"requirements.txt\" ]; then\n\
        \  echo \"Installing dependencies from requirements.txt\"\n  python -m pip\
        \ install -r requirements.txt || {\n    echo \"Failed to install dependencies\
        \ from requirements.txt\"\n    echo \"Installing minimal dependencies for\
        \ MCP tests\"\n    python -m pip install pyyaml requests\n  }\nelse\n  echo\
        \ \"requirements.txt not found,\n  installing minimal dependencies for MCP\
        \ tests\"\n  python -m pip install pyyaml requests\nfi\n"
    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: "python -m pip install --upgrade pip\npython -m pip install pytest --ignore=tests/test_mcp_import.py\
        \ --ignore=tests/test_mcp_top_level_import.py pytest --ignore=tests/test_mcp_import.py\
        \ --ignore=tests/test_mcp_top_level_import.py-cov pytest --ignore=tests/test_mcp_import.py\
        \ --ignore=tests/test_mcp_top_level_import.py-xdist pytest --ignore=tests/test_mcp_import.py\
        \ --ignore=tests/test_mcp_top_level_import.py-asyncio\n\n# Set CI environment\
        \ variables\n$env:CI = \"true\"\n$env:GITHUB_ACTIONS = \"true\"\n\n# Check\
        \ if requirements.txt exists\nif (Test-Path \"requirements.txt\") {\n  Write-Host\
        \ \"Installing dependencies from requirements.txt\"\n  try {\n    # Install\
        \ minimal dependencies first to ensure basic functionality\n    python -m\
        \ pip install pyyaml requests\n\n    # Then try to install from requirements.txt\n\
        \    python -m pip install -r requirements.txt || echo \"Some requirements\
        \ failed, continuing...\"\n  } catch {\n    Write-Host \"Failed to install\
        \ dependencies from requirements.txt\"\n    Write-Host \"Installing minimal\
        \ dependencies for MCP tests\"\n    python -m pip install pyyaml requests\n\
        \  }\n} else {\n  Write-Host \"requirements.txt not found,\n  installing minimal\
        \ dependencies for MCP tests\"\n  python -m pip install pyyaml requests\n\
        }\n"
    - name: Install MCP SDK (Unix)
      if: runner.os != 'Windows'
      run: "python -m pip install --upgrade pip\n# Check if the script exists in the\
        \ root directory\nif [ -f \"install_mcp_sdk.py\" ]; then\n  python install_mcp_sdk.py\
        \ || echo \"MCP SDK installation failed, using mock...\"\nelif [ -f \"scripts/setup/install_mcp_sdk.py\"\
        \ ]; then\n  python scripts/setup/install_mcp_sdk.py\nelse\n  echo \"MCP SDK\
        \ installation script not found, creating mock module\"\n  # Create a minimal\
        \ mock module\n  mkdir -p modelcontextprotocol\n  echo 'class Client:\n  \
        \    def __init__(self, endpoint, **kwargs):\n          self.endpoint = endpoint\n\
        \          self.kwargs = kwargs\n      def connect(self): pass:\n      def\
        \ disconnect(self): pass:\n      def send_message(self, message): return f\"\
        Mock response to: {message}\":\n  ' > modelcontextprotocol/__init__.py\n \
        \ pip install -e .\nfi\n"
    - name: Install MCP SDK (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: "python -m pip install --upgrade pip\n# Check if the script exists in the\
        \ root directory\nif (Test-Path \"install_mcp_sdk.py\") {\n  python install_mcp_sdk.py\
        \ || echo \"MCP SDK installation failed, using mock...\"\n} elseif (Test-Path\
        \ \"scripts/setup/install_mcp_sdk.py\") {\n  python scripts/setup/install_mcp_sdk.py\n\
        } else {\n  Write-Host \"MCP SDK installation script not found, creating mock\
        \ module\"\n  # Create a minimal mock module directly\n  New-Item -Path \"\
        modelcontextprotocol\" -ItemType Directory -Force\n\n  # Create a simple Python\
        \ one-liner to create the module file\n  python -c \"with open('modelcontextprotocol/__init__.py',\n\
        \  'w') as f: f.write('class Client:\\\\n    def __init__(self,\n  endpoint,\n\
        \  **kwargs):\\\\n        self.endpoint = endpoint\\\\n        self.kwargs\
        \ = kwargs\\\\n    def connect(self):\\\\n        pass\\\\n    def disconnect(self):\\\
        \\n        pass\\\\n    def send_message(self,\n  message):\\\\n        return\
        \ f\\\"Mock response to: {message}\\\"\\\\n')\"\n\n  # Install the module\n\
        \  pip install -e .\n}\n"
    - name: Run MCP adapter tests (Unix)
      if: runner.os != 'Windows'
      run: "# Check if the script exists in the root directory\nif [ -f \"run_mcp_tests.py\"\
        \ ]; then\n  python run_mcp_tests.py\nelif [ -f \"scripts/run/run_mcp_tests.py\"\
        \ ]; then\n  python scripts/run/run_mcp_tests.py\nelse\n  echo \"MCP tests\
        \ script not found, running tests directly\"\n  python -m pytest --ignore=tests/test_mcp_import.py\
        \ --ignore=tests/test_mcp_top_level_import.py -v tests/ai_models/adapters/test_mcp_adapter.py\
        \ tests/ai_models/test_mcp_import.py tests/test_mcp_top_level_import.py --no-header\
        \ --no-summary -k \"not test_mcp_server\" --confcutdir=tests/ai_models/adapters\
        \ --noconftest\nfi\n"
    - name: Run MCP adapter tests (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: "# Check if the script exists in the root directory\nif (Test-Path \"run_mcp_tests.py\"\
        ) {\n  python run_mcp_tests.py\n} elseif (Test-Path \"scripts/run/run_mcp_tests.py\"\
        ) {\n  python scripts/run/run_mcp_tests.py\n} else {\n  Write-Host \"MCP tests\
        \ script not found, running tests directly\"\n  python -m pytest --ignore=tests/test_mcp_import.py\
        \ --ignore=tests/test_mcp_top_level_import.py -v tests/ai_models/adapters/test_mcp_adapter.py\
        \ tests/ai_models/test_mcp_import.py tests/test_mcp_top_level_import.py --no-header\
        \ --no-summary -k \"not test_mcp_server\" --confcutdir=tests/ai_models/adapters\
        \ --noconftest\n}\n"
    - name: Run MCP adapter tests with coverage
      run: 'python -m pytest --ignore=tests/test_mcp_import.py --ignore=tests/test_mcp_top_level_import.py
        -v --cov=ai_models.adapters.mcp_adapter --cov=ai_models.adapters.exceptions
        --cov-report=xml --cov-report=term tests/ai_models/adapters/test_mcp_adapter.py
        tests/ai_models/test_mcp_import.py tests/test_mcp_top_level_import.py --no-header
        --no-summary -k "not test_mcp_server" --confcutdir=tests/ai_models/adapters
        --noconftest

        '
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: mcp-adapter
        name: codecov-mcp-adapter
    timeout-minutes: 30
