name: Frontend E2E Tests (CI)

on:
  pull_request:
    paths:
      - "ui/react_frontend/**"
      - ".github/workflows/frontend-e2e-ci.yml"
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to test on'
        required: false
        default: 'ubuntu'
        type: choice
        options:
          - ubuntu
          - windows
          - both

jobs:
  e2e:
    runs-on: ${{ (github.event.inputs.platform == 'both' || github.event.inputs.platform == '') && 'ubuntu-latest' || format('{0}-latest', github.event.inputs.platform) }}

    defaults:
      run:
        working-directory: ui/react_frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Node.js and pnpm directly in this job
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '8'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      # Ensure the playwright-report directory exists
      - name: Ensure playwright-report directory exists
        run: node tests/ensure_report_dir.js

      # Run the CI-friendly tests
      - name: Run tests with CI test runner (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          # Set environment variables
          export REACT_APP_API_BASE_URL=http://localhost:8000/api
          export REACT_APP_AG_UI_ENABLED=true
          
          # Run the CI-friendly tests
          pnpm test:ci

      - name: Run tests with CI test runner (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Set environment variables
          $env:REACT_APP_API_BASE_URL = "http://localhost:8000/api"
          $env:REACT_APP_AG_UI_ENABLED = "true"
          
          # Run the CI-friendly tests
          pnpm test:ci:windows

      # Create a dummy file if the directory is empty to prevent upload issues
      - name: Create and verify playwright-report directory (Linux/macOS)
        if: runner.os != 'Windows' && always()
        shell: bash
        run: |
          # Ensure the directory exists
          mkdir -p playwright-report/
          
          # Create a dummy file if the directory is empty to prevent upload issues
          if [ -z "$(ls -A playwright-report/)" ]; then
            echo "Creating dummy file in empty playwright-report directory"
            echo "Test run completed" > playwright-report/test-summary.txt
          fi
          
          # List directory contents
          ls -la playwright-report/ || echo "playwright-report directory is empty or doesn't exist"

      - name: Create and verify playwright-report directory (Windows)
        if: runner.os == 'Windows' && always()
        shell: pwsh
        run: |
          # Ensure the directory exists
          if (-not (Test-Path "playwright-report")) {
            New-Item -ItemType Directory -Path "playwright-report" -Force
          }
          
          # Create a dummy file if the directory is empty to prevent upload issues
          if (-not (Get-ChildItem -Path "playwright-report" -Force -ErrorAction SilentlyContinue)) {
            Write-Host "Creating dummy file in empty playwright-report directory"
            Set-Content -Path "playwright-report\test-summary.txt" -Value "Test run completed"
          }
          
          # List directory contents
          Get-ChildItem -Path "playwright-report" -Force -ErrorAction SilentlyContinue | Format-Table -AutoSize

      # Upload test report
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ runner.os }}-${{ github.run_id }}
          path: ui/react_frontend/playwright-report/
          if-no-files-found: warn
          retention-days: 30
