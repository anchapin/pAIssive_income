name: List Code Issues

on:
  workflow_dispatch:
    inputs:
      specific_file:
        description: 'Specific file to fix'
        required: false
        type: string
      syntax_only:
        description: 'Fix only syntax errors'
        required: false
        default: false
        type: boolean
      format_only:
        description: 'Fix only formatting issues'
        required: false
        default: false
        type: boolean
      no_black:
        description: 'Skip Black formatter'
        required: false
        default: false
        type: boolean
      no_isort:
        description: 'Skip isort'
        required: false
        default: false
        type: boolean
      no_ruff:
        description: 'Skip Ruff linter'
        required: false
        default: false
        type: boolean
      use_precommit:
        description: 'Use pre-commit for syntax checking'
        required: false
        default: false
        type: boolean
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**.py'
  push:
    branches:
      - main
    paths:
      - '**.py'

jobs:
  list-issues:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch all history to ensure we have proper git history

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 black isort ruff pre-commit
        python -m pip install -r requirements-dev.txt
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: List directory contents
      run: |
        echo "Current directory: $(pwd)"
        ls -la
        echo "Python files available:"
        find . -name "*.py" -type f | grep -v "__pycache__" | head -n 10

    - name: Run pre-commit check
      id: pre-commit
      if: github.event.inputs.use_precommit == 'true' || github.event_name == 'pull_request' || github.event_name == 'push'
      continue-on-error: true
      run: |
        pre-commit run check-ast --all-files

    - name: List Syntax Issues
      id: syntax-check
      continue-on-error: true
      run: |
        echo "## Checking for Syntax Issues" >> $GITHUB_STEP_SUMMARY
        echo "Finding Python files with syntax errors..." >> $GITHUB_STEP_SUMMARY

        syntax_errors=0
        # Use py_compile to find syntax errors
        for file in $(find . -name "*.py" -type f -not -path "*/\.*" -not -path "*/venv/*" -not -path "*/.venv/*"); do
          if ! python -m py_compile "$file" 2>/dev/null; then
            echo "- ❌ $file has syntax errors" >> $GITHUB_STEP_SUMMARY
            python -m py_compile "$file" 2>&1 | sed 's/^/  /' >> $GITHUB_STEP_SUMMARY
            ((syntax_errors++))
          fi
        done

        if [ $syntax_errors -eq 0 ]; then
          echo "- ✅ No syntax errors found!" >> $GITHUB_STEP_SUMMARY
        else
          echo "- Found $syntax_errors files with syntax errors" >> $GITHUB_STEP_SUMMARY
          echo "::warning::$syntax_errors Python files have syntax errors"
        fi

    - name: List Style Issues with Flake8
      id: flake8-check
      continue-on-error: true
      run: |
        echo "## Checking Style with Flake8" >> $GITHUB_STEP_SUMMARY

        # Run flake8 and save output
        flake8 --output-file=flake8_issues.txt || true

        if [ -s flake8_issues.txt ]; then
          issue_count=$(wc -l < flake8_issues.txt)
          echo "- Found $issue_count style issues" >> $GITHUB_STEP_SUMMARY
          echo "::warning::$issue_count style issues found by Flake8"

          # Show top issues in summary
          echo "### Sample Issues:" >> $GITHUB_STEP_SUMMARY
          head -n 20 flake8_issues.txt | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY

          # If more than 20 issues, mention the rest
          if [ "$issue_count" -gt 20 ]; then
            echo "- ... and $(($issue_count - 20)) more issues" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "- ✅ No style issues found!" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Check Formatting with Black
      id: black-check
      if: github.event.inputs.no_black != 'true'
      continue-on-error: true
      run: |
        echo "## Checking Formatting with Black" >> $GITHUB_STEP_SUMMARY
        black --check --diff . > black_issues.txt || true

        if grep -q "would reformat" black_issues.txt; then
          file_count=$(grep -c "would reformat" black_issues.txt)
          echo "- Found $file_count files that need formatting" >> $GITHUB_STEP_SUMMARY
          echo "::warning::$file_count files need formatting according to Black"

          # Show affected files in summary
          grep "would reformat" black_issues.txt | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
        else
          echo "- ✅ All files properly formatted according to Black!" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Check Import Order with isort
      id: isort-check
      if: github.event.inputs.no_isort != 'true'
      continue-on-error: true
      run: |
        echo "## Checking Import Order with isort" >> $GITHUB_STEP_SUMMARY
        isort --check --diff . > isort_issues.txt || true

        if grep -q "ERROR:" isort_issues.txt; then
          file_count=$(grep -c "ERROR:" isort_issues.txt)
          echo "- Found $file_count files with import order issues" >> $GITHUB_STEP_SUMMARY
          echo "::warning::$file_count files have import order issues according to isort"

          # Show affected files in summary
          grep "ERROR:" isort_issues.txt | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
        else
          echo "- ✅ All imports are properly sorted!" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Check with Ruff Linter
      id: ruff-check
      if: github.event.inputs.no_ruff != 'true'
      continue-on-error: true
      run: |
        echo "## Checking with Ruff Linter" >> $GITHUB_STEP_SUMMARY
        ruff check . --output-format=text > ruff_issues.txt || true

        if [ -s ruff_issues.txt ]; then
          issue_count=$(wc -l < ruff_issues.txt)
          echo "- Found $issue_count linting issues with Ruff" >> $GITHUB_STEP_SUMMARY
          echo "::warning::$issue_count linting issues found by Ruff"

          # Show top issues in summary
          echo "### Sample Issues:" >> $GITHUB_STEP_SUMMARY
          head -n 20 ruff_issues.txt | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY

          # If more than 20 issues, mention the rest
          if [ "$issue_count" -gt 20 ]; then
            echo "- ... and $(($issue_count - 20)) more issues" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "- ✅ No issues found by Ruff!" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Generate Issues Summary
      id: summary
      run: |
        echo "## 📊 Code Issues Summary" >> $GITHUB_STEP_SUMMARY

        # Count total issues
        syntax_errors=0
        [ -f flake8_issues.txt ] && flake8_issues=$(wc -l < flake8_issues.txt) || flake8_issues=0
        [ -f black_issues.txt ] && black_issues=$(grep -c "would reformat" black_issues.txt) || black_issues=0
        [ -f isort_issues.txt ] && isort_issues=$(grep -c "ERROR:" isort_issues.txt) || isort_issues=0
        [ -f ruff_issues.txt ] && ruff_issues=$(wc -l < ruff_issues.txt) || ruff_issues=0

        total_issues=$((syntax_errors + flake8_issues + black_issues + isort_issues + ruff_issues))

        if [ "$total_issues" -eq 0 ]; then
          echo "### ✅ No issues found in the codebase!" >> $GITHUB_STEP_SUMMARY
        else
          echo "### Found $total_issues issues that need attention:" >> $GITHUB_STEP_SUMMARY
          echo "- Syntax errors: $syntax_errors" >> $GITHUB_STEP_SUMMARY
          echo "- Style issues (Flake8): $flake8_issues" >> $GITHUB_STEP_SUMMARY
          echo "- Formatting issues (Black): $black_issues" >> $GITHUB_STEP_SUMMARY
          echo "- Import order issues (isort): $isort_issues" >> $GITHUB_STEP_SUMMARY
          echo "- Linting issues (Ruff): $ruff_issues" >> $GITHUB_STEP_SUMMARY

          echo "::warning::Found $total_issues issues that need to be fixed"
        fi
