name: Test Docker Compose AG-UI Fix

on:
  push:
    branches: [ cosine/add/ag-ui-pnpm-zt2ztr ]
    paths:
      - '.github/workflows/docker-compose-integration-fixed-ag-ui.yml'
      - 'scripts/fix-docker-network.sh'
      - 'scripts/fix-docker-compose.sh'
      - 'scripts/run-docker-compose-ci.sh'
      - 'docker-compose.yml'
      - 'docker-compose.ci.yml'
      - 'ui/react_frontend/Dockerfile.dev'
      - 'ui/react_frontend/package.json'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '.github/workflows/docker-compose-integration-fixed-ag-ui.yml'
      - 'scripts/fix-docker-network.sh'
      - 'scripts/fix-docker-compose.sh'
      - 'scripts/run-docker-compose-ci.sh'
      - 'docker-compose.yml'
      - 'docker-compose.ci.yml'
      - 'ui/react_frontend/Dockerfile.dev'
      - 'ui/react_frontend/package.json'
  workflow_dispatch:

jobs:
  test-fix:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Clean up Docker system
        run: |
          echo "Cleaning up Docker system..."
          docker system prune -a -f --volumes
          echo "Disk space after cleanup:"
          df -h

      - name: Make scripts executable
        run: |
          chmod +x scripts/fix-docker-network.sh
          chmod +x scripts/fix-docker-compose.sh
          chmod +x scripts/run-docker-compose-ci.sh
          chmod +x docker-healthcheck.sh
          chmod +x wait-for-db.sh

      - name: Fix Docker network
        run: |
          echo "Running Docker network fix script..."
          ./scripts/fix-docker-network.sh

      - name: Fix Docker Compose
        run: |
          echo "Running Docker Compose fix script..."
          ./scripts/fix-docker-compose.sh

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest

      - name: Create Docker network
        run: |
          echo "Creating Docker network 'paissive-network'..."
          docker network create paissive-network || echo "Network 'paissive-network' already exists."

      - name: Pull Docker images
        run: |
          echo "Pulling Docker images..."
          
          # Pull PostgreSQL image
          echo "Pulling PostgreSQL image..."
          docker pull postgres:15.3-alpine || {
            echo "Failed to pull postgres:15.3-alpine, trying fallback images..."
            for fallback_image in "postgres:14-alpine" "postgres:13-alpine" "postgres:alpine"; do
              echo "Trying fallback image: $fallback_image"
              if docker pull "$fallback_image"; then
                echo "Successfully pulled fallback image: $fallback_image"
                sed -i "s|postgres:15.3-alpine|$fallback_image|g" docker-compose.yml
                break
              fi
            done
          }
          
          # Pull Node.js image for frontend
          echo "Pulling Node.js image..."
          docker pull node:18-alpine || {
            echo "Failed to pull node:18-alpine, trying fallback images..."
            for fallback_image in "node:16-alpine" "node:14-alpine"; do
              echo "Trying fallback image: $fallback_image"
              if docker pull "$fallback_image"; then
                echo "Successfully pulled fallback image: $fallback_image"
                if [ -f "ui/react_frontend/Dockerfile.dev" ]; then
                  sed -i "s|FROM node:18-alpine|FROM $fallback_image|g" ui/react_frontend/Dockerfile.dev
                fi
                break
              fi
            done
          }

      - name: Run Docker Compose CI script
        run: |
          echo "Running Docker Compose CI script..."
          ./scripts/run-docker-compose-ci.sh

      - name: Verify services
        run: |
          echo "Verifying services..."
          
          # Check if all services are running
          docker compose ps || docker-compose ps
          
          # Check if database is ready
          docker exec paissive-postgres pg_isready -U myuser -d mydb || {
            echo "Database is not ready. Checking logs..."
            docker logs paissive-postgres
            exit 1
          }
          
          # Check if frontend is running
          docker exec paissive-frontend wget -q --spider http://localhost:3000 || {
            echo "Frontend is not running. Checking logs..."
            docker logs paissive-frontend
            exit 1
          }

      - name: Debugging logs
        if: always()
        run: |
          echo "Docker Compose logs:"
          docker compose logs || docker-compose logs
          
          echo "Docker container status:"
          docker ps -a
          
          echo "Docker network status:"
          docker network ls
          docker network inspect paissive-network || true
          
          echo "Disk space usage:"
          df -h
          docker system df
