name: CodeQL Analysis (Ubuntu)
true:
  pull_request:
    branches:
    - main
    - dev
    - master
    - develop
    paths-ignore:
    - '**/*.md'
    - '**/*.txt'
    - '**/*.rst'
    - '**/*.png'
    - '**/*.jpg'
    - '**/*.jpeg'
    - '**/*.gif'
    - '**/*.svg'
    - '**/*.ico'
    - .gitignore
    - docs/**
    - LICENSE
    - SECURITY.md
    - CONTRIBUTING.md
    - CODE_OF_CONDUCT.md
  schedule:
  - cron: 0 4 * * 1
  workflow_dispatch: null
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
permissions:
  security-events: write
  actions: read
  contents: read
jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        language:
        - javascript-typescript
        - python
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Setup pnpm
      if: matrix.language == 'javascript-typescript'
      uses: pnpm/action-setup@v4
      with:
        version: 8.15.4
        run_install: false
    - name: Set up Node.js
      if: matrix.language == 'javascript-typescript'
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    - name: Add pnpm to PATH
      if: matrix.language == 'javascript-typescript'
      shell: bash
      run: "# Add both global and local pnpm to PATH\necho \"PATH=$(pnpm -g bin):$(pnpm\
        \ bin):$PATH\" >> $GITHUB_ENV\n# Verify pnpm is in PATH\necho \"Current PATH:\
        \ $PATH\"\nwhich pnpm || {\n  echo \"pnpm not found in PATH. Installing globally\
        \ with npm...\"\n  npm install -g pnpm\n  echo \"PATH=$(npm bin -g):$PATH\"\
        \ >> $GITHUB_ENV\n  which pnpm || { echo \"Error: pnpm is still not in PATH\
        \ after npm install.\"; exit 1; }\n}\n"
    - name: Verify Node.js and pnpm installation
      if: matrix.language == 'javascript-typescript'
      shell: bash
      run: "echo \"Node.js version: $(node --version)\"\necho \"npm version: $(npm\
        \ --version)\"\nif command -v pnpm &>/dev/null; then\n  echo \"pnpm version:\
        \ $(pnpm --version)\"\nelse\n  echo \"pnpm not found, will use npm instead\"\
        \nfi\n"
    - name: Set up Python
      if: matrix.language == 'python'
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: pip
    - name: Check disk space
      shell: bash
      run: df -h
    - name: Verify lock files
      if: matrix.language == 'javascript-typescript'
      shell: bash
      run: "echo \"Verifying lock files exist before CodeQL analysis...\"\nLOCK_FILES=$(find\
        \ . -name \"package-lock.json\" -o -name \"yarn.lock\" -o -name \"pnpm-lock.yaml\"\
        )\n\nif [ -z \"$LOCK_FILES\" ]; then\n  echo \"Warning: No lock files found.\
        \ Creating a minimal package-lock.json in the root directory.\"\n\n  # Create\
        \ a minimal valid package-lock.json with echo\n  echo '{\"name\":\"paissive-income\"\
        ,\n  \"version\":\"1.0.0\",\n  \"lockfileVersion\":3,\n  \"packages\":{\"\"\
        :{\"name\":\"paissive-income\",\n  \"version\":\"1.0.0\"}}}' > package-lock.json\n\
        \n  echo \"Created minimal package-lock.json in the root directory.\"\n\n\
        \  # Verify the file was created\n  if [ -f \"package-lock.json\" ]; then\n\
        \    echo \"Verification: package-lock.json exists and contains:\"\n    cat\
        \ package-lock.json\n\n    # Add to .gitignore if it exists\n    if [ -f \"\
        .gitignore\" ]; then\n      if ! grep -q \"package-lock.json\" .gitignore;\
        \ then\n        echo -e \"\\n# Generated during CodeQL analysis\\npackage-lock.json\"\
        \ >> .gitignore\n        echo \"Added package-lock.json to .gitignore\"\n\
        \      fi\n    fi\n  else\n    echo \"CRITICAL ERROR: Failed to create package-lock.json\"\
        \n    # Try alternative method\n    node -e \"fs.writeFileSync('package-lock.json',\n\
        \    JSON.stringify({name:'paissive-income',\n    version:'1.0.0',\n    lockfileVersion:3,\n\
        \    packages:{'':{'name':'paissive-income',\n    'version':'1.0.0'}}}))\"\
        \ || true\n    if [ -f \"package-lock.json\" ]; then\n      echo \"Successfully\
        \ created package-lock.json using Node.js\"\n    fi\n  fi\nelse\n  echo \"\
        Found lock files:\"\n  echo \"$LOCK_FILES\"\nfi\n"
      continue-on-error: true
    - name: Install Node.js dependencies
      if: matrix.language == 'javascript-typescript'
      shell: bash
      run: "# Function to install dependencies with fallback\ninstall_deps() {\n \
        \ local dir=$1\n  local original_dir=$(pwd)\n\n  if [ -n \"$dir\" ]; then\n\
        \    cd \"$dir\" || return 1\n  fi\n\n  echo \"Installing dependencies in\
        \ $(pwd)...\"\n\n  # Try with pnpm first (preferred)\n  if command -v pnpm\
        \ &>/dev/null; then\n    echo \"Using pnpm to install dependencies...\"\n\
        \    pnpm install || {\n      echo \"pnpm install failed, trying with npm...\"\
        \n      npm install || {\n        echo \"Both pnpm and npm installation failed\
        \ in $(pwd)\"\n        if [ -n \"$dir\" ]; then\n          cd \"$original_dir\"\
        \n        fi\n        return 1\n      }\n    }\n  else\n    # Fallback to\
        \ npm if pnpm is not available\n    echo \"pnpm not found, using npm...\"\n\
        \    npm install || {\n      echo \"npm install failed in $(pwd)\"\n     \
        \ if [ -n \"$dir\" ]; then\n        cd \"$original_dir\"\n      fi\n     \
        \ return 1\n    }\n  fi\n\n  if [ -n \"$dir\" ]; then\n    cd \"$original_dir\"\
        \n  fi\n\n  return 0\n}\n\n# Install dependencies in root directory if package.json\
        \ exists\nif [ -f \"package.json\" ]; then\n  echo \"Found package.json in\
        \ root directory\"\n  install_deps\nfi\n\n# Install dependencies in ui/react_frontend\
        \ if package.json exists\nif [ -f \"ui/react_frontend/package.json\" ]; then\n\
        \  echo \"Found package.json in ui/react_frontend\"\n  install_deps \"ui/react_frontend\"\
        \nfi\n\n# Install dependencies in sdk/javascript if package.json exists\n\
        if [ -f \"sdk/javascript/package.json\" ]; then\n  echo \"Found package.json\
        \ in sdk/javascript\"\n  install_deps \"sdk/javascript\"\nfi\n"
      continue-on-error: true
    - name: Clean up node_modules
      if: matrix.language == 'javascript-typescript'
      shell: bash
      run: 'echo "Cleaning up node_modules to save space..."

        find . -name "node_modules" -type d -prune -exec rm -rf {} \; 2>/dev/null
        || true

        '
      continue-on-error: true
    - name: Ensure CodeQL configuration files
      shell: bash
      run: "if [ -f \".github/scripts/ensure-codeql-configs.sh\" ]; then\n  echo \"\
        Running ensure-codeql-configs.sh script...\"\n  bash .github/scripts/ensure-codeql-configs.sh\n\
        else\n  echo \"ensure-codeql-configs.sh script not found. Creating minimal\
        \ configuration...\"\n\n  # Ensure directory exists\n  mkdir -p .github/codeql\n\
        \n  # Create minimal Ubuntu configuration\n  echo 'name: \"CodeQL Configuration\
        \ for Ubuntu\"' > .github/codeql/security-os-ubuntu.yml\n  echo 'os: ubuntu-latest'\
        \ >> .github/codeql/security-os-ubuntu.yml\n  echo 'queries:' >> .github/codeql/security-os-ubuntu.yml\n\
        \  echo '  - uses: security-and-quality' >> .github/codeql/security-os-ubuntu.yml\n\
        \  echo '  - uses: security-extended' >> .github/codeql/security-os-ubuntu.yml\n\
        \  echo '  - uses: security' >> .github/codeql/security-os-ubuntu.yml\n  echo\
        \ 'disable-default-queries: false' >> .github/codeql/security-os-ubuntu.yml\n\
        \  echo 'trap-for-errors: true' >> .github/codeql/security-os-ubuntu.yml\n\
        \n  # Create minimal unified configuration\n  echo 'name: \"Unified CodeQL\
        \ Configuration\"' > .github/codeql/security-os-config.yml\n  echo 'queries:'\
        \ >> .github/codeql/security-os-config.yml\n  echo '  - uses: security-and-quality'\
        \ >> .github/codeql/security-os-config.yml\n  echo '  - uses: security-extended'\
        \ >> .github/codeql/security-os-config.yml\n  echo '  - uses: security' >>\
        \ .github/codeql/security-os-config.yml\n  echo 'disable-default-queries:\
        \ false' >> .github/codeql/security-os-config.yml\n  echo 'trap-for-errors:\
        \ true' >> .github/codeql/security-os-config.yml\nfi\n"
    - name: Create .codeqlignore file
      shell: bash
      run: 'echo "Creating .codeqlignore file instead of running fix script..."

        cat > .codeqlignore << ''EOL''

        .venv/**

        venv/**

        env/**

        .env/**

        **/virtualenv/**

        **/site-packages/**

        **/dist-packages/**

        **/node_modules/**

        **/dist/**

        **/build/**

        **/vendor/**

        **/external/**

        **/third_party/**

        **/__pycache__/**

        **/.pytest_cache/**

        **/.mypy_cache/**

        **/.ruff_cache/**

        **/*.pyc

        **/*.pyo

        **/*.pyd

        **/test/**

        **/tests/**

        **/__tests__/**

        **/__mocks__/**

        **/*.test.js

        **/*.test.ts

        **/*.test.jsx

        **/*.test.tsx

        **/*.spec.js

        **/*.spec.ts

        **/*.spec.jsx

        **/*.spec.tsx

        **/.github/**

        **/.vscode/**

        **/.idea/**

        **/coverage/**

        **/.git/**

        **/docs/**

        **/*.md

        **/*.mdx

        **/*.rst

        **/sphinx/**

        **/playwright-report/**

        **/generated/**

        **/sarif-results/**

        **/*.sarif

        **/*.sarif.json

        ui/react_frontend/node_modules/**

        sdk/javascript/node_modules/**

        EOL


        # List directories to verify

        echo "Current directories:"

        ls -la

        '
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-and-quality
        config-file: .github/codeql/security-os-ubuntu.yml
        debug: true
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
      continue-on-error: true
    - name: Verify environment before analysis
      shell: bash
      run: "echo \"Verifying environment before CodeQL analysis...\"\n\n# Create sarif-results\
        \ directory if it doesn't exist\nif [ ! -d \"sarif-results\" ]; then\n  echo\
        \ \"Creating sarif-results directory...\"\n  mkdir -p sarif-results\nfi\n\n\
        # JavaScript/TypeScript specific checks\nif [ \"${{ matrix.language }}\" =\
        \ \"javascript-typescript\" ]; then\n  # Final check for package-lock.json\
        \ - create it if it still doesn't exist\n  if [ ! -f \"package-lock.json\"\
        \ ]; then\n    echo \"WARNING: package-lock.json still not found! Creating\
        \ it as a last resort...\"\n    echo '{\"name\":\"paissive-income\",\n   \
        \ \"version\":\"1.0.0\",\n    \"lockfileVersion\":3,\n    \"packages\":{\"\
        \":{\"name\":\"paissive-income\",\n    \"version\":\"1.0.0\"}}}' > package-lock.json\n\
        \    echo \"Created minimal package-lock.json in the root directory.\"\n \
        \ fi\n\n  # Verify package-lock.json\n  if [ -f \"package-lock.json\" ]; then\n\
        \    echo \"package-lock.json exists and contains:\"\n    cat package-lock.json\n\
        \  else\n    echo \"CRITICAL ERROR: package-lock.json still not found after\
        \ multiple attempts!\"\n  fi\nfi\n\n# Python specific checks\nif [ \"${{ matrix.language\
        \ }}\" = \"python\" ]; then\n  echo \"Verifying Python environment...\"\n\
        \  python --version\n  pip --version\nfi\n\necho \"Environment verification\
        \ complete.\"\n"
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: /language:${{ matrix.language }}
        upload: true
        output: sarif-results/${{ matrix.language }}-ubuntu.sarif
      continue-on-error: false
    - name: Upload SARIF results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ matrix.language }}-ubuntu-sarif
        path: sarif-results/${{ matrix.language }}-ubuntu.sarif
        retention-days: 7
        if-no-files-found: warn
'on':
  push:
    branches:
    - main
    - develop
    - master
  pull_request:
    branches:
    - main
    - develop
    - master
  workflow_dispatch: {}
