name: "CodeQL Analysis (Ubuntu)"

# This workflow performs CodeQL analysis for JavaScript/TypeScript and Python on Ubuntu
# It's a specialized version of the main CodeQL workflow for Ubuntu-specific analysis

on:
  push:
    branches: [ main, dev, master, develop ]
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - '**/*.rst'
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.jpeg'
      - '**/*.gif'
      - '**/*.svg'
      - '**/*.ico'
      - '.gitignore'
      - 'docs/**'
      - 'LICENSE'
      - 'SECURITY.md'
      - 'CONTRIBUTING.md'
      - 'CODE_OF_CONDUCT.md'
  pull_request:
    branches: [ main, dev, master, develop ]
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - '**/*.rst'
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.jpeg'
      - '**/*.gif'
      - '**/*.svg'
      - '**/*.ico'
      - '.gitignore'
      - 'docs/**'
      - 'LICENSE'
      - 'SECURITY.md'
      - 'CONTRIBUTING.md'
      - 'CODE_OF_CONDUCT.md'
  schedule:
    - cron: '0 4 * * 1'  # Weekly on Monday at 4 AM UTC (off-peak hours)
  workflow_dispatch:  # Allow manual triggering

# Limit concurrent runs to conserve resources
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  # Required for all workflows
  security-events: write
  # Only needed for workflows in private repositories
  actions: read
  contents: read

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    timeout-minutes: 90  # Increased timeout for larger codebases

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript-typescript', 'python' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full git history for better analysis

      # Set up Node.js for JavaScript/TypeScript analysis
      - name: Set up Node.js
        if: matrix.language == 'javascript-typescript'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Set up Python for Python analysis
      - name: Set up Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      # Display disk space before analysis
      - name: Check disk space
        shell: bash
        run: df -h

      # Verify lock files exist before analysis
      - name: Verify lock files
        if: matrix.language == 'javascript-typescript'
        shell: bash
        run: |
          echo "Verifying lock files exist before CodeQL analysis..."
          LOCK_FILES=$(find . -name "package-lock.json" -o -name "yarn.lock" -o -name "pnpm-lock.yaml")

          if [ -z "$LOCK_FILES" ]; then
            echo "Warning: No lock files found. Creating a minimal package-lock.json in the root directory."
            
            # Create a minimal valid package-lock.json with echo
            echo '{"name":"paissive-income","version":"1.0.0","lockfileVersion":3}' > package-lock.json
            
            echo "Created minimal package-lock.json in the root directory."
            
            # Verify the file was created
            if [ -f "package-lock.json" ]; then
              echo "Verification: package-lock.json exists and contains:"
              cat package-lock.json
            else
              echo "CRITICAL ERROR: Failed to create package-lock.json"
            fi
          else
            echo "Found lock files:"
            echo "$LOCK_FILES"
          fi

      # Initialize CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality
          debug: true

      # Autobuild attempts to build any compiled languages
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      # Perform CodeQL Analysis
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"
          upload: true
          output: sarif-results/${{ matrix.language }}-ubuntu.sarif

      # Upload SARIF results as an artifact
      - name: Upload SARIF results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.language }}-ubuntu-sarif
          path: sarif-results/${{ matrix.language }}-ubuntu.sarif
          retention-days: 7
