name: "CodeQL Windows"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '30 1 * * 0'

jobs:
  analyze:
    name: Analyze
    runs-on: windows-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript-typescript', 'python' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: matrix.language == 'javascript-typescript'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Check disk space
        shell: pwsh
        run: Get-Volume

      # Create a simple package-lock.json if none exists
      - name: Create package-lock.json if needed
        if: matrix.language == 'javascript-typescript'
        shell: pwsh
        run: |
          Write-Host "Checking for lock files before CodeQL analysis..."
          $lockFiles = @(Get-ChildItem -Path . -Recurse -Include "package-lock.json","yarn.lock","pnpm-lock.yaml" -ErrorAction SilentlyContinue)

          if ($lockFiles.Count -gt 0) {
            Write-Host "Found $($lockFiles.Count) lock files:"
            $lockFiles | ForEach-Object {
              Write-Host "  $($_.FullName)"
            }
          } else {
            Write-Host "No lock files found. Creating a minimal package-lock.json..."

            # Create a simple JSON object
            $packageLock = @{
              name = "paissive-income"
              version = "1.0.0"
              lockfileVersion = 3
            }

            # Convert to JSON and write to file
            try {
              $jsonContent = ConvertTo-Json -InputObject $packageLock -Depth 1
              Set-Content -Path "package-lock.json" -Value $jsonContent -Encoding UTF8

              if (Test-Path "package-lock.json") {
                $fileInfo = Get-Item "package-lock.json"
                Write-Host "package-lock.json created successfully ($($fileInfo.Length) bytes)"
                Get-Content -Path "package-lock.json"
              } else {
                throw "Failed to create package-lock.json"
              }
            } catch {
              Write-Host "Error creating package-lock.json: $_"

              # Fallback method - direct string
              try {
                Write-Host "Trying fallback method with direct string..."
                '{"name":"paissive-income","version":"1.0.0","lockfileVersion":3}' | Out-File -FilePath "package-lock.json" -Encoding utf8 -Force

                if (Test-Path "package-lock.json") {
                  Write-Host "Created package-lock.json with fallback method"
                  Get-Content -Path "package-lock.json"
                }
              } catch {
                Write-Host "All methods failed to create package-lock.json: $_"
              }
            }
          }

      # Install dependencies for JavaScript/TypeScript
      - name: Install JS dependencies
        if: matrix.language == 'javascript-typescript'
        shell: pwsh
        run: |
          # Create node_modules directory if it doesn't exist
          if (-not (Test-Path "node_modules")) {
            Write-Host "Creating node_modules directory..."
            New-Item -ItemType Directory -Force -Path "node_modules" | Out-Null
          }

          # Add package-lock.json to .gitignore if it doesn't exist there already
          if (Test-Path ".gitignore") {
            $gitignore = Get-Content -Path ".gitignore" -Raw
            if (-not ($gitignore -match "package-lock\.json")) {
              Write-Host "Adding package-lock.json to .gitignore..."
              Add-Content -Path ".gitignore" -Value "`n# Generated during CodeQL analysis`npackage-lock.json"
            }
          }

      # Install dependencies for Python
      - name: Install Python dependencies
        if: matrix.language == 'python'
        shell: pwsh
        run: |
          python -m pip install --upgrade uv
          uv pip install -r requirements.txt || python -m pip install -r requirements.txt
        continue-on-error: true

      # Display environment information for debugging
      - name: Display environment information
        shell: pwsh
        run: |
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Directory contents:"
          Get-ChildItem -Path . | Format-Table Name, LastWriteTime, Length

          Write-Host "Checking for package-lock.json:"
          if (Test-Path "package-lock.json") {
            $fileInfo = Get-Item "package-lock.json"
            Write-Host "package-lock.json exists: $($fileInfo.Length) bytes"
            Get-Content -Path "package-lock.json" -First 5
          } else {
            Write-Host "package-lock.json not found!"
          }

      # Initialize CodeQL with simplified configuration
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality
          debug: true
          # No custom config file to avoid Windows path issues

      # Verify environment before CodeQL analysis
      - name: Verify environment
        shell: pwsh
        run: |
          Write-Host "Verifying environment before CodeQL analysis..."

          # Final check for package-lock.json - create it if it still doesn't exist
          if (-not (Test-Path "package-lock.json")) {
            Write-Host "WARNING: package-lock.json still not found! Creating it as a last resort..."
            # Use the most reliable method to create a minimal package-lock.json
            try {
              '{"name":"paissive-income","version":"1.0.0","lockfileVersion":3}' | Out-File -FilePath "package-lock.json" -Encoding utf8 -Force
            } catch {
              Write-Host "Error creating package-lock.json: $_"
            }
          }

          # Check for package-lock.json
          if (Test-Path "package-lock.json") {
            $fileInfo = Get-Item "package-lock.json"
            Write-Host "package-lock.json exists: $($fileInfo.Length) bytes"
            Write-Host "Content: $(Get-Content -Path "package-lock.json" -Raw)"
          } else {
            Write-Host "CRITICAL ERROR: package-lock.json still not found after multiple attempts!"
          }

          # Check for node_modules directory
          if (-not (Test-Path "node_modules")) {
            Write-Host "Creating node_modules directory..."
            New-Item -ItemType Directory -Force -Path "node_modules" | Out-Null
          }

          Write-Host "Environment verification complete. Using standard CodeQL queries."

      # Perform CodeQL Analysis
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"
          upload: true
          output: sarif-results/${{ matrix.language }}-windows.sarif

      # Upload SARIF results as an artifact
      - name: Upload SARIF results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.language }}-windows-sarif
          path: sarif-results/${{ matrix.language }}-windows.sarif
          retention-days: 7