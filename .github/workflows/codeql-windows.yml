name: "CodeQL Windows"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '30 1 * * 0'

jobs:
  analyze:
    name: Analyze
    runs-on: windows-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript-typescript', 'python' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: matrix.language == 'javascript-typescript'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Check disk space
        shell: pwsh
        run: Get-Volume

      # Create a simple package-lock.json if none exists
      - name: Create package-lock.json if needed
        if: matrix.language == 'javascript-typescript'
        shell: pwsh
        run: |
          Write-Host "Checking for lock files before CodeQL analysis..."
          $lockFiles = @(Get-ChildItem -Path . -Recurse -Include "package-lock.json","yarn.lock","pnpm-lock.yaml" -ErrorAction SilentlyContinue)

          if ($lockFiles.Count -gt 0) {
            Write-Host "Found $($lockFiles.Count) lock files:"
            $lockFiles | ForEach-Object {
              Write-Host "  $($_.FullName)"
            }
          } else {
            Write-Host "No lock files found. Creating a minimal package-lock.json..."

            # Create a simple JSON object
            $json = [ordered]@{
              name = "paissive-income"
              version = "1.0.0"
              lockfileVersion = 3
              requires = $true
              packages = [ordered]@{
                "" = [ordered]@{
                  name = "paissive-income"
                  version = "1.0.0"
                }
              }
            }

            try {
              # Convert to JSON with proper formatting
              $jsonContent = ConvertTo-Json -InputObject $json -Depth 10
              Set-Content -Path "package-lock.json" -Value $jsonContent -Encoding UTF8

              if (Test-Path "package-lock.json") {
                $fileInfo = Get-Item "package-lock.json"
                Write-Host "package-lock.json created successfully ($($fileInfo.Length) bytes)"
                Get-Content -Path "package-lock.json" -First 10
              } else {
                throw "File was not created properly"
              }
            } catch {
              Write-Host "Error creating package-lock.json: $_"
              Write-Host "Using ultra-simple JSON as fallback..."

              # Ultra simple fallback that's guaranteed to be valid JSON
              $ultraSimple = '{}'
              Set-Content -Path "package-lock.json" -Value $ultraSimple -Encoding UTF8 -ErrorAction SilentlyContinue

              if (Test-Path "package-lock.json") {
                Write-Host "Created minimal package-lock.json with empty object"
              } else {
                Write-Host "WARNING: All attempts to create package-lock.json failed"
              }
            }
          }

      # Install dependencies for JavaScript/TypeScript
      - name: Install JS dependencies
        if: matrix.language == 'javascript-typescript'
        shell: pwsh
        run: |
          # Create node_modules directory if it doesn't exist
          if (-not (Test-Path "node_modules")) {
            Write-Host "Creating node_modules directory..."
            New-Item -ItemType Directory -Force -Path "node_modules" | Out-Null
          }

      # Install dependencies for Python
      - name: Install Python dependencies
        if: matrix.language == 'python'
        shell: pwsh
        run: |
          python -m pip install --upgrade uv
          uv pip install -r requirements.txt || python -m pip install -r requirements.txt
        continue-on-error: true

      # Display environment information for debugging
      - name: Display environment information
        shell: pwsh
        run: |
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Directory contents:"
          Get-ChildItem -Path . | Format-Table Name, LastWriteTime, Length

          Write-Host "CodeQL configuration directory:"
          if (Test-Path ".github/codeql") {
            Get-ChildItem -Path ".github/codeql" | Format-Table Name, LastWriteTime, Length
          } else {
            Write-Host "CodeQL configuration directory not found!"
          }

          Write-Host "CodeQL configuration file:"
          if (Test-Path ".github/codeql/security-os-config.yml") {
            Get-Content -Path ".github/codeql/security-os-config.yml" | Select-Object -First 20
            Write-Host "... (truncated)"
          } else {
            Write-Host "CodeQL configuration file not found!"
          }

      # Initialize CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality
          debug: true
          config-file: .github/codeql/security-os-config.yml

      # Perform CodeQL Analysis
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"
          upload: true
          output: sarif-results/${{ matrix.language }}-windows.sarif

      # Upload SARIF results as an artifact
      - name: Upload SARIF results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.language }}-windows-sarif
          path: sarif-results/${{ matrix.language }}-windows.sarif
          retention-days: 7