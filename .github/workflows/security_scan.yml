name: Security Scan

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sundays at midnight
  workflow_dispatch:

jobs:
  security:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      security-events: write
      contents: read
      actions: read

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Cache Python packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-security-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-security-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install safety bandit pip-audit

        # Create security-reports directory early
        mkdir -p security-reports
        echo "Created security-reports directory"

        # Initialize SARIF files using our utility script
        python sarif_utils.py "[]" "security-reports/bandit-results.sarif" "Bandit" "https://bandit.readthedocs.io/"
        python sarif_utils.py "[]" "security-reports/trivy-results.sarif" "Trivy" "https://github.com/aquasecurity/trivy"

        # Print environment for debugging
        echo "Current PATH: $PATH"
        echo "Python executable: $(which python)"

    - name: Check for vulnerable dependencies with Safety
      id: safety
      timeout-minutes: 10
      continue-on-error: true
      run: |
        echo "Running Safety check..."
        mkdir -p security-reports

        # Create fallback safety results file
        echo "[]" > security-reports/safety-results.json

        # Run safety check with better error handling
        safety check --json > security-reports/safety-results.json.tmp 2>security-reports/safety-error.log || true

        # Check if the output file exists and has content
        if [ -s security-reports/safety-results.json.tmp ]; then
          echo "Safety check completed, processing results..."
          mv security-reports/safety-results.json.tmp security-reports/safety-results.json

          # Count vulnerabilities
          VULN_COUNT=$(grep -c "vulnerability" security-reports/safety-results.json || echo "0")
          if [ "$VULN_COUNT" -gt "0" ]; then
            echo "::warning::Safety scan found $VULN_COUNT potential vulnerabilities"
          else
            echo "No vulnerabilities found by Safety"
          fi

          # Convert Safety JSON to SARIF format
          echo "Converting Safety results to SARIF format..."
          python sarif_utils.py "security-reports/safety-results.json" "security-reports/safety-results.sarif" "Safety" "https://pyup.io/safety/"
        else
          echo "::warning::Safety check failed or produced no output"
          cat security-reports/safety-error.log

          # Create empty SARIF file
          python sarif_utils.py "[]" "security-reports/safety-results.sarif" "Safety" "https://pyup.io/safety/"
        fi

    - name: Run bandit security scan
      id: bandit
      timeout-minutes: 10
      continue-on-error: true
      run: |
        echo "Running Bandit security scan..."
        mkdir -p security-reports

        # Run bandit with JSON output format
        if ! bandit -r . -f json -o security-reports/bandit-results.json; then
          echo "::warning::Bandit scan completed with security issues found"
        fi

        # Convert JSON to SARIF format using our utility script
        echo "Converting Bandit JSON output to SARIF format..."
        python sarif_utils.py "security-reports/bandit-results.json" "security-reports/bandit-results.sarif" "Bandit" "https://bandit.readthedocs.io/"

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      timeout-minutes: 15
      continue-on-error: true
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'security-reports/trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Security Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: security-reports/
        retention-days: 7
        if-no-files-found: warn

    - name: Upload Safety scan results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      continue-on-error: true
      with:
        sarif_file: security-reports/safety-results.sarif
        category: safety

    - name: Upload Bandit scan results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      continue-on-error: true
      with:
        sarif_file: security-reports/bandit-results.sarif
        category: bandit

    - name: Upload Trivy scan results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      continue-on-error: true
      with:
        sarif_file: security-reports/trivy-results.sarif
        category: trivy

    - name: Run dependency review
      if: github.event_name == 'pull_request'
      uses: actions/dependency-review-action@v4
