name: Security Scan

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sundays at midnight
  workflow_dispatch:

jobs:
  security:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      security-events: write
      contents: read
      actions: read

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Cache Python packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-security-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-security-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install safety bandit pip-audit

        # Create security-reports directory early
        mkdir -p security-reports
        echo "Created security-reports directory"

        # Initialize SARIF files using our utility script
        python sarif_utils.py "[]" "security-reports/bandit-results.sarif" "Bandit" "https://bandit.readthedocs.io/"
        python sarif_utils.py "[]" "security-reports/trivy-results.sarif" "Trivy" "https://github.com/aquasecurity/trivy"

        # Print environment for debugging
        echo "Current PATH: $PATH"
        echo "Python executable: $(which python)"

    - name: Check for vulnerable dependencies with Safety
      id: safety
      timeout-minutes: 10
      continue-on-error: true
      run: |
        echo "Running Safety check..."
        mkdir -p security-reports

        # Create fallback safety results file with valid JSON
        echo "[]" > security-reports/safety-results.json

        # Verify safety is installed and working
        if ! command -v safety &> /dev/null; then
          echo "::error::Safety command not found. Reinstalling..."
          python -m pip install --upgrade safety
        fi

        # Run safety check with better error handling
        echo "Running safety check command..."
        if safety check --json > security-reports/safety-results.json.tmp 2>security-reports/safety-error.log; then
          echo "Safety check completed successfully"
        else
          echo "::warning::Safety check exited with non-zero status. This may be normal if vulnerabilities were found."
        fi

        # Check if the output file exists and has content
        if [ -s security-reports/safety-results.json.tmp ]; then
          echo "Safety check produced output, processing results..."

          # Validate JSON format
          if python -c "import json; json.load(open('security-reports/safety-results.json.tmp'))" 2>/dev/null; then
            echo "Safety output is valid JSON"
            mv security-reports/safety-results.json.tmp security-reports/safety-results.json

            # Count vulnerabilities
            VULN_COUNT=$(grep -c "vulnerability" security-reports/safety-results.json || echo "0")
            if [ "$VULN_COUNT" -gt "0" ]; then
              echo "::warning::Safety scan found $VULN_COUNT potential vulnerabilities"
            else
              echo "No vulnerabilities found by Safety"
            fi
          else
            echo "::warning::Safety output is not valid JSON. Using empty results."
            echo "Invalid JSON content:"
            cat security-reports/safety-results.json.tmp
            # Keep the fallback file we created earlier
          fi
        else
          echo "::warning::Safety check produced no output"
          if [ -f security-reports/safety-error.log ]; then
            echo "Safety error log:"
            cat security-reports/safety-error.log
          fi
        fi

        # Convert Safety JSON to SARIF format (our improved script will handle empty or invalid files)
        echo "Converting Safety results to SARIF format..."
        python sarif_utils.py "security-reports/safety-results.json" "security-reports/safety-results.sarif" "Safety" "https://pyup.io/safety/"

    - name: Run bandit security scan
      id: bandit
      timeout-minutes: 10
      continue-on-error: true
      run: |
        echo "Running Bandit security scan..."
        mkdir -p security-reports

        # Create fallback bandit results file with valid JSON
        echo "[]" > security-reports/bandit-results.json

        # Verify bandit is installed and working
        if ! command -v bandit &> /dev/null; then
          echo "::error::Bandit command not found. Reinstalling..."
          python -m pip install --upgrade bandit
        fi

        # Run bandit with JSON output format
        echo "Running bandit scan command..."
        if bandit -r . -f json -o security-reports/bandit-results.json.tmp 2>security-reports/bandit-error.log; then
          echo "Bandit scan completed successfully"
          mv security-reports/bandit-results.json.tmp security-reports/bandit-results.json
        else
          echo "::warning::Bandit scan completed with security issues found"

          # Check if output file exists and has content
          if [ -s security-reports/bandit-results.json.tmp ]; then
            # Validate JSON format
            if python -c "import json; json.load(open('security-reports/bandit-results.json.tmp'))" 2>/dev/null; then
              echo "Bandit output is valid JSON"
              mv security-reports/bandit-results.json.tmp security-reports/bandit-results.json
            else
              echo "::warning::Bandit output is not valid JSON. Using empty results."
              # Keep the fallback file we created earlier
            fi
          else
            echo "::warning::Bandit scan produced no output"
            if [ -f security-reports/bandit-error.log ]; then
              echo "Bandit error log:"
              cat security-reports/bandit-error.log
            fi
          fi
        fi

        # Convert JSON to SARIF format using our utility script
        echo "Converting Bandit JSON output to SARIF format..."
        python sarif_utils.py "security-reports/bandit-results.json" "security-reports/bandit-results.sarif" "Bandit" "https://bandit.readthedocs.io/"

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      timeout-minutes: 15
      continue-on-error: true
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'security-reports/trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Debug Security Reports
      if: always()
      run: |
        echo "Debugging security reports directory..."
        ls -la security-reports/

        # Check if SARIF files exist and have content
        for file in security-reports/*.sarif; do
          if [ -f "$file" ]; then
            echo "File $file exists with size $(stat -c%s "$file") bytes"
            # Validate SARIF format
            if python -c "import json; json.load(open('$file'))" 2>/dev/null; then
              echo "✅ $file is valid JSON"
            else
              echo "❌ $file is not valid JSON"
            fi
          else
            echo "❌ File $file does not exist"
          fi
        done

    - name: Upload Security Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: security-reports/
        retention-days: 7
        if-no-files-found: warn

    - name: Upload Safety scan results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      continue-on-error: true
      with:
        sarif_file: security-reports/safety-results.sarif
        category: safety

    - name: Upload Bandit scan results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      continue-on-error: true
      with:
        sarif_file: security-reports/bandit-results.sarif
        category: bandit

    - name: Upload Trivy scan results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      continue-on-error: true
      with:
        sarif_file: security-reports/trivy-results.sarif
        category: trivy

    - name: Run dependency review
      if: github.event_name == 'pull_request'
      uses: actions/dependency-review-action@v4
