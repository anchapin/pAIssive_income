name: Lint and Test

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort ruff
          pip install -r requirements-dev.txt
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Check for syntax errors
        run: |
          # Define patterns to ignore
          IGNORE_PATTERNS="__pycache__|\.git|\.pytest_cache|\.venv|build|dist"
          export IGNORE_PATTERNS

          # Function to check if a file matches any ignore pattern
          should_ignore() {
            local file="$1"
            if [ -n "$IGNORE_PATTERNS" ]; then
              echo "$file" | grep -qE "$IGNORE_PATTERNS" && return 0
            fi
            return 1
          }

          # Run syntax error checks on all Python files
          echo "Checking for syntax errors in Python files..."
          PYTHON_FILES=$(find . -name "*.py" -type f)
          FILTERED_FILES=""
          while IFS= read -r file; do
            if ! should_ignore "$file"; then
              FILTERED_FILES="$FILTERED_FILES$file"$'\n'
            fi
          done <<< "$PYTHON_FILES"

          if [ -n "$FILTERED_FILES" ]; then
            echo "$FILTERED_FILES" | xargs python fix_test_collection_warnings.py
          else
            echo "No Python files to check after applying ignore patterns."
          fi
        env:
          IGNORE_PATTERNS: ${{ env.IGNORE_PATTERNS }}

      - name: Run linting checks
        run: |
          # Define patterns to ignore
          IGNORE_PATTERNS="__pycache__|\.git|\.pytest_cache|\.venv|build|dist"
          export IGNORE_PATTERNS

          # Function to check if a file matches any ignore pattern
          should_ignore() {
            local file="$1"
            if [ -n "$IGNORE_PATTERNS" ]; then
              echo "$file" | grep -qE "$IGNORE_PATTERNS" && return 0
            fi
            return 1
          }

          # Run linting on changed files in PRs, or all files for pushes to main branches
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # Get list of changed Python files
            CHANGED_FILES=$(git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep '\.py$' || true)
            if [ -n "$CHANGED_FILES" ]; then
              echo "Linting changed Python files:"
              # Filter out ignored files
              FILTERED_FILES=""
              while IFS= read -r file; do
                if ! should_ignore "$file"; then
                  FILTERED_FILES="$FILTERED_FILES$file"$'\n'
                fi
              done <<< "$CHANGED_FILES"

              if [ -n "$FILTERED_FILES" ]; then
                echo "$FILTERED_FILES"
                echo "$FILTERED_FILES" | xargs python run_linting.py
              else
                echo "No Python files to lint after applying ignore patterns."
              fi
            else
              echo "No Python files changed in this PR."
            fi
          else
            # Run on all Python files for pushes to main branches, excluding ignored patterns
            PYTHON_FILES=$(find . -name "*.py" -type f)
            FILTERED_FILES=""
            while IFS= read -r file; do
              if ! should_ignore "$file"; then
                FILTERED_FILES="$FILTERED_FILES$file"$'\n'
              fi
            done <<< "$PYTHON_FILES"

            if [ -n "$FILTERED_FILES" ]; then
              echo "Linting Python files:"
              echo "$FILTERED_FILES"
              echo "$FILTERED_FILES" | xargs python run_linting.py
            else
              echo "No Python files to lint after applying ignore patterns."
            fi
          fi
        env:
          IGNORE_PATTERNS: ${{ env.IGNORE_PATTERNS }}

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -r requirements-dev.txt
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install -e .

      - name: Run tests
        run: |
          mkdir -p junit
          # Define patterns to ignore
          IGNORE_PATTERNS="__pycache__|\.git|\.pytest_cache|\.venv|build|dist"
          export IGNORE_PATTERNS

          # Filter test files using ignore patterns
          if [ -n "$IGNORE_PATTERNS" ]; then
            FILTERED_TESTS=$(find tests/ -name "*.py" -type f | grep -vE "$IGNORE_PATTERNS")
            if [ -n "$FILTERED_TESTS" ]; then
              echo "$FILTERED_TESTS" | xargs pytest -v --import-mode=importlib --cov=. --cov-report=xml --junitxml=junit/test-results.xml
            else
              echo "No test files to run after applying ignore patterns."
              exit 0
            fi
          else
            pytest tests/ -v --import-mode=importlib --cov=. --cov-report=xml --junitxml=junit/test-results.xml
          fi
        env:
          IGNORE_PATTERNS: ${{ env.IGNORE_PATTERNS }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: junit/test-results.xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
