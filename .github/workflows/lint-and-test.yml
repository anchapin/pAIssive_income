name: Lint and Test

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort ruff
          pip install -r requirements-dev.txt
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run linting checks
        run: |
          # Run linting on changed files in PRs, or all files for pushes to main branches
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # Get list of changed Python files
            CHANGED_FILES=$(git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep '\.py$' || true)
            if [ -n "$CHANGED_FILES" ]; then
              echo "Linting changed Python files:"
              echo "$CHANGED_FILES"
              echo "$CHANGED_FILES" | xargs python run_linting.py
            else
              echo "No Python files changed in this PR."
            fi
          else
            # Run on all Python files for pushes to main branches
            python run_linting.py
          fi
  
  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -r requirements-dev.txt
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install -e .
      
      - name: Run tests
        run: |
          mkdir -p junit
          pytest tests/ -v --import-mode=importlib --cov=. --cov-report=xml --junitxml=junit/test-results.xml
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: junit/test-results.xml
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
