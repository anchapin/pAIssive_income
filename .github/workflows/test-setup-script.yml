name: Test Setup Scripts

on:
  push:
    branches:
      - main
      - 'feature/**'
      - 'fix/**'
      - 'cosine/**'
    paths:
      - 'enhanced_setup_dev_environment.py'
      - 'enhanced_setup_dev_environment.sh'
      - 'enhanced_setup_dev_environment.bat'
      - '.github/workflows/test-setup-script.yml'
      - 'requirements-dev.txt'
      - 'package.json'
  pull_request:
    branches:
      - main
    paths:
      - 'enhanced_setup_dev_environment.py'
      - 'enhanced_setup_dev_environment.sh'
      - 'enhanced_setup_dev_environment.bat'
      - '.github/workflows/test-setup-script.yml'
      - 'requirements-dev.txt'
      - 'package.json'
  workflow_dispatch:

jobs:
  test-ubuntu:
    name: Test Setup Script on Ubuntu
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug file paths
        shell: bash
        run: |
          echo "Current working directory: $(pwd)"
          ls -la

      - name: Verify package.json
        shell: bash
        run: |
          if [ ! -f "package.json" ]; then
            echo "Error: package.json not found in the root directory."
            ls -la
            exit 1
          fi
          echo "Contents of package.json:"
          cat package.json

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: false

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install development dependencies
        run: pip install -r requirements-dev.txt

      - name: Install uv
        run: pip install uv

      - name: Verify uv Installation
        run: uv --version

      - name: Install Ruff (Python Linter)
        run: pip install ruff

      - name: Verify Ruff Installation
        run: ruff --version

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: false

      - name: Verify Node.js and pnpm
        shell: bash
        run: |
          node --version
          if [ $? -ne 0 ]; then
            echo "Error: Node.js is not installed or not in PATH."
            exit 1
          fi
          npm --version
          if [ $? -ne 0 ]; then
            echo "Error: npm is not installed or not in PATH."
            exit 1
          fi
          pnpm --version
          if [ $? -ne 0 ]; then
            echo "Error: pnpm is not installed or not in PATH."
            exit 1
          fi

      - name: Install Node.js dependencies (pnpm)
        shell: bash
        run: |
          pnpm install --reporter=default || {
            echo "Failed to install Node.js dependencies with pnpm. Possible issues:";
            echo "- Missing or conflicting dependencies in package.json.";
            echo "- pnpm not set up properly.";
            exit 1;
          }

      - name: Install pre-commit hooks
        shell: bash
        run: |
          pre-commit install
          if [ $? -ne 0 ]; then
            echo "Error installing pre-commit hooks."
            exit 1
          else
            echo "Pre-commit hooks installed successfully."
          fi

      - name: Debug Environment Details
        shell: bash
        run: |
          echo "===== Environment Details ====="
          echo "Node.js version:"
          node --version || echo "Node.js not found or 'node --version' failed."
          echo "npm version:"
          npm --version || echo "npm not found or 'npm --version' failed."
          echo "pnpm version:"
          pnpm --version || echo "pnpm not found or 'pnpm --version' failed."
          echo "Python version:"
          python --version || echo "Python not found or 'python --version' failed."
          echo "pip version:"
          pip --version || echo "pip not found or 'pip --version' failed."
          echo "Current working directory:"
          pwd
          echo "Listing current directory contents:"
          ls -la

      - name: Install PyYAML
        run: pip install pyyaml

      - name: Debug Environment Details
        shell: bash
        run: |
          echo "===== Environment Details ====="
          echo "Node.js version:"
          node --version || echo "Node.js not found or 'node --version' failed."
          echo "npm version:"
          npm --version || echo "npm not found or 'npm --version' failed."
          echo "pnpm version:"
          pnpm --version || echo "pnpm not found or 'pnpm --version' failed."
          echo "Python version:"
          python --version || echo "Python not found or 'python --version' failed."
          echo "pip version:"
          pip --version || echo "pip not found or 'pip --version' failed."
          echo "Current working directory:"
          pwd
          echo "Listing current directory contents:"
          ls -la

      - name: Run setup script
        run: python enhanced_setup_dev_environment.py --ci

      - name: Verify setup
        run: |
          # Check if virtual environment was created
          if [ -d ".venv" ]; then
            echo "Virtual environment created successfully"
          else
            echo "Error: Virtual environment not created"
            exit 1
          fi

          # Check if pre-commit hooks are installed
          if [ -f ".git/hooks/pre-commit" ]; then
            echo "Pre-commit hooks installed successfully"
          else
            echo "Error: Pre-commit hooks not installed"
            exit 1
          fi

  test-windows:
    name: Test Setup Script on Windows
    runs-on: windows-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug file paths
        shell: powershell
        run: |
          Write-Host "Current working directory: $(Get-Location)"
          Get-ChildItem -Force

      - name: Verify package.json
        shell: powershell
        run: |
          if (-not (Test-Path "package.json")) {
            Write-Error "Error: package.json not found in the root directory."
            Get-ChildItem -Force
            exit 1
          }
          Write-Host "Contents of package.json:"
          Get-Content "package.json"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: false

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install development dependencies
        shell: powershell
        run: pip install -r requirements-dev.txt

      - name: Install uv
        shell: powershell
        run: pip install uv

      - name: Verify uv Installation
        shell: powershell
        run: uv --version

      - name: Install PyYAML
        shell: powershell
        run: pip install pyyaml

      - name: Install Ruff
        shell: powershell
        run: pip install ruff

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: false

      - name: Verify Node.js and pnpm
        shell: powershell
        run: |
          python --version
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Python is not installed or not in PATH."
            exit 1
          }
          node --version
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Node.js is not installed or not in PATH."
            exit 1
          }
          pnpm --version
          if ($LASTEXITCODE -ne 0) {
            Write-Error "pnpm is not installed or not in PATH."
            exit 1
          }

      - name: Install Node.js dependencies (pnpm)
        shell: powershell
        run: |
          pnpm install --reporter=default
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to install Node.js dependencies with pnpm. Possible issues:"
            Write-Error "- Missing or conflicting dependencies in package.json."
            Write-Error "- pnpm not set up properly."
            exit 1
          }

      - name: Install pre-commit hooks
        shell: powershell
        run: |
          pre-commit install
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Error installing pre-commit hooks."
            exit 1
          } else {
            Write-Host "Pre-commit hooks installed successfully."
          }

      - name: Debug Environment Details
        shell: powershell
        run: |
          Write-Host "===== Environment Details ====="
          Write-Host "Node.js version:"
          node --version
          if ($LASTEXITCODE -ne 0) { Write-Warning "Node.js not found or 'node --version' failed." }
          Write-Host "npm version:"
          npm --version
          if ($LASTEXITCODE -ne 0) { Write-Warning "npm not found or 'npm --version' failed." }
          Write-Host "pnpm version:"
          pnpm --version
          if ($LASTEXITCODE -ne 0) { Write-Warning "pnpm not found or 'pnpm --version' failed." }
          Write-Host "Python version:"
          python --version
          if ($LASTEXITCODE -ne 0) { Write-Warning "Python not found or 'python --version' failed." }
          Write-Host "pip version:"
          pip --version
          if ($LASTEXITCODE -ne 0) { Write-Warning "pip not found or 'pip --version' failed." }
          Write-Host "Current working directory:"
          Get-Location
          Write-Host "Listing current directory contents:"
          Get-ChildItem -Force

      - name: Run setup script
        shell: powershell
        run: python enhanced_setup_dev_environment.py --ci

      - name: Verify setup
        shell: powershell
        run: |
          # Check if virtual environment was created
          if (Test-Path ".venv") {
            Write-Host "Virtual environment created successfully"
          } else {
            Write-Error "Error: Virtual environment not created"
            exit 1
          }

          # Check if pre-commit hooks are installed
          if (Test-Path ".git/hooks/pre-commit") {
            Write-Host "Pre-commit hooks installed successfully"
          } else {
            Write-Error "Error: Pre-commit hooks not installed"
            exit 1
          }

  test-macos:
    name: Test Setup Script on macOS
    runs-on: macos-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug file paths
        shell: bash
        run: |
          echo "Current working directory: $(pwd)"
          ls -la

      - name: Verify package.json
        shell: bash
        run: |
          if [ ! -f "package.json" ]; then
            echo "Error: package.json not found in the root directory."
            ls -la
            exit 1
          fi
          echo "Contents of package.json:"
          cat package.json

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: false

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install development dependencies
        run: pip install -r requirements-dev.txt

      - name: Install uv
        run: pip install uv

      - name: Verify uv Installation
        run: uv --version

      - name: Install Ruff (Python Linter)
        run: pip install ruff

      - name: Verify Ruff Installation
        run: ruff --version

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: false

      - name: Verify Node.js and pnpm
        shell: bash
        run: |
          node --version
          if [ $? -ne 0 ]; then
            echo "Error: Node.js is not installed or not in PATH."
            exit 1
          fi
          npm --version
          if [ $? -ne 0 ]; then
            echo "Error: npm is not installed or not in PATH."
            exit 1
          fi
          pnpm --version
          if [ $? -ne 0 ]; then
            echo "Error: pnpm is not installed or not in PATH."
            exit 1
          fi

      - name: Install PyYAML
        run: pip install pyyaml

      - name: Debug Environment Details
        shell: bash
        run: |
          echo "===== Environment Details ====="
          echo "Node.js version:"
          node --version || echo "Node.js not found or 'node --version' failed."
          echo "npm version:"
          npm --version || echo "npm not found or 'npm --version' failed."
          echo "pnpm version:"
          pnpm --version || echo "pnpm not found or 'pnpm --version' failed."
          echo "Python version:"
          python --version || echo "Python not found or 'python --version' failed."
          echo "pip version:"
          pip --version || echo "pip not found or 'pip --version' failed."
          echo "Current working directory:"
          pwd
          echo "Listing current directory contents:"
          ls -la

      - name: Run setup script
        run: python enhanced_setup_dev_environment.py --ci

      - name: Verify setup
        run: |
          # Check if virtual environment was created
          if [ -d ".venv" ]; then
            echo "Virtual environment created successfully"
          else
            echo "Error: Virtual environment not created"
            exit 1
          fi

          # Check if pre-commit hooks are installed
          if [ -f ".git/hooks/pre-commit" ]; then
            echo "Pre-commit hooks installed successfully"
          else
            echo "Error: Pre-commit hooks not installed"
            exit 1
          fi
