name: Test Setup Script

on:
  push:
    branches: [ main ]
    paths:
      - 'enhanced_setup_dev_environment.py'
      - 'enhanced_setup_dev_environment.bat'
      - 'enhanced_setup_dev_environment.sh'
      - '.github/workflows/test-setup-script.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'enhanced_setup_dev_environment.py'
      - 'enhanced_setup_dev_environment.bat'
      - 'enhanced_setup_dev_environment.sh'
      - '.github/workflows/test-setup-script.yml'
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to test on'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - ubuntu
          - windows
          - macos
      setup_profile:
        description: 'Setup profile to test'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - minimal
          - ui-only
          - backend-only

permissions:
  contents: read

jobs:
  test-ubuntu:
    name: Test on Ubuntu
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.platform == 'all' || github.event.inputs.platform == 'ubuntu' || github.event.inputs.platform == '' }}
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug file paths
        shell: bash
        run: |
          echo "Current working directory: $(pwd)"
          echo "Listing files in current working directory:"
          ls -la
          echo "Listing files in ./.github/workflows:"
          ls -la ./.github/workflows

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install development dependencies
        run: pip install -r requirements-dev.txt

      - name: Install Ruff (Python Linter)
        run: pip install ruff

      - name: Verify Ruff Installation
        run: ruff --version

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm' # Changed from pnpm to npm

      - name: Check for npm lock file (package-lock.json)
        run: |
          if [ ! -f package-lock.json ]; then
            echo "Error: package-lock.json is missing. Please generate and commit it."
            exit 1
          fi
        shell: bash

      - name: Install Node.js dependencies (npm)
        run: |
          cd .
          npm install || { echo "Failed to install Node.js dependencies. Check for missing or conflicting dependencies."; exit 1; }
        shell: bash

      - name: Verify Node.js installation
        run: |
          node --version
          npm --version

      - name: Install PyYAML
        run: pip install pyyaml

      - name: Debug Environment Details
        shell: bash
        run: |
          echo "===== Environment Details ====="
          echo "Node.js version:"
          node --version || echo "Node.js not found or 'node --version' failed."
          echo "npm version:"
          npm --version || echo "npm not found or 'npm --version' failed."
          echo "Python version:"
          python --version || echo "Python not found or 'python --version' failed."
          echo "pip version:"
          pip --version || echo "pip not found or 'pip --version' failed."
          echo "Current working directory:"
          pwd
          echo "Listing current directory contents:"
          ls -la
          echo "============================="

      - name: Make script executable
        run: chmod +x enhanced_setup_dev_environment.sh

      - name: Run setup script with minimal profile
        if: ${{ github.event.inputs.setup_profile == 'minimal' || github.event.inputs.setup_profile == '' }}
        run: ./enhanced_setup_dev_environment.sh --minimal --no-system-deps

      - name: Run setup script with backend-only profile
        if: ${{ github.event.inputs.setup_profile == 'backend-only' }}
        run: ./enhanced_setup_dev_environment.sh --backend-only --no-system-deps

      - name: Run setup script with ui-only profile
        if: ${{ github.event.inputs.setup_profile == 'ui-only' }}
        run: ./enhanced_setup_dev_environment.sh --ui-only --no-system-deps

      - name: Run setup script with full profile
        if: ${{ github.event.inputs.setup_profile == 'full' }}
        run: ./enhanced_setup_dev_environment.sh --full --no-system-deps

      - name: Verify setup
        run: |
          # Check if virtual environment was created
          if [ -d ".venv" ]; then
            echo "Virtual environment created successfully"
          else
            echo "Error: Virtual environment not created"
            exit 1
          fi

          # Check if configuration files were created
          if [ -f "setup_config.yaml" ]; then
            echo "Configuration file created successfully"
          else
            echo "Error: Configuration file not created"
            exit 1
          fi

          # Check if IDE configuration files were created
          if [ -f ".editorconfig" ] && [ -d ".vscode" ]; then
            echo "IDE configuration files created successfully"
          else
            echo "Error: IDE configuration files not created"
            exit 1
          fi

  test-windows:
    name: Test on Windows
    runs-on: windows-latest
    if: ${{ github.event.inputs.platform == 'all' || github.event.inputs.platform == 'windows' || github.event.inputs.platform == '' }}
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug file paths
        shell: powershell
        run: |
          Write-Host "Current working directory: $(Get-Location)"
          Write-Host "Listing files in current working directory:"
          Get-ChildItem -Force
          Write-Host "Listing files in ./.github/workflows:"
          Get-ChildItem -Path ./.github/workflows -Force

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install development dependencies
        shell: powershell
        run: pip install -r requirements-dev.txt

      - name: Install PyYAML
        shell: powershell
        run: pip install pyyaml

      - name: Install Ruff
        shell: powershell
        run: pip install ruff

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Verify Python and Node.js Installation
        shell: powershell
        run: |
          python --version
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Python is not installed or not in PATH."
            exit 1
          }
          node --version
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Node.js is not installed or not in PATH."
            exit 1
          }

      - name: Check for npm lock file
        shell: powershell
        run: |
          if (-not (Test-Path "./package-lock.json")) {
            Write-Error "Error: package-lock.json is missing. Please generate and commit it."
            exit 1
          } else {
            Write-Host "package-lock.json found."
          }

      - name: Install Node.js Dependencies
        shell: powershell
        run: |
          npm install
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to install Node.js dependencies. Check for missing or conflicting dependencies."
            exit 1
          }

      - name: Install Pre-commit Hooks
        shell: powershell
        run: |
          pre-commit install
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Error installing pre-commit hooks."
            exit 1
          } else {
            Write-Host "Pre-commit hooks installed successfully."
          }

      - name: Debug Environment Details
        shell: powershell
        run: |
          Write-Host "===== Environment Details ====="
          Write-Host "Node.js version:"
          node --version
          if ($LASTEXITCODE -ne 0) { Write-Warning "Node.js not found or 'node --version' failed." }
          Write-Host "npm version:"
          npm --version
          if ($LASTEXITCODE -ne 0) { Write-Warning "npm not found or 'npm --version' failed." }
          Write-Host "Python version:"
          python --version
          if ($LASTEXITCODE -ne 0) { Write-Warning "Python not found or 'python --version' failed." }
          Write-Host "pip version:"
          pip --version
          if ($LASTEXITCODE -ne 0) { Write-Warning "pip not found or 'pip --version' failed." }
          Write-Host "Current working directory:"
          Get-Location
          Write-Host "Listing current directory contents:"
          Get-ChildItem -Force
          Write-Host "============================="

      - name: Verify setup script
        shell: cmd
        run: |
          if exist ".\\enhanced_setup_dev_environment.bat" (
            echo "Setup script exists."
          ) else (
            echo "Error: Setup script not found."
            exit 1
          )

      - name: Run Batch Script
        shell: cmd
        run: .\\enhanced_setup_dev_environment.bat --full

  test-macos:
    name: Test on macOS
    runs-on: macos-latest
    if: ${{ github.event.inputs.platform == 'all' || github.event.inputs.platform == 'macos' || github.event.inputs.platform == '' }}
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug file paths
        shell: bash
        run: |
          echo "Current working directory: $(pwd)"
          echo "Listing files in current working directory:"
          ls -la
          echo "Listing files in ./.github/workflows:"
          ls -la ./.github/workflows

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install development dependencies
        run: pip install -r requirements-dev.txt

      - name: Install Ruff (Python Linter)
        run: pip install ruff

      - name: Verify Ruff Installation
        run: ruff --version

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm' # Changed from pnpm to npm

      - name: Check for npm lock file (package-lock.json)
        run: |
          if [ ! -f package-lock.json ]; then
            echo "Error: package-lock.json is missing. Please generate and commit it."
            exit 1
          fi
        shell: bash

      - name: Install Node.js dependencies (npm)
        run: |
          cd .
          npm install || { echo "Failed to install Node.js dependencies. Check for missing or conflicting dependencies."; exit 1; }
        shell: bash

      - name: Verify Node.js installation
        run: |
          node --version
          npm --version

      - name: Install PyYAML
        run: pip install pyyaml

      - name: Debug Environment Details
        shell: bash
        run: |
          echo "===== Environment Details ====="
          echo "Node.js version:"
          node --version || echo "Node.js not found or 'node --version' failed."
          echo "npm version:"
          npm --version || echo "npm not found or 'npm --version' failed."
          echo "Python version:"
          python --version || echo "Python not found or 'python --version' failed."
          echo "pip version:"
          pip --version || echo "pip not found or 'pip --version' failed."
          echo "Current working directory:"
          pwd
          echo "Listing current directory contents:"
          ls -la
          echo "============================="

      - name: Make script executable
        run: chmod +x enhanced_setup_dev_environment.sh

      - name: Run setup script with minimal profile
        if: ${{ github.event.inputs.setup_profile == 'minimal' || github.event.inputs.setup_profile == '' }}
        run: ./enhanced_setup_dev_environment.sh --minimal --no-system-deps

      - name: Run setup script with backend-only profile
        if: ${{ github.event.inputs.setup_profile == 'backend-only' }}
        run: ./enhanced_setup_dev_environment.sh --backend-only --no-system-deps

      - name: Run setup script with ui-only profile
        if: ${{ github.event.inputs.setup_profile == 'ui-only' }}
        run: ./enhanced_setup_dev_environment.sh --ui-only --no-system-deps

      - name: Run setup script with full profile
        if: ${{ github.event.inputs.setup_profile == 'full' }}
        run: ./enhanced_setup_dev_environment.sh --full --no-system-deps

      - name: Verify setup
        run: |
          # Check if virtual environment was created
          if [ -d ".venv" ]; then
            echo "Virtual environment created successfully"
          else
            echo "Error: Virtual environment not created"
            exit 1
          fi

          # Check if configuration files were created
          if [ -f "setup_config.yaml" ]; then
            echo "Configuration file created successfully"
          else
            echo "Error: Configuration file not created"
            exit 1
          fi

          # Check if IDE configuration files were created
          if [ -f ".editorconfig" ] && [ -d ".vscode" ]; then
            echo "IDE configuration files created successfully"
          else
            echo "Error: IDE configuration files not created"
            exit 1
          fi
