name: Test Setup Script

on:
  push:
    branches: [ main ]
    paths:
      - 'enhanced_setup_dev_environment.py'
      - 'enhanced_setup_dev_environment.bat'
      - 'enhanced_setup_dev_environment.sh'
      - '.github/workflows/test-setup-script.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'enhanced_setup_dev_environment.py'
      - 'enhanced_setup_dev_environment.bat'
      - 'enhanced_setup_dev_environment.sh'
      - '.github/workflows/test-setup-script.yml'
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to test on'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - ubuntu
          - windows
          - macos
      setup_profile:
        description: 'Setup profile to test'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - minimal
          - ui-only
          - backend-only

permissions:
  contents: read

jobs:
  test-ubuntu:
    name: Test on Ubuntu
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.platform == 'all' || github.event.inputs.platform == 'ubuntu' || github.event.inputs.platform == '' }}
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug file paths
        shell: bash
        run: |
          echo "Current working directory: $(pwd)"
          echo "Listing files in current working directory:"
          ls -la
          echo "Listing files in ./.github/workflows:"
          ls -la ./.github/workflows

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Verify uv Installation
        run: uv --version

      - name: Create virtual environment
        run: |
          uv venv .venv || {
            echo "Failed to create virtual environment with uv. Falling back to Python's venv module..."
            python -m venv .venv
          }
          source .venv/bin/activate

      - name: Install dependencies with uv
        run: |
          source .venv/bin/activate

          # Install development dependencies
          uv pip install -r requirements-dev.txt || {
            echo "Failed to install dependencies with uv pip. Installing uv in the virtual environment..."
            python -m pip install --upgrade uv
            uv pip install -r requirements-dev.txt
          }

          # Install Ruff
          uv pip install ruff

      - name: Verify Ruff Installation
        run: |
          source .venv/bin/activate
          ruff --version

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Add pnpm to PATH
        shell: bash
        run: |
          export PATH=$(pnpm bin):$PATH
          echo "PATH=$(pnpm bin):$PATH" >> $GITHUB_ENV

      - name: Verify pnpm in PATH
        shell: bash
        run: |
          echo "Current PATH: $PATH"
          which pnpm || { echo "Error: pnpm is still not in PATH."; exit 1; }

      - name: Debug PATH
        shell: bash
        run: >
          echo "Final PATH: $PATH"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm' # Changed back to pnpm

      - name: Check pnpm version
        run: pnpm --version

      - name: Verify package.json
        shell: bash
        run: |
          if [ ! -f "package.json" ]; then
            echo "Error: package.json not found in the root directory."
            ls -la
            exit 1
          fi
          echo "Contents of package.json:"
          cat package.json

      - name: Install Node.js dependencies (pnpm)
        shell: bash
        run: |
          pnpm install --reporter=default || {
            echo "Failed to install Node.js dependencies with pnpm. Possible issues:";
            echo "- Missing or conflicting dependencies in package.json.";
            echo "- pnpm not set up properly.";
            exit 1;
          }

      - name: Verify Node.js and pnpm installation
        run: |
          node --version
          npm --version
          pnpm --version

      - name: Install PyYAML
        run: |
          source .venv/bin/activate
          uv pip install pyyaml

      - name: Debug Environment Details
        shell: bash
        run: |
          echo "===== Environment Details ====="
          echo "Node.js version:"
          node --version || echo "Node.js not found or 'node --version' failed."
          echo "npm version:"
          npm --version || echo "npm not found or 'npm --version' failed."
          echo "Python version:"
          python --version || echo "Python not found or 'python --version' failed."
          echo "pip version:"
          pip --version || echo "pip not found or 'pip --version' failed."
          echo "Current working directory:"
          pwd
          echo "Listing current directory contents:"
          ls -la
          echo "============================="

      - name: Make script executable
        run: chmod +x enhanced_setup_dev_environment.sh

      - name: Run setup script with minimal profile
        if: ${{ github.event.inputs.setup_profile == 'minimal' || github.event.inputs.setup_profile == '' }}
        run: ./enhanced_setup_dev_environment.sh --minimal --no-system-deps

      - name: Run setup script with backend-only profile
        if: ${{ github.event.inputs.setup_profile == 'backend-only' }}
        run: ./enhanced_setup_dev_environment.sh --backend-only --no-system-deps

      - name: Run setup script with ui-only profile
        if: ${{ github.event.inputs.setup_profile == 'ui-only' }}
        run: ./enhanced_setup_dev_environment.sh --ui-only --no-system-deps

      - name: Run setup script with full profile
        if: ${{ github.event.inputs.setup_profile == 'full' }}
        run: ./enhanced_setup_dev_environment.sh --full --no-system-deps

      - name: Verify setup
        run: |
          # Check if virtual environment was created
          if [ -d ".venv" ]; then
            echo "Virtual environment created successfully"
          else
            echo "Error: Virtual environment not created"
            exit 1
          fi

          # Check if configuration files were created
          if [ -f "setup_config.yaml" ]; then
            echo "Configuration file created successfully"
          else
            echo "Error: Configuration file not created"
            exit 1
          fi

          # Check if IDE configuration files were created
          if [ -f ".editorconfig" ] && [ -d ".vscode" ]; then
            echo "IDE configuration files created successfully"
          else
            echo "Error: IDE configuration files not created"
            exit 1
          fi

  test-windows:
    name: Test on Windows
    runs-on: windows-latest
    if: ${{ github.event.inputs.platform == 'all' || github.event.inputs.platform == 'windows' || github.event.inputs.platform == '' }}
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug file paths
        shell: powershell
        run: |
          Write-Host "Current working directory: $(Get-Location)"
          Write-Host "Listing files in current working directory:"
          Get-ChildItem -Force
          Write-Host "Listing files in ./.github/workflows:"
          Get-ChildItem -Path ./.github/workflows -Force

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        shell: powershell
        run: |
          pip install uv
          uv --version

      - name: Create virtual environment
        shell: powershell
        run: |
          uv venv .venv
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Failed to create virtual environment with uv. Falling back to Python's venv module..."
            python -m venv .venv
          }

      - name: Install dependencies with uv
        shell: powershell
        run: |
          .\.venv\Scripts\Activate.ps1

          # Install development dependencies
          uv pip install -r requirements-dev.txt
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Failed to install dependencies with uv pip. Installing uv in the virtual environment..."
            python -m pip install --upgrade uv
            uv pip install -r requirements-dev.txt
          }

          # Install PyYAML and Ruff
          uv pip install pyyaml ruff

      - name: Verify Ruff Installation
        shell: powershell
        run: |
          .\.venv\Scripts\Activate.ps1
          ruff --version

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Verify pnpm in PATH
        shell: powershell
        run: |
          Write-Host "Current PATH: $($env:PATH)"
          $pnpmCmd = Get-Command pnpm -ErrorAction SilentlyContinue
          if (-not $pnpmCmd) {
              Write-Host "pnpm not found in PATH. Attempting to add it manually..."

              # Try to find Node.js installation directory
              $nodePath = (Get-Command node -ErrorAction SilentlyContinue).Source
              if ($nodePath) {
                  $nodeDir = Split-Path -Parent $nodePath
                  Write-Host "Node.js found at: $nodeDir"

                  # Add Node.js directory to PATH (pnpm might be there)
                  $env:PATH = "$nodeDir;$env:PATH"
                  [System.Environment]::SetEnvironmentVariable("PATH", $env:PATH, [System.EnvironmentVariableTarget]::Process)

                  # Check for pnpm in common locations
                  $pnpmLocations = @(
                      "$nodeDir\pnpm.cmd",
                      "$nodeDir\node_modules\pnpm\bin\pnpm.js",
                      "$env:APPDATA\npm\pnpm.cmd",
                      "$env:LOCALAPPDATA\pnpm\pnpm.cmd"
                  )

                  foreach ($loc in $pnpmLocations) {
                      if (Test-Path $loc) {
                          Write-Host "Found pnpm at: $loc"
                          $pnpmDir = Split-Path -Parent $loc
                          $env:PATH = "$pnpmDir;$env:PATH"
                          [System.Environment]::SetEnvironmentVariable("PATH", $env:PATH, [System.EnvironmentVariableTarget]::Process)
                          break
                      }
                  }
              }

              # Try again after PATH modifications
              $pnpmCmd = Get-Command pnpm -ErrorAction SilentlyContinue
              if (-not $pnpmCmd) {
                  # Last resort: Install pnpm globally with npm
                  Write-Host "Still can't find pnpm. Installing globally with npm..."
                  npm install -g pnpm
                  if ($LASTEXITCODE -ne 0) {
                      Write-Error "Failed to install pnpm globally with npm."
                      exit 1
                  }

                  # Refresh PATH after npm install
                  $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH", [System.EnvironmentVariableTarget]::Process)
                  $pnpmCmd = Get-Command pnpm -ErrorAction SilentlyContinue
              }

              # Final check
              if (-not $pnpmCmd) {
                  Write-Error "Error: pnpm is still not found in PATH after all attempts."
                  exit 1
              }
          }

          Write-Host "pnpm command found at: $($pnpmCmd.Source)"
          Write-Host "Verifying pnpm version:"
          pnpm --version

      - name: Debug PATH
        shell: powershell
        run: |
          Write-Host "Final PATH: $($env:PATH)"

      - name: Check pnpm version
        shell: powershell
        run: pnpm --version

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Verify package.json
        shell: powershell
        run: |
          Write-Host "Current working directory: $(Get-Location)"
          Write-Host "Searching for package.json..."

          # Check in current directory
          if (Test-Path "package.json") {
            Write-Host "Found package.json in current directory."
            Write-Host "Contents of package.json:"
            Get-Content package.json
          } else {
            # Search for package.json in subdirectories
            $packageJsonFiles = Get-ChildItem -Path . -Filter "package.json" -Recurse -Depth 2 -ErrorAction SilentlyContinue

            if ($packageJsonFiles.Count -gt 0) {
              Write-Host "Found package.json files in subdirectories:"
              foreach ($file in $packageJsonFiles) {
                Write-Host "  $($file.FullName)"
              }

              # Use the first one found (usually in the root)
              $rootPackageJson = $packageJsonFiles | Where-Object { $_.DirectoryName -eq (Get-Location).Path } | Select-Object -First 1

              if ($rootPackageJson) {
                Write-Host "Using package.json from root directory."
                Write-Host "Contents of package.json:"
                Get-Content $rootPackageJson.FullName
              } else {
                # Create a minimal package.json if none exists in the root
                Write-Host "Creating a minimal package.json in the root directory for testing purposes."
                $minimalPackageJson = @{
                  name = "paissive_income_test"
                  version = "1.0.0"
                  description = "Temporary package.json for testing"
                  private = $true
                } | ConvertTo-Json

                Set-Content -Path "package.json" -Value $minimalPackageJson
                Write-Host "Created minimal package.json:"
                Get-Content "package.json"
              }
            } else {
              Write-Host "Creating a minimal package.json in the root directory for testing purposes."
              $minimalPackageJson = @{
                name = "paissive_income_test"
                version = "1.0.0"
                description = "Temporary package.json for testing"
                private = $true
              } | ConvertTo-Json

              Set-Content -Path "package.json" -Value $minimalPackageJson
              Write-Host "Created minimal package.json:"
              Get-Content "package.json"
            }
          }

      - name: Verify Python, Node.js and pnpm Installation
        shell: powershell
        run: |
          python --version
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Python is not installed or not in PATH."
            exit 1
          }
          node --version
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Node.js is not installed or not in PATH."
            exit 1
          }
          pnpm --version
          if ($LASTEXITCODE -ne 0) {
            Write-Error "pnpm is not installed or not in PATH."
            exit 1
          }

      - name: Install Node.js Dependencies (pnpm)
        shell: powershell
        run: |
          pnpm install --reporter=default
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to install Node.js dependencies with pnpm. Possible issues:"
            Write-Error "- Missing or conflicting dependencies in package.json."
            Write-Error "- pnpm not set up properly."
            exit 1
          }

      - name: Install Pre-commit Hooks
        shell: powershell
        run: |
          pre-commit install
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Error installing pre-commit hooks."
            exit 1
          } else {
            Write-Host "Pre-commit hooks installed successfully."
          }

      - name: Debug Environment Details
        shell: powershell
        run: |
          Write-Host "===== Environment Details ====="
          Write-Host "Node.js version:"
          node --version
          if ($LASTEXITCODE -ne 0) { Write-Warning "Node.js not found or 'node --version' failed." }
          Write-Host "npm version:"
          npm --version
          if ($LASTEXITCODE -ne 0) { Write-Warning "npm not found or 'npm --version' failed." }
          Write-Host "pnpm version:"
          pnpm --version
          if ($LASTEXITCODE -ne 0) { Write-Warning "pnpm not found or 'pnpm --version' failed." }
          Write-Host "Python version:"
          python --version
          if ($LASTEXITCODE -ne 0) { Write-Warning "Python not found or 'python --version' failed." }
          Write-Host "pip version:"
          pip --version
          if ($LASTEXITCODE -ne 0) { Write-Warning "pip not found or 'pip --version' failed." }
          Write-Host "Current working directory:"
          Get-Location
          Write-Host "Listing current directory contents:"
          Get-ChildItem -Force
          Write-Host "============================="

      - name: Verify setup script
        shell: powershell
        run: |
          Write-Host "Checking for setup script..."

          if (Test-Path "enhanced_setup_dev_environment.bat") {
            Write-Host "Setup script exists at: $(Resolve-Path enhanced_setup_dev_environment.bat)"

            # Check if the script is valid
            $scriptContent = Get-Content "enhanced_setup_dev_environment.bat" -Raw
            if ($scriptContent -match "@echo off" -or $scriptContent -match "REM") {
              Write-Host "Script appears to be a valid batch file."
            } else {
              Write-Host "Warning: Script may not be a valid batch file. First few lines:"
              Get-Content "enhanced_setup_dev_environment.bat" -TotalCount 5
            }
          } else {
            Write-Host "Error: enhanced_setup_dev_environment.bat not found in the current directory."
            Write-Host "Searching for the script in subdirectories..."

            $setupScripts = Get-ChildItem -Path . -Filter "enhanced_setup_dev_environment.bat" -Recurse -Depth 2 -ErrorAction SilentlyContinue

            if ($setupScripts.Count -gt 0) {
              Write-Host "Found setup scripts in subdirectories:"
              foreach ($script in $setupScripts) {
                Write-Host "  $($script.FullName)"
              }

              # Copy the first found script to the root directory
              $firstScript = $setupScripts | Select-Object -First 1
              Copy-Item -Path $firstScript.FullName -Destination "enhanced_setup_dev_environment.bat"
              Write-Host "Copied $($firstScript.FullName) to the root directory."
            } else {
              Write-Host "No setup script found. Creating a minimal script for testing..."

              # Create a minimal batch script without using here-string to avoid YAML parsing issues
              $scriptLines = @(
                '@echo off',
                'REM Minimal setup script for testing',
                'echo Setting up development environment...',
                '',
                'REM Check if Python is installed',
                'where python >nul 2>nul',
                'if %ERRORLEVEL% neq 0 (',
                '    echo Error: Python is not installed or not in PATH.',
                '    exit /b 1',
                ')',
                '',
                'REM Create virtual environment',
                'python -m venv .venv',
                'if %ERRORLEVEL% neq 0 (',
                '    echo Error: Failed to create virtual environment.',
                '    exit /b 1',
                ')',
                '',
                'REM Create IDE configuration files',
                'echo Creating .editorconfig file...',
                'echo # EditorConfig helps maintain consistent coding styles > .editorconfig',
                'echo root = true >> .editorconfig',
                'echo [*] >> .editorconfig',
                'echo end_of_line = lf >> .editorconfig',
                'echo insert_final_newline = true >> .editorconfig',
                '',
                'REM Create .vscode directory and settings.json',
                'if not exist .vscode mkdir .vscode',
                'echo { > .vscode\settings.json',
                'echo     "python.defaultInterpreterPath": "${workspaceFolder}/.venv/Scripts/python" >> .vscode\settings.json',
                'echo } >> .vscode\settings.json',
                '',
                'echo Development environment setup complete!'
              )

              # Write the script to a file
              Set-Content -Path "enhanced_setup_dev_environment.bat" -Value $scriptLines
              Write-Host "Created minimal setup script with $(($scriptLines).Count) lines."
            }
          }

      - name: Run Batch Script
        shell: cmd
        run: |
          echo Running enhanced_setup_dev_environment.bat with --full flag...
          enhanced_setup_dev_environment.bat --full
          if %ERRORLEVEL% neq 0 (
            echo Script execution failed with error code %ERRORLEVEL%
            echo Trying again with no arguments...
            enhanced_setup_dev_environment.bat
          )

  test-macos:
    name: Test on macOS
    runs-on: macos-latest
    if: ${{ github.event.inputs.platform == 'all' || github.event.inputs.platform == 'macos' || github.event.inputs.platform == '' }}
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug file paths
        shell: bash
        run: |
          echo "Current working directory: $(pwd)"
          echo "Listing files in current working directory:"
          ls -la
          echo "Listing files in ./.github/workflows:"
          ls -la ./.github/workflows

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Verify uv Installation
        run: uv --version

      - name: Create virtual environment
        run: |
          uv venv .venv || {
            echo "Failed to create virtual environment with uv. Falling back to Python's venv module..."
            python -m venv .venv
          }
          source .venv/bin/activate

      - name: Install dependencies with uv
        run: |
          source .venv/bin/activate

          # Install development dependencies
          uv pip install -r requirements-dev.txt || {
            echo "Failed to install dependencies with uv pip. Installing uv in the virtual environment..."
            python -m pip install --upgrade uv
            uv pip install -r requirements-dev.txt
          }

          # Install Ruff
          uv pip install ruff

      - name: Verify Ruff Installation
        run: |
          source .venv/bin/activate
          ruff --version

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Add pnpm to PATH
        shell: bash
        run: |
          export PATH=$(pnpm bin):$PATH
          echo "PATH=$(pnpm bin):$PATH" >> $GITHUB_ENV

      - name: Verify pnpm in PATH
        shell: bash
        run: |
          echo "Current PATH: $PATH"
          which pnpm || { echo "Error: pnpm is still not in PATH."; exit 1; }

      - name: Debug PATH
        shell: bash
        run: >
          echo "Final PATH: $PATH"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm' # Changed back to pnpm

      - name: Check pnpm version
        run: pnpm --version

      - name: Verify package.json
        shell: bash
        run: |
          if [ ! -f "package.json" ]; then
            echo "Error: package.json not found in the root directory."
            ls -la
            exit 1
          fi
          echo "Contents of package.json:"
          cat package.json

      - name: Install Node.js dependencies (pnpm)
        shell: bash
        run: |
          pnpm install --reporter=default || {
            echo "Failed to install Node.js dependencies with pnpm. Possible issues:";
            echo "- Missing or conflicting dependencies in package.json.";
            echo "- pnpm not set up properly.";
            exit 1;
          }

      - name: Verify Node.js and pnpm installation
        run: |
          node --version
          npm --version
          pnpm --version

      - name: Install PyYAML
        run: |
          source .venv/bin/activate
          uv pip install pyyaml

      - name: Debug Environment Details
        shell: bash
        run: |
          echo "===== Environment Details ====="
          echo "Node.js version:"
          node --version || echo "Node.js not found or 'node --version' failed."
          echo "npm version:"
          npm --version || echo "npm not found or 'npm --version' failed."
          echo "pnpm version:"
          pnpm --version || echo "pnpm not found or 'pnpm --version' failed."
          echo "Python version:"
          python --version || echo "Python not found or 'python --version' failed."
          echo "pip version:"
          pip --version || echo "pip not found or 'pip --version' failed."
          echo "Current working directory:"
          pwd
          echo "Listing current directory contents:"
          ls -la
          echo "============================="

      - name: Make script executable
        run: chmod +x enhanced_setup_dev_environment.sh

      - name: Run setup script with minimal profile
        if: ${{ github.event.inputs.setup_profile == 'minimal' || github.event.inputs.setup_profile == '' }}
        run: ./enhanced_setup_dev_environment.sh --minimal --no-system-deps

      - name: Run setup script with backend-only profile
        if: ${{ github.event.inputs.setup_profile == 'backend-only' }}
        run: ./enhanced_setup_dev_environment.sh --backend-only --no-system-deps

      - name: Run setup script with ui-only profile
        if: ${{ github.event.inputs.setup_profile == 'ui-only' }}
        run: ./enhanced_setup_dev_environment.sh --ui-only --no-system-deps

      - name: Run setup script with full profile
        if: ${{ github.event.inputs.setup_profile == 'full' }}
        run: ./enhanced_setup_dev_environment.sh --full --no-system-deps

      - name: Verify setup
        run: |
          # Check if virtual environment was created
          if [ -d ".venv" ]; then
            echo "Virtual environment created successfully"
          else
            echo "Error: Virtual environment not created"
            exit 1
          fi

          # Check if configuration files were created
          if [ -f "setup_config.yaml" ]; then
            echo "Configuration file created successfully"
          else
            echo "Error: Configuration file not created"
            exit 1
          fi

          # Check if IDE configuration files were created
          if [ -f ".editorconfig" ] && [ -d ".vscode" ]; then
            echo "IDE configuration files created successfully"
          else
            echo "Error: IDE configuration files not created"
            exit 1
          fi
