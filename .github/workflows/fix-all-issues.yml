name: Fix All Issues

on:
  workflow_dispatch:
    inputs:
      specific_file:
        description: 'Specific file to fix'
        required: false
        type: string
      syntax_only:
        description: 'Fix only syntax errors'
        required: false
        default: false
        type: boolean
      format_only:
        description: 'Fix only formatting issues'
        required: false
        default: false
        type: boolean
      no_black:
        description: 'Skip Black formatter'
        required: false
        default: false
        type: boolean
      no_isort:
        description: 'Skip isort'
        required: false
        default: false
        type: boolean
      no_ruff:
        description: 'Skip Ruff linter'
        required: false
        default: false
        type: boolean
      use_precommit:
        description: 'Use pre-commit for syntax checking'
        required: false
        default: false
        type: boolean
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**.py'
  push:
    branches:
      - main
    paths:
      - '**.py'

jobs:
  fix-issues:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch all history to ensure we have proper git history

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 black isort ruff pre-commit
        python -m pip install -r requirements-dev.txt
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: List directory contents
      run: |
        echo "Current directory: $(pwd)"
        ls -la
        echo "Python files available:"
        find . -name "*.py" -type f | grep -v "__pycache__" | head -n 10

    - name: Run pre-commit check
      id: pre-commit
      if: github.event.inputs.use_precommit == 'true' || github.event_name == 'pull_request' || github.event_name == 'push'
      continue-on-error: true
      run: |
        pre-commit run check-ast --all-files

    - name: Fix issues
      run: |
        # If pre-commit failed, try to fix syntax issues first
        if [ "${{ steps.pre-commit.outcome }}" == "failure" ]; then
          echo "Pre-commit check failed, attempting to fix syntax issues first..."
          # Fallback to basic syntax fixes
          find . -name "*.py" -type f -not -path "*/\.*" -not -path "*/venv/*" -not -path "*/.venv/*" \
            -exec python -m py_compile {} \; || echo "Some files still have syntax errors"
        fi

        # Verify the script exists
        if [ ! -f "fix_all_issues_final.py" ]; then
          echo "Error: fix_all_issues_final.py not found in current directory!"
          echo "Showing directory content:"
          ls -la
          exit 1
        fi

        # Check Python version
        python --version

        # Verify tools are installed
        echo "Checking installed tools..."
        python -m pip list | grep -E 'black|isort|ruff|flake8'

        # Build command with appropriate flags
        CMD="python fix_all_issues_final.py --verbose"

        if [ "${{ github.event.inputs.syntax_only }}" == "true" ]; then
          CMD="$CMD --syntax-only"
        fi

        if [ "${{ github.event.inputs.format_only }}" == "true" ]; then
          CMD="$CMD --format-only"
        fi

        if [ "${{ github.event.inputs.no_black }}" == "true" ]; then
          CMD="$CMD --no-black"
        fi

        if [ "${{ github.event.inputs.no_isort }}" == "true" ]; then
          CMD="$CMD --no-isort"
        fi

        if [ "${{ github.event.inputs.no_ruff }}" == "true" ]; then
          CMD="$CMD --no-ruff"
        fi

        # Run the command with specific file or all files
        if [ -n "${{ github.event.inputs.specific_file }}" ]; then
          # Validate file path to prevent command injection
          FILE_PATH=$(echo "${{ github.event.inputs.specific_file }}" | tr -d '\n' | sed 's/[^a-zA-Z0-9_\.\/-]//g')
          if [[ "$FILE_PATH" =~ ^[a-zA-Z0-9_\.\/-]+$ ]]; then
            echo "Fixing specific file: $FILE_PATH"
            if [ -f "$FILE_PATH" ]; then
              $CMD "$FILE_PATH"
            else
              echo "Error: File $FILE_PATH not found!"
              exit 1
            fi
          else
            echo "Invalid file path provided. Fixing all files instead."
            $CMD
          fi
        else
          echo "Fixing all Python files..."
          $CMD
        fi

        # Check exit code
        if [ $? -ne 0 ]; then
          echo "Error: fix_all_issues_final.py failed!"
          exit 1
        fi

    - name: Run pre-commit check again
      id: pre-commit-again
      if: steps.pre-commit.outcome == 'failure'
      continue-on-error: true
      run: |
        pre-commit run check-ast --all-files

    - name: Check for changes
      id: git-check
      run: |
        git diff --exit-code || echo "changes=true" >> $GITHUB_OUTPUT

    - name: Setup Git for Commit
      if: steps.git-check.outputs.changes == 'true' || (steps.pre-commit.outcome == 'failure' && steps.pre-commit-again.outcome == 'success')
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"

    - name: Create branch if needed
      if: steps.git-check.outputs.changes == 'true' || (steps.pre-commit.outcome == 'failure' && steps.pre-commit-again.outcome == 'success')
      run: |
        # Get current branch or create a new one if in detached HEAD
        CURRENT_BRANCH=$(git branch --show-current)
        if [ -z "$CURRENT_BRANCH" ]; then
          # We're in detached HEAD state, create a new branch
          BRANCH_NAME="fix-issues-${{ github.run_id }}"
          echo "Creating new branch: $BRANCH_NAME"
          git checkout -b $BRANCH_NAME
        else
          echo "Already on branch: $CURRENT_BRANCH"
        fi

    - name: Commit and push changes
      if: steps.git-check.outputs.changes == 'true' || (steps.pre-commit.outcome == 'failure' && steps.pre-commit-again.outcome == 'success')
      run: |
        # Add changes
        git add .

        # Get current branch
        CURRENT_BRANCH=$(git branch --show-current)

        # Determine commit message based on what was fixed
        if [ "${{ steps.pre-commit.outcome }}" == "failure" ] && [ "${{ steps.pre-commit-again.outcome }}" == "success" ]; then
          COMMIT_MSG="Fix syntax issues automatically"
        elif [ "${{ github.event.inputs.syntax_only }}" == "true" ]; then
          COMMIT_MSG="Auto-fix syntax issues"
        elif [ "${{ github.event.inputs.format_only }}" == "true" ]; then
          COMMIT_MSG="Auto-fix formatting issues"
        else
          COMMIT_MSG="Auto-fix syntax and formatting issues"
        fi

        # Commit changes
        git commit -m "$COMMIT_MSG" || echo "No changes to commit"

        # Push changes to the current branch
        echo "Pushing changes to branch: $CURRENT_BRANCH"
        git push origin $CURRENT_BRANCH
