name: Fix All Issues

on:
  workflow_dispatch:
    inputs:
      specific_file:
        description: 'Specific file to fix'
        required: false
        type: string
      syntax_only:
        description: 'Fix only syntax errors'
        required: false
        default: false
        type: boolean
      format_only:
        description: 'Fix only formatting issues'
        required: false
        default: false
        type: boolean
      no_black:
        description: 'Skip Black formatter'
        required: false
        default: false
        type: boolean
      no_isort:
        description: 'Skip isort'
        required: false
        default: false
        type: boolean
      no_ruff:
        description: 'Skip Ruff linter'
        required: false
        default: false
        type: boolean

jobs:
  fix-issues:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 black isort ruff
        python -m pip install -r requirements-dev.txt
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Fix issues
      run: |
        # Build command with appropriate flags
        CMD="python fix_all_issues_final.py"

        if [ "${{ github.event.inputs.syntax_only }}" == "true" ]; then
          CMD="$CMD --syntax-only"
        fi

        if [ "${{ github.event.inputs.format_only }}" == "true" ]; then
          CMD="$CMD --format-only"
        fi

        if [ "${{ github.event.inputs.no_black }}" == "true" ]; then
          CMD="$CMD --no-black"
        fi

        if [ "${{ github.event.inputs.no_isort }}" == "true" ]; then
          CMD="$CMD --no-isort"
        fi

        if [ "${{ github.event.inputs.no_ruff }}" == "true" ]; then
          CMD="$CMD --no-ruff"
        fi

        if [ -n "${{ github.event.inputs.specific_file }}" ]; then
          echo "Fixing specific file: ${{ github.event.inputs.specific_file }}"
          $CMD "${{ github.event.inputs.specific_file }}"
        else
          echo "Fixing all Python files..."
          $CMD
        fi

    - name: Check for changes
      id: git-check
      run: |
        git diff --exit-code || echo "changes=true" >> $GITHUB_OUTPUT

    - name: Commit changes
      if: steps.git-check.outputs.changes == 'true'
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add .
        git commit -m "Auto-fix syntax and formatting issues"
        git push
