name: Docker Compose Integration (Local)

on:
  pull_request:
    branches: [main, master]

jobs:
  docker-compose-integration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose docker-compose-plugin
          docker compose version || docker-compose --version

      - name: Check Docker status
        run: |
          docker info
          docker compose version || docker-compose --version

      - name: Create Docker network
        run: |
          docker network create paissive-network || echo "Network already exists"
          docker network ls

      - name: Pull required images
        run: |
          # Try to pull postgres image with fallbacks
          postgres_image="postgres:15.3-alpine"
          fallback_images=("postgres:14-alpine" "postgres:13-alpine" "postgres:12-alpine")

          if ! docker pull "$postgres_image"; then
            echo "Primary postgres image failed. Trying fallback images..."
            for fallback_image in "${fallback_images[@]}"; do
              if docker pull "$fallback_image"; then
                echo "Successfully pulled fallback image $fallback_image"
                # Update docker-compose.yml with the successful fallback image
                sed -i "s|postgres:15.3-alpine|$fallback_image|g" docker-compose.yml
                postgres_image="$fallback_image"
                break
              fi
            done
          fi

      - name: Validate docker-compose.yml
        run: |
          echo "Validating docker-compose.yml configuration..."
          docker compose config || docker-compose config

      - name: Start containers
        run: |
          docker compose up -d
          docker ps
          sleep 10
          docker compose ps

      - name: Check database health
        run: |
          echo "Checking database health..."
          max_attempts=10
          for i in $(seq 1 $max_attempts); do
            echo "Attempt $i of $max_attempts to check database health"
            if docker compose exec db pg_isready -U myuser -d mydb -h db || docker-compose exec db pg_isready -U myuser -d mydb -h db; then
              echo "Database is ready and accepting connections."
              break
            fi
            sleep 5
          done

      - name: Check service health
        run: |
          docker compose ps
          docker compose logs
