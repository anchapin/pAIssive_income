name: CodeQL Analysis
on:
  pull_request:
    branches:
      - main
      - dev
      - master
      - develop
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - '**/*.rst'
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.jpeg'
      - '**/*.gif'
      - '**/*.svg'
      - '**/*.ico'
      - .gitignore
      - docs/**
      - LICENSE
      - SECURITY.md
      - CONTRIBUTING.md
      - CODE_OF_CONDUCT.md
  schedule:
      - cron: 0 4 * * 1
  workflow_dispatch: {}
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
permissions:
  security-events: write
  actions: read
  contents: read
jobs:
  analyze-javascript:
    name: Analyze JavaScript/TypeScript
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        - windows-latest
        - macos-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Cache CodeQL database
      uses: actions/cache@v4
      with:
        path: ~/.codeql/databases
        key: codeql-javascript-${{ github.sha }}
        restore-keys: 'codeql-javascript-

          '
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: '8'
    - name: Add pnpm to PATH (Linux/macOS)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        export PATH=$(pnpm bin):$PATH
        echo "PATH=$(pnpm bin):$PATH" >> $GITHUB_ENV
        echo "Current PATH: $PATH"
        which pnpm || { echo "Error: pnpm is still not in PATH."; exit 1; }
    - name: Add pnpm to PATH (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $pnpmPath = (& pnpm bin)
        $env:PATH = "$pnpmPath;$env:PATH"
        echo "PATH=$pnpmPath;$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Append
        Write-Host "Current PATH: $env:PATH"
        if (-not (Get-Command pnpm -ErrorAction SilentlyContinue)) {
          Write-Host "Error: pnpm is not in PATH."
          exit 1
        }
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: pnpm
    - name: Check pnpm version
      shell: bash
      run: pnpm --version
    - name: Install dependencies
      shell: bash
      run: |
        # Check for package.json in the root directory
        if [ -f package.json ]; then
          echo "Installing dependencies with pnpm in root directory..."
          pnpm install
        else
          echo "No package.json found in root directory, checking ui/react_frontend..."
          # Check for package.json in ui/react_frontend
          if [ -f ui/react_frontend/package.json ]; then
            echo "Installing dependencies with pnpm in ui/react_frontend..."
            cd ui/react_frontend && pnpm install
          else
            echo "No package.json found in ui/react_frontend, skipping dependency installation."
          fi
        fi
      continue-on-error: true
    - name: Create .codeqlignore file
      shell: bash
      run: 'echo "Creating .codeqlignore file instead of running fix script..."

        cat > .codeqlignore << ''EOL''

        .venv/**

        venv/**

        env/**

        .env/**

        **/virtualenv/**

        **/site-packages/**

        **/dist-packages/**

        **/node_modules/**

        **/dist/**

        **/build/**

        **/vendor/**

        **/external/**

        **/third_party/**

        **/__pycache__/**

        **/.pytest_cache/**

        **/.mypy_cache/**

        **/.ruff_cache/**

        **/*.pyc

        **/*.pyo

        **/*.pyd

        **/test/**

        **/tests/**

        **/__tests__/**

        **/__mocks__/**

        **/*.test.js

        **/*.test.ts

        **/*.test.jsx

        **/*.test.tsx

        **/*.spec.js

        **/*.spec.ts

        **/*.spec.jsx

        **/*.spec.tsx

        **/.github/**

        **/.vscode/**

        **/.idea/**

        **/coverage/**

        **/.git/**

        **/docs/**

        **/*.md

        **/*.mdx

        **/*.rst

        **/sphinx/**

        **/playwright-report/**

        **/generated/**

        **/sarif-results/**

        **/*.sarif

        **/*.sarif.json

        ui/react_frontend/node_modules/**

        sdk/javascript/node_modules/**

        EOL

        # List directories to verify

        echo "Current directories:"

        ls -la

        '
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript-typescript
        queries: security-and-quality
        config-file: ./.github/codeql/security-os-config.yml
    - name: Install Node.js dependencies
      shell: bash
      run: |
        # Function to install dependencies with fallback
install_deps() {:
 \
        \ local dir=$1
  local original_dir=$(pwd)

  if [ -n $dir" ]; then
:
        \    cd "$dir" || return 1
  fi

  echo "Installing dependencies in\
        \ $(pwd)..."

  # Try with pnpm first (preferred)
  if command -v pnpm\
        \ &>/dev/null; then
    echo "Using pnpm to install dependencies..."
:
        \    pnpm install || {
      echo "pnpm install failed, trying with npm..."\

      npm install || {
        echo "Both pnpm and npm installation failed\
        \ in $(pwd)"
        cd "$original_dir"
        return 1
      }
 \
        \   }
  else
    # Fallback to npm if pnpm is not available
    echo "\
        pnpm not found, using npm to install dependencies..."
    npm install ||\
        \ {
      echo "npm installation failed in $(pwd)"
      cd "$original_dir"\

      return 1
    }
  fi

  if [ -n "$dir" ]; then
    cd "$original_dir"\

  fi

  return 0
}:

# Install dependencies in root directory if package.json\
        \ exists
if [ -f "package.json" ]; then:
  echo "Found package.json in\
        \ root directory"
  install_deps
fi

# Install dependencies in ui/react_frontend\
        \ if package.json exists
if [ -f "ui/react_frontend/package.json" ]; thenecho "Found package.json in ui/react_frontend"
  install_deps "ui/react_frontend"\

fi

# Install dependencies in sdk/javascript if package.json exists
:
        if [ -f "sdk/javascript/package.json" ]; then
  echo "Found package.json\
        \ in sdk/javascript"
  install_deps "sdk/javascript"
fi
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    - name: Check disk space (Linux/macOS)
      if: runner.os != 'Windows'
      shell: bash
      run: df -h
    - name: Check disk space (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: Get-Volume
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: /language: javascript-typescript
        upload: true
        output: sarif-results/javascript-typescript-${{ runner.os }}.sarif
    - name: Upload language-specific CodeQL configuration
      uses: github/codeql-action/upload-sarif@v3
      continue-on-error: true
      with:
        sarif_file: sarif-results/javascript-typescript-${{ runner.os }}.sarif
        category: /language: javascript-typescript
    - name: Upload SARIF results
      uses: actions/upload-artifact@v4
      with:
        name: javascript-typescript-${{ runner.os }}-sarif
        path: sarif-results/javascript-typescript-${{ runner.os }}.sarif
        retention-days: 7
  analyze-python:
    name: Analyze Python
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        - windows-latest
        - macos-latest
        python-version:
        - '3.9'
        - '3.10'
        - '3.11'
        - '3.12'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Cache CodeQL database
      uses: actions/cache@v4
      with:
        path: ~/.codeql/databases
        key: codeql-python-${{ matrix.python-version }}-${{ github.sha }}
        restore-keys: 'codeql-python-${{ matrix.python-version }}-

          '
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: pip
    - name: Install Python dependencies
      shell: bash
      run: 'python -m pip install --upgrade pip setuptools wheel

        pip install -r requirements.txt

        pip install -r requirements-dev.txt

        '
      continue-on-error: true
    - name: Create Python-specific CodeQL custom queries
      shell: bash
      run: |
        mkdir -p .github/codeql/python-queries
cat > .github/codeql/python-queries/logging-validation.ql:
        \ << 'EOL'
/**:
 * @name Python Log Injection Check
 * @description Detects\
        \ potential log injection vulnerabilities in Python code
 * @kind path-problem
:
        \ * @problem.severity error
 * @precision high
 * @id py/log-injection
:
        \ * @tags security
 *       logging
 *       injection
 */

import python:
:
        import semmle.python.dataflow.new.DataFlow
import semmle.python.dataflow.new.TaintTracking:
:
        import semmle.python.Concepts

class LoggingCall extends DataFlow::CallCfgNode\
        \ {:
  LoggingCall() {
    exists(string name |
      name = this.getFunction().toString()\
        \ and
      name.matches([%log%", "%print%", "%logger%"])
    )
:
        \  }
}:

class LogInjectionConfig extends TaintTracking::Configuration {:
:
        \  LogInjectionConfig() { this = "LogInjectionConfig" }

  override predicate\
        \ isSource(DataFlow::Node source) {
    exists(DataFlow::ParameterNode param\
        \ |
      param = source
    )
  }

  override predicate isSink(DataFlow::Node\
        \ sink) {
    exists(LoggingCall call |
      sink = call.getAnArgument()
:
        \    )
  }
}:

from LogInjectionConfig config,:
DataFlow::PathNode source,
:
        DataFlow::PathNode sink
where config.hasFlowPath(source, sink):
select sink.getNode(),:
        \ source, sink,
       "This logging call may contain unsanitized input\
        \ from $@.",
       source.getNode(), "this user-provided value"
EOL:
":
    - name: Initialize CodeQL for Python
      uses: github/codeql-action/init@v3
      with:
        languages: python
        queries: security-and-quality, ./.github/codeql/python-queries/logging-validation.ql
    - name: Perform CodeQL Analysis for Python
      uses: github/codeql-action/analyze@v3
      with:
        category: /language: python
        upload: true
        output: sarif-results/python-${{ runner.os }}.sarif
    - name: Upload language-specific CodeQL configuration
      uses: github/codeql-action/upload-sarif@v3
      continue-on-error: true
      with:
        sarif_file: sarif-results/python-${{ runner.os }}.sarif
        category: /language: python
    - name: Upload SARIF results
      uses: actions/upload-artifact@v4
      with:
        name: python-${{ runner.os }}-sarif
        path: sarif-results/python-${{ runner.os }}.sarif
        retention-days: 7
    - name: Add custom CodeQL ruleset
      shell: bash
      run: |
        mkdir -p .github/codeql/custom-queries
cat > .github/codeql/custom-queries/log-injection.ql:
        \ << 'EOL'
/**:
 * @name Log Injection Check
 * @description Detects potential\
        \ log injection vulnerabilities
 * @kind path-problem
 * @problem.severity\
        \ error
 * @precision high
 * @id js/log-injection
 * @tags security
:
        \ *       log-injection
 */

import javascript:
import DataFlow::PathGraph
:

class LoggingCall extends DataFlow::CallNode {:
  LoggingCall() {
   \
        \ exists(string name |
      name = this.getCalleeName() and
      name.toLowerCase().matches(\
        %log%")
    )
  }
}:

class LogInjectionConfiguration extends TaintTracking::Configuration\
        \ {:
  LogInjectionConfiguration() { this = "LogInjectionConfiguration"\
        \ }

  override predicate isSource(DataFlow::Node source) {
    exists(DataFlow::ParameterNode\
        \ param |
      param = source and
      not param.getName().toLowerCase().matches("\
        %sanitized%")
    )
  }

  override predicate isSink(DataFlow::Node sink)\
        \ {
    exists(LoggingCall call |
      sink = call.getAnArgument() and
:
        \      not sink.asExpr().getFile().getAbsolutePath().matches("%test%")
:
        \    )
  }
}:

from LogInjectionConfiguration config,:
DataFlow::PathNode\
        \ source,
DataFlow::PathNode sink
where config.hasFlowPath(source, sink):
:
        select sink,
source,:
sink,:
"Log injection from $@.",:
source,:
"user-provided:
        \ value"
EOL:
":
    - name: Update CodeQL config with custom queries
      shell: bash
      run: |
        cat > .github/codeql/security-os-config.yml << 'EOL'
name: "Custom CodeQL\
        \ Config"

queries:
  - uses: security-extended
  - uses: security-and-quality
:
        \  - uses: ./.github/codeql/custom-queries/log-injection.ql

paths:
  -\
        \ src
  - api
  - ui

paths-ignore:
  - '**/node_modules/**'
  - '**/dist/**'
:
        \  - '**/build/**'
  - '**/coverage/**'
  - '**/test/**'
  - '**/tests/**'
:
        EOL
":
