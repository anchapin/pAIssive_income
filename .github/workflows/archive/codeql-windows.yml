name: CodeQL Analysis - Windows
on:
  push:
    branches:
      - main
      - dev
      - master
      - develop
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - '**/*.rst'
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.jpeg'
      - '**/*.gif'
      - '**/*.svg'
      - '**/*.ico'
      - .gitignore
      - docs/**
      - LICENSE
      - SECURITY.md
      - CONTRIBUTING.md
      - CODE_OF_CONDUCT.md
  pull_request:
    branches:
      - main
      - dev
      - master
      - develop
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - '**/*.rst'
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.jpeg'
      - '**/*.gif'
      - '**/*.svg'
      - '**/*.ico'
      - .gitignore
      - docs/**
      - LICENSE
      - SECURITY.md
      - CONTRIBUTING.md
      - CODE_OF_CONDUCT.md
  schedule:
    - cron: '0 4 * * 1'
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  security-events: write
  actions: read
  contents: read

jobs:
  analyze:
    name: Analyze
    runs-on: windows-latest
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        language:
          - javascript-typescript
          - python
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup pnpm
      if: matrix.language == 'javascript-typescript'
      uses: pnpm/action-setup@v4
      with:
        version: 8.15.4
        run_install: false

    - name: Set up Node.js
      if: matrix.language == 'javascript-typescript'
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Add pnpm to PATH (Windows)
      if: matrix.language == 'javascript-typescript'
      shell: pwsh
      run: |
        # Add both global and local pnpm to PATH for Windows
        $globalPnpmPath = pnpm -g bin
        $localPnpmPath = pnpm bin
        $env:PATH = "$globalPnpmPath;$localPnpmPath;$env:PATH"
        echo "PATH=$env:PATH" >> $env:GITHUB_ENV

        # Verify pnpm is in PATH
        Write-Host "Current PATH: $env:PATH"
        if (!(Get-Command pnpm -ErrorAction SilentlyContinue)) {
          Write-Host "pnpm not found in PATH. Installing globally with npm..."
          npm install -g pnpm
          $npmGlobalPath = npm bin -g
          $env:PATH = "$npmGlobalPath;$env:PATH"
          echo "PATH=$env:PATH" >> $env:GITHUB_ENV
          if (!(Get-Command pnpm -ErrorAction SilentlyContinue)) {
            Write-Error "Error: pnpm is still not in PATH after npm install."
            exit 1
          }
        }

    - name: Verify Node.js and pnpm installation
      if: matrix.language == 'javascript-typescript'
      shell: pwsh
      run: |
        Write-Host "Node.js version: $(node --version)"
        Write-Host "npm version: $(npm --version)"
        if (Get-Command pnpm -ErrorAction SilentlyContinue) {
          Write-Host "pnpm version: $(pnpm --version)"
        } else {
          Write-Host "pnpm not found, will use npm instead"
        }

    - name: Set up Python
      if: matrix.language == 'python'
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: pip

    - name: Check disk space
      shell: pwsh
      run: Get-PSDrive

    - name: Verify lock files (Windows)
      if: matrix.language == 'javascript-typescript'
      shell: pwsh
      run: |
        Write-Host "Verifying lock files exist before CodeQL analysis..."
        $lockFiles = Get-ChildItem -Recurse -Name "package-lock.json", "yarn.lock", "pnpm-lock.yaml" -ErrorAction SilentlyContinue

        if (-not $lockFiles) {
          Write-Host "Warning: No lock files found. Creating a minimal package-lock.json in the root directory."

          # Create a minimal valid package-lock.json
          $packageLockContent = @'
        {"name":"paissive-income","version":"1.0.0","lockfileVersion":3,"packages":{"":{"name":"paissive-income","version":"1.0.0"}}}
        '@
          Set-Content -Path "package-lock.json" -Value $packageLockContent

          Write-Host "Created minimal package-lock.json in the root directory."

          # Verify the file was created
          if (Test-Path "package-lock.json") {
            Write-Host "Verification: package-lock.json exists and contains:"
            Get-Content "package-lock.json"

            # Add to .gitignore if it exists
            if (Test-Path ".gitignore") {
              $gitignoreContent = Get-Content ".gitignore" -Raw
              if ($gitignoreContent -notmatch "package-lock.json") {
                Add-Content -Path ".gitignore" -Value "`n# Generated during CodeQL analysis`npackage-lock.json"
                Write-Host "Added package-lock.json to .gitignore"
              }
            }
          } else {
            Write-Host "CRITICAL ERROR: Failed to create package-lock.json"
          }
        } else {
          Write-Host "Found lock files:"
          $lockFiles | ForEach-Object { Write-Host $_ }
        }
      continue-on-error: true

    - name: Install Node.js dependencies (Windows)
      if: matrix.language == 'javascript-typescript'
      shell: pwsh
      run: |
        function Install-Dependencies {
          param([string]$Directory = "")

          $originalLocation = Get-Location

          if ($Directory) {
            if (Test-Path $Directory) {
              Set-Location $Directory
            } else {
              Write-Host "Directory $Directory does not exist"
              return $false
            }
          }

          Write-Host "Installing dependencies in $(Get-Location)..."

          # Try with pnpm first (preferred)
          if (Get-Command pnpm -ErrorAction SilentlyContinue) {
            Write-Host "Using pnpm to install dependencies..."
            try {
              pnpm install
            } catch {
              Write-Host "pnpm install failed, trying with npm..."
              try {
                npm install
              } catch {
                Write-Host "Both pnpm and npm installation failed in $(Get-Location)"
                if ($Directory) {
                  Set-Location $originalLocation
                }
                return $false
              }
            }
          } else {
            # Fallback to npm if pnpm is not available
            Write-Host "pnpm not found, using npm..."
            try {
              npm install
            } catch {
              Write-Host "npm install failed in $(Get-Location)"
              if ($Directory) {
                Set-Location $originalLocation
              }
              return $false
            }
          }

          if ($Directory) {
            Set-Location $originalLocation
          }

          return $true
        }

        # Install dependencies in root directory if package.json exists
        if (Test-Path "package.json") {
          Write-Host "Found package.json in root directory"
          Install-Dependencies
        }

        # Install dependencies in ui/react_frontend if package.json exists
        if (Test-Path "ui/react_frontend/package.json") {
          Write-Host "Found package.json in ui/react_frontend"
          Install-Dependencies "ui/react_frontend"
        }

        # Install dependencies in sdk/javascript if package.json exists
        if (Test-Path "sdk/javascript/package.json") {
          Write-Host "Found package.json in sdk/javascript"
          Install-Dependencies "sdk/javascript"
        }
      continue-on-error: true

    - name: Clean up node_modules (Windows)
      if: matrix.language == 'javascript-typescript'
      shell: pwsh
      run: |
        Write-Host "Cleaning up node_modules to save space..."
        Get-ChildItem -Path . -Recurse -Directory -Name "node_modules" | ForEach-Object {
          $path = Join-Path $PWD $_
          if (Test-Path $path) {
            Remove-Item -Path $path -Recurse -Force -ErrorAction SilentlyContinue
          }
        }
      continue-on-error: true

    - name: Create .codeqlignore file (Windows)
      shell: pwsh
      run: |
        Write-Host "Creating .codeqlignore file..."
        $codeqlIgnoreContent = @'
        .venv/**
        venv/**
        env/**
        .env/**
        **/virtualenv/**
        **/site-packages/**
        **/dist-packages/**
        **/node_modules/**
        **/dist/**
        **/build/**
        **/vendor/**
        **/external/**
        **/third_party/**
        **/__pycache__/**
        **/.pytest_cache/**
        **/.mypy_cache/**
        **/.ruff_cache/**
        **/*.pyc
        **/*.pyo
        **/*.pyd
        **/test/**
        **/tests/**
        **/__tests__/**
        **/__mocks__/**
        **/*.test.js
        **/*.test.ts
        **/*.test.jsx
        **/*.test.tsx
        **/*.spec.js
        **/*.spec.ts
        **/*.spec.jsx
        **/*.spec.tsx
        **/.github/**
        **/.vscode/**
        **/.idea/**
        **/coverage/**
        **/.git/**
        **/docs/**
        **/*.md
        **/*.mdx
        **/*.rst
        **/sphinx/**
        **/playwright-report/**
        **/generated/**
        **/sarif-results/**
        **/*.sarif
        **/*.sarif.json
        ui/react_frontend/node_modules/**
        sdk/javascript/node_modules/**
        '@
        Set-Content -Path ".codeqlignore" -Value $codeqlIgnoreContent

        # List directories to verify
        Write-Host "Current directories:"
        Get-ChildItem

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
      continue-on-error: true

    - name: Verify environment before analysis (Windows)
      shell: pwsh
      run: |
        Write-Host "Verifying environment before CodeQL analysis..."

        # Create sarif-results directory if it doesn't exist
        if (-not (Test-Path "sarif-results")) {
          Write-Host "Creating sarif-results directory..."
          New-Item -ItemType Directory -Path "sarif-results" -Force
        }

        # JavaScript/TypeScript specific checks
        if ("${{ matrix.language }}" -eq "javascript-typescript") {
          # Final check for package-lock.json - create it if it still doesn't exist
          if (-not (Test-Path "package-lock.json")) {
            Write-Host "WARNING: package-lock.json still not found! Creating it as a last resort..."
            $packageLockContent = '{"name":"paissive-income","version":"1.0.0","lockfileVersion":3,"packages":{"":{"name":"paissive-income","version":"1.0.0"}}}'
            Set-Content -Path "package-lock.json" -Value $packageLockContent
            Write-Host "Created minimal package-lock.json in the root directory."
          }

          # Verify package-lock.json
          if (Test-Path "package-lock.json") {
            Write-Host "package-lock.json exists and contains:"
            Get-Content "package-lock.json"
          } else {
            Write-Host "CRITICAL ERROR: package-lock.json still not found after multiple attempts!"
          }
        }

        # Python specific checks
        if ("${{ matrix.language }}" -eq "python") {
          Write-Host "Verifying Python environment..."
          python --version
          pip --version
        }

        Write-Host "Environment verification complete."

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{ matrix.language }}"
        upload: true
        output: sarif-results/${{ matrix.language }}-windows.sarif
      continue-on-error: false

    - name: Upload SARIF results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ matrix.language }}-windows-sarif
        path: sarif-results/${{ matrix.language }}-windows.sarif
        retention-days: 7
        if-no-files-found: warn
