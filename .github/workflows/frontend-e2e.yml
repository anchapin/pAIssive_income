name: Frontend E2E Tests

on:
  pull_request:
    paths:
      - "ui/react_frontend/**"
      - ".github/workflows/frontend-e2e.yml"
      - ".github/workflows/setup-pnpm.yml"
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to test on'
        required: false
        default: 'ubuntu'
        type: choice
        options:
          - ubuntu
          - windows
          - both

jobs:
  e2e:
    runs-on: ${{ (github.event.inputs.platform == 'both' || github.event.inputs.platform == '') && 'ubuntu-latest' || format('{0}-latest', github.event.inputs.platform) }}

    defaults:
      run:
        working-directory: ui/react_frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Use the reusable workflow for pnpm setup
      - name: Setup Node.js and pnpm
        uses: ./.github/workflows/setup-pnpm.yml
        with:
          node-version: '18'
          pnpm-version: '8'
          working-directory: 'ui/react_frontend'
          install-dependencies: true
          verify-package-json: true
          create-if-missing: false

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install uv
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ] || [ "$RUNNER_OS" == "macOS" ]; then
            curl -LsSf https://astral.sh/uv/install.sh | sh
            echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          else
            pip install uv
          fi
        env:
          RUNNER_OS: ${{ runner.os }}

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            ~/.uv
            ${{ runner.os == 'Windows' && '%LOCALAPPDATA%\uv' || '' }}
          key: ${{ runner.os }}-uv-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Create virtual environment (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cd ../..
          uv venv .venv || {
            echo "Failed to create virtual environment with uv. Falling back to Python's venv module..."
            python -m venv .venv
          }
          cd ui/react_frontend

      - name: Create virtual environment (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd ../..
          uv venv .venv
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Failed to create virtual environment with uv. Falling back to Python's venv module..."
            python -m venv .venv
          }
          cd ui/react_frontend

      - name: Start backend API server (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cd ../..
          source .venv/bin/activate
          uv pip install -r requirements.txt
          uv pip install -r requirements-dev.txt
          uv pip install -e .
          # Run the API server with the activated virtual environment
          nohup python ui/api_server.py &
          cd ui/react_frontend
          for i in {1..30}; do
            if curl --silent --fail http://localhost:8000/health; then
              echo "Backend API server is ready."
              break
            fi
            echo "Waiting for backend API server to be ready..."
            sleep 1
          done
          if ! curl --silent --fail http://localhost:8000/health; then
            echo "Backend API server failed to start within 30 seconds."
            exit 1
          fi

      - name: Start backend API server (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd ../..
          .\.venv\Scripts\Activate.ps1
          uv pip install -r requirements.txt
          uv pip install -r requirements-dev.txt
          uv pip install -e .
          # Run the API server with the activated virtual environment
          $apiProcess = Start-Process -FilePath ".\.venv\Scripts\python.exe" -ArgumentList "ui/api_server.py" -PassThru -NoNewWindow
          cd ui/react_frontend
          $maxRetries = 30
          $retryCount = 0
          $serverReady = $false

          while (-not $serverReady -and $retryCount -lt $maxRetries) {
            try {
              $response = Invoke-WebRequest -Uri "http://localhost:8000/health" -UseBasicParsing -ErrorAction SilentlyContinue
              if ($response.StatusCode -eq 200) {
                Write-Host "Backend API server is ready."
                $serverReady = $true
              }
            } catch {
              Write-Host "Waiting for backend API server to be ready... (Attempt $($retryCount+1)/$maxRetries)"
              Start-Sleep -Seconds 1
            }
            $retryCount++
          }

          if (-not $serverReady) {
            Write-Error "Backend API server failed to start within 30 seconds."
            exit 1
          }

      - name: Start React development server (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          nohup pnpm start -- --port=3000 &
          # Increase wait time to ensure React app is fully loaded
          sleep 20

          # Check if the server is responding
          echo "Checking if React server is up..."
          curl -s --retry 5 --retry-delay 2 --retry-connrefused http://localhost:3000/ > /dev/null && echo "React server is up!" || echo "Warning: React server may not be fully initialized"

      - name: Start React development server (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Start React server in background
          $reactProcess = Start-Process -FilePath "pnpm" -ArgumentList "start", "--", "--port=3000" -PassThru -NoNewWindow

          # Wait for server to start
          Write-Host "Waiting for React server to start..."
          Start-Sleep -Seconds 20

          # Check if the server is responding
          Write-Host "Checking if React server is up..."
          try {
            $response = Invoke-WebRequest -Uri "http://localhost:3000/" -UseBasicParsing -ErrorAction SilentlyContinue
            if ($response.StatusCode -eq 200) {
              Write-Host "React server is up!"
            } else {
              Write-Host "Warning: React server responded with status code $($response.StatusCode)"
            }
          } catch {
            Write-Host "Warning: React server may not be fully initialized. Error: $_"
          }

      - name: Run Playwright E2E tests (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          # Run tests with retry mechanism
          npx playwright test || npx playwright test --retries=2

      - name: Run Playwright E2E tests (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Run tests with retry mechanism
          npx playwright test
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Tests failed on first attempt. Retrying..."
            npx playwright test --retries=2
          }

      - name: Create and verify playwright-report directory (Linux/macOS)
        if: runner.os != 'Windows' && always()
        shell: bash
        run: |
          mkdir -p playwright-report/
          ls -la playwright-report/ || echo "playwright-report directory is empty or doesn't exist"

      - name: Create and verify playwright-report directory (Windows)
        if: runner.os == 'Windows' && always()
        shell: pwsh
        run: |
          if (-not (Test-Path "playwright-report")) {
            New-Item -ItemType Directory -Path "playwright-report" -Force
          }
          Get-ChildItem -Path "playwright-report" -Force -ErrorAction SilentlyContinue | Format-Table -AutoSize

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ runner.os }}-${{ github.run_id }}
          path: playwright-report/
          if-no-files-found: warn
          retention-days: 30
