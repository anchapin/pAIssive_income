name: Frontend E2E Tests

on:
  pull_request:
    paths:
      - "ui/react_frontend/**"
      - ".github/workflows/frontend-e2e.yml"
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to test on'
        required: false
        default: 'ubuntu'
        type: choice
        options:
          - ubuntu
          - windows
          - both

jobs:
  e2e:
    runs-on: ${{ (github.event.inputs.platform == 'both' || github.event.inputs.platform == '') && 'ubuntu-latest' || format('{0}-latest', github.event.inputs.platform) }}

    defaults:
      run:
        working-directory: ui/react_frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Node.js and pnpm directly in this job
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '8'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      # Install global pnpm if needed (for Windows)
      - name: Install global pnpm (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $pnpmCmd = Get-Command pnpm -ErrorAction SilentlyContinue
          if (-not $pnpmCmd) {
            Write-Host "Installing pnpm globally with npm..."
            npm install -g pnpm
          }
          pnpm --version

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      # No Python setup needed since we're using the Node.js mock API server

      - name: Install Express for mock API server (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          # Install Express and related packages for the mock API server
          pnpm add -D express cors body-parser

          # Test the mock API server
          echo "Testing mock API server..."
          pnpm test:mock-api

          # Start the mock API server
          node tests/mock_api_server.js &
          echo "Mock API server started"

          # Wait for the server to start
          for i in {1..30}; do
            if curl --silent --fail http://localhost:8000/health; then
              echo "Mock API server is ready."
              break
            fi
            echo "Waiting for mock API server to be ready... (Attempt $i/30)"
            sleep 1
          done

          if ! curl --silent --fail http://localhost:8000/health; then
            echo "Mock API server failed to start within 30 seconds."
            exit 1
          fi

          # Verify the API endpoints
          echo "Verifying API endpoints..."
          curl --silent --fail http://localhost:8000/api/agent
          echo "Agent endpoint verified."
          curl --silent --fail http://localhost:8000/api/status
          echo "Status endpoint verified."

      - name: Install Express for mock API server (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Install Express and related packages for the mock API server
          pnpm add -D express cors body-parser

          # Test the mock API server
          Write-Host "Testing mock API server..."
          pnpm test:mock-api

          # Start the mock API server
          $mockApiProcess = Start-Process -FilePath "node" -ArgumentList "tests/mock_api_server.js" -PassThru -NoNewWindow
          Write-Host "Mock API server started"

          # Wait for the server to start
          $maxRetries = 30
          $retryCount = 0
          $serverReady = $false

          while (-not $serverReady -and $retryCount -lt $maxRetries) {
            try {
              $response = Invoke-WebRequest -Uri "http://localhost:8000/health" -UseBasicParsing -ErrorAction SilentlyContinue
              if ($response.StatusCode -eq 200) {
                Write-Host "Mock API server is ready."
                $serverReady = $true
              }
            } catch {
              Write-Host "Waiting for mock API server to be ready... (Attempt $($retryCount+1)/$maxRetries)"
              Start-Sleep -Seconds 1
            }
            $retryCount++
          }

          if (-not $serverReady) {
            Write-Host "Mock API server failed to start within 30 seconds."
            exit 1
          }

          # Verify the API endpoints
          Write-Host "Verifying API endpoints..."
          try {
            $agentResponse = Invoke-WebRequest -Uri "http://localhost:8000/api/agent" -UseBasicParsing
            Write-Host "Agent endpoint verified."
            $statusResponse = Invoke-WebRequest -Uri "http://localhost:8000/api/status" -UseBasicParsing
            Write-Host "Status endpoint verified."
          } catch {
            Write-Host "Failed to verify API endpoints: $_"
            # Continue anyway, don't fail the build
          }

      - name: Start React development server (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          # Set environment variable to use the mock API server
          export REACT_APP_API_BASE_URL=http://localhost:8000/api

          # Start React server in background
          nohup pnpm start -- --port=3000 &

          # Increase wait time to ensure React app is fully loaded
          sleep 20

          # Check if the server is responding
          echo "Checking if React server is up..."
          curl -s --retry 5 --retry-delay 2 --retry-connrefused http://localhost:3000/ > /dev/null && echo "React server is up!" || echo "Warning: React server may not be fully initialized"

      - name: Start React development server (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Set environment variable to use the mock API server
          $env:REACT_APP_API_BASE_URL = "http://localhost:8000/api"

          # Start React server in background
          $reactProcess = Start-Process -FilePath "pnpm" -ArgumentList "start", "--", "--port=3000" -PassThru -NoNewWindow

          # Wait for server to start
          Write-Host "Waiting for React server to start..."
          Start-Sleep -Seconds 20

          # Check if the server is responding
          Write-Host "Checking if React server is up..."
          try {
            $response = Invoke-WebRequest -Uri "http://localhost:3000/" -UseBasicParsing -ErrorAction SilentlyContinue
            if ($response.StatusCode -eq 200) {
              Write-Host "React server is up!"
            } else {
              Write-Host "Warning: React server responded with status code $($response.StatusCode)"
            }
          } catch {
            Write-Host "Warning: React server may not be fully initialized. Error: $_"
          }

      - name: Run Playwright E2E tests (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          # Create playwright-report directory first
          mkdir -p playwright-report

          # Install the ag-ui package if needed
          if ! grep -q "@ag-ui-protocol/ag-ui" node_modules/.package-lock.json 2>/dev/null; then
            echo "Installing @ag-ui-protocol/ag-ui package..."
            pnpm add @ag-ui-protocol/ag-ui || echo "Failed to install @ag-ui-protocol/ag-ui, will use local implementation"
          fi

          # Run tests with retry mechanism and increased timeout
          PLAYWRIGHT_TIMEOUT=60000 npx playwright test tests/e2e/agent_ui.spec.ts --reporter=list || PLAYWRIGHT_TIMEOUT=60000 npx playwright test tests/e2e/agent_ui.spec.ts --reporter=list --retries=2

      - name: Run Playwright E2E tests (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Create playwright-report directory first
          if (-not (Test-Path "playwright-report")) {
            New-Item -ItemType Directory -Path "playwright-report" -Force
          }

          # Install the ag-ui package if needed
          if (-not (Test-Path "node_modules/@ag-ui-protocol")) {
            Write-Host "Installing @ag-ui-protocol/ag-ui package..."
            pnpm add @ag-ui-protocol/ag-ui
            if ($LASTEXITCODE -ne 0) {
              Write-Host "Failed to install @ag-ui-protocol/ag-ui, will use local implementation"
            }
          }

          # Run tests with retry mechanism and increased timeout
          $env:PLAYWRIGHT_TIMEOUT = "60000"
          npx playwright test tests/e2e/agent_ui.spec.ts --reporter=list
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Tests failed on first attempt. Retrying..."
            npx playwright test tests/e2e/agent_ui.spec.ts --reporter=list --retries=2
          }

      - name: Create and verify playwright-report directory (Linux/macOS)
        if: runner.os != 'Windows' && always()
        shell: bash
        run: |
          # Ensure the directory exists
          mkdir -p playwright-report/

          # Create a dummy file if the directory is empty to prevent upload issues
          if [ -z "$(ls -A playwright-report/)" ]; then
            echo "Creating dummy file in empty playwright-report directory"
            echo "Test run completed" > playwright-report/test-summary.txt
          fi

          # List directory contents
          ls -la playwright-report/ || echo "playwright-report directory is empty or doesn't exist"

      - name: Create and verify playwright-report directory (Windows)
        if: runner.os == 'Windows' && always()
        shell: pwsh
        run: |
          # Ensure the directory exists
          if (-not (Test-Path "playwright-report")) {
            New-Item -ItemType Directory -Path "playwright-report" -Force
          }

          # Create a dummy file if the directory is empty to prevent upload issues
          if (-not (Get-ChildItem -Path "playwright-report" -Force -ErrorAction SilentlyContinue)) {
            Write-Host "Creating dummy file in empty playwright-report directory"
            Set-Content -Path "playwright-report\test-summary.txt" -Value "Test run completed"
          }

          # List directory contents
          Get-ChildItem -Path "playwright-report" -Force -ErrorAction SilentlyContinue | Format-Table -AutoSize

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ runner.os }}-${{ github.run_id }}
          path: playwright-report/
          if-no-files-found: warn
          retention-days: 30
