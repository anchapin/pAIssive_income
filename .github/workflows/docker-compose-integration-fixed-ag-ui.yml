name: Docker Compose Integration Tests (AG-UI Fixed)

on:
  push:
    branches: [ main, develop, feature/*, fix/* ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  workflow_dispatch:

jobs:
  integration-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Clean up Docker system
        run: |
          echo "Cleaning up Docker system..."
          docker system prune -a -f --volumes
          echo "Disk space after cleanup:"
          df -h

      - name: Make scripts executable
        run: |
          chmod +x scripts/fix-docker-network.sh
          chmod +x scripts/fix-docker-compose.sh
          chmod +x scripts/run-docker-compose-ci.sh
          chmod +x docker-healthcheck.sh
          chmod +x wait-for-db.sh

      - name: Fix Docker network
        run: |
          echo "Running Docker network fix script..."
          ./scripts/fix-docker-network.sh

      - name: Fix Docker Compose
        run: |
          echo "Running Docker Compose fix script..."
          ./scripts/fix-docker-compose.sh

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          driver-opts: |
            image=moby/buildkit:v0.12.0
          buildkitd-flags: --debug

      - name: Install Buildx as default builder
        run: |
          echo "Installing Buildx as default builder..."
          docker buildx install

          # Verify Buildx installation
          echo "Verifying Buildx installation..."
          docker buildx version

          # Create a new builder instance if needed
          echo "Creating a new builder instance..."
          docker buildx create --use --name builder-${{ github.run_id }} || true

          # List available builders
          echo "Available builders:"
          docker buildx ls

      # Verify Docker setup
      - name: Verify Docker setup
        run: |
          echo "Checking Docker daemon status..."
          if ! docker info >/dev/null 2>&1; then
            echo "ERROR: Docker daemon is not responding. Attempting to restart..."
            sudo systemctl restart docker || true
            sleep 10
            if ! docker info >/dev/null 2>&1; then
              echo "CRITICAL: Docker daemon failed to restart."
              exit 1
            fi
          fi
          echo "Docker is running."

      # Create Docker network with simple approach
      - name: Create Docker network
        run: |
          echo "Creating Docker network 'paissive-network'..."
          docker network create paissive-network || echo "Network 'paissive-network' already exists."
          docker network inspect paissive-network || echo "Failed to inspect network, but continuing..."

      # Check disk space before pulling images
      - name: Check disk space before pulling images
        run: |
          echo "Disk space before pulling images:"
          df -h

      # Pull Docker images with enhanced retry logic
      - name: Pull Docker images
        run: |
          echo "Pulling Docker images..."
          
          # Pull PostgreSQL image
          echo "Pulling PostgreSQL image..."
          docker pull postgres:15.3-alpine || {
            echo "Failed to pull postgres:15.3-alpine, trying fallback images..."
            for fallback_image in "postgres:14-alpine" "postgres:13-alpine" "postgres:alpine"; do
              echo "Trying fallback image: $fallback_image"
              if docker pull "$fallback_image"; then
                echo "Successfully pulled fallback image: $fallback_image"
                sed -i "s|postgres:15.3-alpine|$fallback_image|g" docker-compose.yml
                break
              fi
            done
          }
          
          # Pull Node.js image for frontend
          echo "Pulling Node.js image..."
          docker pull node:18-alpine || {
            echo "Failed to pull node:18-alpine, trying fallback images..."
            for fallback_image in "node:16-alpine" "node:14-alpine"; do
              echo "Trying fallback image: $fallback_image"
              if docker pull "$fallback_image"; then
                echo "Successfully pulled fallback image: $fallback_image"
                if [ -f "ui/react_frontend/Dockerfile.dev" ]; then
                  sed -i "s|FROM node:18-alpine|FROM $fallback_image|g" ui/react_frontend/Dockerfile.dev
                fi
                break
              fi
            done
          }

      # Build and start services with Docker Compose
      - name: Build and start services
        run: |
          # Run the Docker Compose CI script
          ./scripts/run-docker-compose-ci.sh

      # Debugging logs
      - name: Debugging logs
        if: always()
        run: |
          echo "Docker Compose logs:"
          docker compose logs || docker-compose logs
          
          echo "Docker container status:"
          docker ps -a
          
          echo "Docker network status:"
          docker network ls
          docker network inspect paissive-network || true
          
          echo "Disk space usage:"
          df -h
          docker system df
