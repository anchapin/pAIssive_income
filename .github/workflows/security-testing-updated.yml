name: Security Testing
on:
  push:
    branches:
    - main
    - develop
    paths:
    - '**.py'
    - .github/workflows/security-testing.yml
    - requirements*.txt
    - pyproject.toml
    - setup.py
  pull_request:
    branches:
    - main
    - develop
    paths:
    - '**.py'
    - .github/workflows/security-testing.yml
    - requirements*.txt
    - pyproject.toml
    - setup.py
  workflow_dispatch: {}
jobs:
  security-scan:
    name: Security Scan
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        - windows-latest
        python-version:
        - '3.9'
        - '3.10'
        - '3.11'
        - '3.12'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: pip
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: '~/.cache/pip

          ~/.cache/uv

          .pytest_cache'
        key: ${{ runner.os }}-deps-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: ${{ runner.os }}-deps-
    - name: Install dependencies
      shell: bash
      run: 'python -m pip install --upgrade pip setuptools wheel

        pip install -r requirements.txt

        pip install -r requirements-dev.txt

        pip install bandit safety detect-secrets semgrep

        '
      continue-on-error: true
    - name: Run Bandit security scan
      shell: bash
      run: 'bandit -r . -c bandit.yaml -f json -o bandit-results-${{ matrix.python-version
        }}.json

        python convert_bandit_to_sarif.py bandit-results-${{ matrix.python-version
        }}.json

        '
    - name: Run custom security fixes
      shell: bash
      run: 'python scripts/fix/fix_all_security_and_types.py --security-only --check

        '
    - name: Check for duplicate logging issues
      shell: bash
      run: 'python scripts/fix/fix_duplicate_logging.py --check

        '
    - name: Validate security improvements
      shell: bash
      run: 'python simple_bandit_scan.py

        '
    - name: Run Safety check
      shell: bash
      run: 'safety check -r requirements.txt --json > safety-results-${{ matrix.python-version
        }}.json || true

        safety check -r requirements-dev.txt --json > safety-results-dev-${{ matrix.python-version
        }}.json || true

        '
    - name: Run detect-secrets
      shell: bash
      run: 'detect-secrets scan > detect-secrets-results-${{ matrix.python-version
        }}.json

        '
    - name: Run Semgrep scan
      shell: bash
      run: 'semgrep scan --config=p/security-audit --output semgrep-results-${{ matrix.python-version
        }}.json --json .

        '
    - name: Upload scan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results-${{ matrix.python-version }}
        path: 'bandit-results-*.json

          safety-results-*.json

          detect-secrets-results-*.json

          semgrep-results-*.json

          '
        retention-days: 14
    - name: Upload SARIF results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: bandit-results-${{ matrix.python-version }}.sarif
    timeout-minutes: 30
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: high
        deny-licenses: AGPL-1.0-or-later, AGPL-3.0-or-later
        allow-ghsas: []
    timeout-minutes: 30
