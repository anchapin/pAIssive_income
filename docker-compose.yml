version: '3.8'

# This docker-compose file is optimized for GitHub Actions CI/CD
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: paissive-income-app
    restart: unless-stopped
    ports:
      - "5000:5000"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./docker-healthcheck.sh:/usr/local/bin/docker-healthcheck.sh
      - ./wait-for-db.sh:/usr/local/bin/wait-for-db.sh
    environment:
      - FLASK_ENV=production
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=postgresql://myuser:mypassword@db:5433/mydb
      - PATH=/app/.venv/bin:$PATH
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
      - POSTGRES_DB=mydb
      - POSTGRES_HOST=db
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://frontend:3000
    networks:
      - paissive-network
    healthcheck:
      test: ["CMD", "/app/docker-healthcheck.sh"]
      interval: 30s
      timeout: 60s
      retries: 10
      start_period: 180s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    depends_on:
      db:
        condition: service_healthy

  frontend:
    build:
      context: ./ui/react_frontend
      dockerfile: Dockerfile.dev
    container_name: paissive-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      # Mount source code but exclude node_modules
      - ./ui/react_frontend:/app:cached
      # Use a named volume for node_modules to avoid host conflicts
      - frontend-node-modules:/app/node_modules
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://app:5000
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_AG_UI_ENABLED=true
      # Add mock API server environment variables
      - PORT=3000
      - MOCK_API_ENABLED=true
      - MOCK_API_PORT=8000
    networks:
      - paissive-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      app:
        condition: service_healthy

  db:
    image: postgres:15.3-alpine
    container_name: paissive-postgres
    restart: unless-stopped
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
      - POSTGRES_DB=mydb
    networks:
      - paissive-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s
    command: ["postgres", "-c", "max_connections=200", "-c", "shared_buffers=256MB"]
    # Add these options for better CI compatibility
    stop_grace_period: 30s
    shm_size: 256mb

  # Uncomment the following section to enable Redis caching
  # redis:
  #   image: redis:7-alpine
  #   container_name: paissive-redis
  #   restart: unless-stopped
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis-data:/data
  #   networks:
  #     - paissive-network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3

networks:
  paissive-network:
    driver: bridge
    name: paissive-network
    # Add these options for better CI compatibility
    attachable: true
    # Use host driver for GitHub Actions to avoid network issues
    driver_opts:
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  frontend-node-modules:
    driver: local
