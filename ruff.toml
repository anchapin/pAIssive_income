# Optimized Ruff configuration for comprehensive linting and formatting

# Core settings
line-length = 88
target-version = "py38"
fix = true
unsafe-fixes = false
cache-dir = ".ruff_cache"

# Extended exclude patterns for better performance
extend-exclude = [
    ".git",
    ".venv",
    "venv",
    "node_modules",
    "ui/react_frontend/node_modules",  # Explicitly exclude node_modules in React frontend
    "__pycache__",
    "*.pyc",
    "*.pyo",
    "*.pyd",
    ".pytest_cache",
    ".mypy_cache",
    "build",
    "dist",
    "*.egg-info",
    "docs/source/conf.py",
    "old/",
    "ui/react_frontend/"  # Exclude React frontend code (uses ESLint/TypeScript)
]

# Comprehensive rule selection replacing Flake8
[lint]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "W",   # pycodestyle warnings
    "B",   # flake8-bugbear
    "C",   # flake8-comprehensions
    "T",   # flake8-print
    "UP",  # pyupgrade
    "RUF", # Ruff-specific rules
    "N",   # pep8-naming
    "PT",  # flake8-pytest-style
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "ERA", # eradicate
    "PL",  # pylint
    "TRY", # tryceratops
    "FIX", # autofix
]

ignore = [
    "D203",  # One blank line before class
    "D213",  # Multi-line summary style
    "E501",  # Line length (handled by formatter)
    "PLR0913", # Too many arguments in function definition
    "D100",  # Missing docstring in public module
    "D102",  # Missing docstring in public method
    "D107",  # Missing docstring in __init__
    "ANN001", # Missing type annotation for function argument
    "ANN003", # Missing type annotation for **kwargs
    "ANN201", # Missing return type annotation for public function
    "ANN206", # Missing return type annotation for classmethod
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "G004",  # Logging statement uses f-string
    "TRY401", # Redundant exception object included in logging.exception call
    "F401",  # Imported but unused (for mock modules and conditional imports)
    "E402",  # Module level import not at top of file (for conditional imports)
    "PGH003", # Use specific rule codes when ignoring type issues
    "UP035", # typing.Type is deprecated, use type instead
    "PTH123", # open() should be replaced by Path.open()
    "PTH118", # os.path.join() should be replaced by Path with / operator
    "BLE001", # Do not catch blind exception: Exception
    "TRY300", # Consider moving this statement to an else block
    "SIM102", # Use a single if statement instead of nested if statements
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "PLR0911", # Too many return statements
    "C901",  # Function is too complex
    "ARG001", # Unused function argument
    "ARG002", # Unused method argument
    "FIX002", # Line contains TODO, consider resolving the issue
    "A002",  # Function argument is shadowing a Python builtin
    "S602",  # subprocess call with shell=True identified, security issue
    "S603",  # subprocess call: check for execution of untrusted input
    "E722",  # Do not use bare except
    "PLR2004", # Magic value used in comparison
    "PERF203", # try-except within a loop incurs performance overhead
    "B007",  # Loop control variable not used within loop body
    "RUF012", # Mutable class attributes should be annotated with typing.ClassVar
    "D401",  # First line of docstring should be in imperative mood
    "D205",  # 1 blank line required between summary line and description
]

[lint.isort]
combine-as-imports = true
force-single-line = true
lines-between-types = 1

# Simplified per-file-ignores with focused exceptions
[lint.per-file-ignores]
"__init__.py" = ["F401", "E402"]  # Allow unused imports in __init__
"tests/**/*.py" = [
    "S101",     # Allow assert in tests
    "PLR2004",  # Allow magic numbers in tests
    "ARG001",   # Allow unused arguments in tests (fixtures)
    "F401",     # Allow unused imports in tests
]
"**/test_*.py" = [
    "PLR0915",  # Allow long test functions
]
"setup_dev_environment.py" = [
    "T201",     # Allow print statements in setup script
]
# Stub files have different type hint conventions
"**/*.pyi" = [
    "UP006",    # Allow older style type hints in stub files 
    "UP007"     # Allow older style typing imports in stub files
]

# Original entries
"tool_templates/**" = ["E501"]
"niche_analysis/niche_analyzer.py" = ["E402"]
"ai_models/fallbacks/fallback_strategy.py" = ["E402"]
"ai_models/adapters/base_adapter.py" = ["E402"]
"ai_models/model_base_types.py" = ["E402"]
"ai_models/model_types.py" = ["E402"]

# Enhanced formatter settings
[format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true
docstring-code-line-length = 88
line-ending = "auto"
preview = true
