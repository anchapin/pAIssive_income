from typing import Any, TypeVar

# Use a properly named TypeVar
T = TypeVar("T")

# Define BaseQuery class to avoid name conflicts
class BaseQuery:
    def all(self) -> list[Any]: ...
    def first(self) -> Any | None: ...
    def filter_by(self, **kwargs: Any) -> BaseQuery: ...
    def filter(self, *args: Any) -> BaseQuery: ...
    def order_by(self, *args: Any) -> BaseQuery: ...
    def limit(self, limit: int) -> BaseQuery: ...
    def offset(self, offset: int) -> BaseQuery: ...
    def count(self) -> int: ...

# Define Model class
class ModelBase:
    query_class: type[BaseQuery]
    query: BaseQuery  # This is a class property, not a method
    __tablename__: str

    def save(self) -> None: ...
    def delete(self) -> None: ...

# Define SQLAlchemy class
class SQLAlchemy:
    Model: type[ModelBase]  # This is a class attribute, not an instance
    Column: Any
    String: Any
    Integer: Any
    Float: Any
    Boolean: Any
    Text: Any
    DateTime: Any
    ForeignKey: Any
    relationship: Any
    backref: Any
    session: Any
    func: Any
    def __init__(self, app: Any | None = None, **kwargs: Any) -> None: ...
    def init_app(self, app: Any) -> None: ...
    def create_all(self) -> None: ...
    def drop_all(self) -> None: ...
    def get_engine(self) -> Any: ...
