"""
Type stubs for werkzeug.local
"""
from typing import Any, TypeVar, Generic, Optional, Callable, Dict, List, Type, Union

T = TypeVar('T')

class Local:
    """Local objects similar to threading.local"""
    def __init__(self) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    def __setattr__(self, name: str, value: Any) -> None: ...
    def __delattr__(self, name: str) -> None: ...

class LocalStack:
    """A local stack for context locals."""
    def __init__(self) -> None: ...
    def push(self, obj: T) -> T: ...
    def pop(self) -> Optional[T]: ...
    def top(self) -> Optional[T]: ...
    def __call__(self) -> Optional[T]: ...

class LocalProxy(Generic[T]):
    """Acts as a proxy for a local object."""
    def __init__(self, local: Union[Callable[[], T], Local, LocalStack]) -> None: ...
    def _get_current_object(self) -> T: ...
    def __getattr__(self, name: str) -> Any: ...
    def __setattr__(self, name: str, value: Any) -> None: ...
    def __delattr__(self, name: str) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...
