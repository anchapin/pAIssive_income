"""
Type stubs for unittest
"""
from typing import Any, Callable, Dict, List, Optional, Set, Tuple, Type, Union, TypeVar, Generic

T = TypeVar('T')

class TestCase:
    def __init__(self, methodName: str = 'runTest') -> None: ...
    def setUp(self) -> None: ...
    def tearDown(self) -> None: ...
    def run(self, result: Optional['TestResult'] = None) -> Optional['TestResult']: ...
    def skipTest(self, reason: str) -> None: ...
    def fail(self, msg: Optional[str] = None) -> None: ...
    def assertRaises(self, expected_exception: Type[Exception], *args: Any, **kwargs: Any) -> Any: ...
    def assertEqual(self, first: Any, second: Any, msg: Optional[str] = None) -> None: ...
    def assertNotEqual(self, first: Any, second: Any, msg: Optional[str] = None) -> None: ...
    def assertTrue(self, expr: Any, msg: Optional[str] = None) -> None: ...
    def assertFalse(self, expr: Any, msg: Optional[str] = None) -> None: ...
    def assertIs(self, first: Any, second: Any, msg: Optional[str] = None) -> None: ...
    def assertIsNot(self, first: Any, second: Any, msg: Optional[str] = None) -> None: ...
    def assertIsNone(self, expr: Any, msg: Optional[str] = None) -> None: ...
    def assertIsNotNone(self, expr: Any, msg: Optional[str] = None) -> None: ...
    def assertIn(self, member: Any, container: Any, msg: Optional[str] = None) -> None: ...
    def assertNotIn(self, member: Any, container: Any, msg: Optional[str] = None) -> None: ...
    def assertIsInstance(self, obj: Any, cls: Any, msg: Optional[str] = None) -> None: ...
    def assertNotIsInstance(self, obj: Any, cls: Any, msg: Optional[str] = None) -> None: ...

class TestResult:
    def __init__(self) -> None: ...
    def wasSuccessful(self) -> bool: ...
    def addError(self, test: TestCase, err: Tuple[Type[Exception], Exception, Any]) -> None: ...
    def addFailure(self, test: TestCase, err: Tuple[Type[Exception], Exception, Any]) -> None: ...
    def addSuccess(self, test: TestCase) -> None: ...

class TestSuite:
    def __init__(self, tests: List[Union[TestCase, 'TestSuite']] = ...) -> None: ...
    def addTest(self, test: Union[TestCase, 'TestSuite']) -> None: ...
    def run(self, result: TestResult) -> TestResult: ...

def main(module: str = '__main__', defaultTest: Optional[str] = None, argv: Optional[List[str]] = None, 
         testRunner: Optional[Any] = None, testLoader: Optional[Any] = None, exit: bool = True, 
         verbosity: int = 1, failfast: Optional[bool] = None, catchbreak: Optional[bool] = None, 
         buffer: Optional[bool] = None, warnings: Optional[str] = None) -> TestResult: ...

def skip(reason: str) -> Callable[[T], T]: ...
def skipIf(condition: bool, reason: str) -> Callable[[T], T]: ...
def skipUnless(condition: bool, reason: str) -> Callable[[T], T]: ...
