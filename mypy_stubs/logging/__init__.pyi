"""Type stubs for logging."""
from typing import Any, Optional

class LogRecord:
    def __init__(self, name: str, level: int, pathname: str, lineno: int, msg: Any, args: Any, exc_info: Any, func: Optional[str] = None, sinfo: Optional[str] = None) -> None: ...
    name: str
    levelno: int
    levelname: str
    pathname: str
    filename: str
    module: str
    lineno: int
    funcName: str
    created: float
    asctime: str
    msecs: int
    relativeCreated: float
    thread: int
    threadName: str
    process: int
    processName: str
    args: Any
    msg: Any
    exc_info: Any
    exc_text: Optional[str]
    stack_info: Optional[str]
    message: str

class Formatter:
    def __init__(self, fmt: Optional[str] = None, datefmt: Optional[str] = None, style: str = "%") -> None: ...
    def format(self, record: LogRecord) -> str: ...
    def formatTime(self, record: LogRecord, datefmt: Optional[str] = None) -> str: ...
    def formatException(self, ei: tuple[type[BaseException], BaseException, Any]) -> str: ...
    def formatStack(self, stack_info: str) -> str: ...

class Filter:
    def __init__(self, name: str = "") -> None: ...
    def filter(self, record: LogRecord) -> bool: ...

class Handler:
    def __init__(self, level: int = 0) -> None: ...
    def createLock(self) -> None: ...
    def acquire(self) -> None: ...
    def release(self) -> None: ...
    def setLevel(self, level: int) -> None: ...
    def setFormatter(self, fmt: Formatter) -> None: ...
    def addFilter(self, filter: Filter) -> None: ...
    def removeFilter(self, filter: Filter) -> None: ...
    def filter(self, record: LogRecord) -> bool: ...
    def flush(self) -> None: ...
    def close(self) -> None: ...
    def handle(self, record: LogRecord) -> bool: ...
    def handleError(self, record: LogRecord) -> None: ...
    def format(self, record: LogRecord) -> str: ...
    def emit(self, record: LogRecord) -> None: ...

class Logger:
    def __init__(self, name: str, level: int = 0) -> None: ...
    def setLevel(self, level: int) -> None: ...
    def isEnabledFor(self, level: int) -> bool: ...
    def getEffectiveLevel(self) -> int: ...
    def getChild(self, suffix: str) -> Logger: ...
    def debug(self, msg: Any, *args: Any, **kwargs: Any) -> None: ...
    def info(self, msg: Any, *args: Any, **kwargs: Any) -> None: ...
    def warning(self, msg: Any, *args: Any, **kwargs: Any) -> None: ...
    def warn(self, msg: Any, *args: Any, **kwargs: Any) -> None: ...
    def error(self, msg: Any, *args: Any, **kwargs: Any) -> None: ...
    def exception(self, msg: Any, *args: Any, **kwargs: Any) -> None: ...
    def critical(self, msg: Any, *args: Any, **kwargs: Any) -> None: ...
    def log(self, level: int, msg: Any, *args: Any, **kwargs: Any) -> None: ...
    def addHandler(self, hdlr: Handler) -> None: ...
    def removeHandler(self, hdlr: Handler) -> None: ...
    def findCaller(self, stack_info: bool = False, stacklevel: int = 1) -> tuple[str, int, str, Optional[str]]: ...
    def handle(self, record: LogRecord) -> None: ...
    def makeRecord(self, name: str, level: int, fn: str, lno: int, msg: Any, args: Any, exc_info: Any, func: Optional[str] = None, extra: Optional[dict[str, Any]] = None, sinfo: Optional[str] = None) -> LogRecord: ...

def getLogger(name: Optional[str] = None) -> Logger: ...
def debug(msg: Any, *args: Any, **kwargs: Any) -> None: ...
def info(msg: Any, *args: Any, **kwargs: Any) -> None: ...
def warning(msg: Any, *args: Any, **kwargs: Any) -> None: ...
def warn(msg: Any, *args: Any, **kwargs: Any) -> None: ...
def error(msg: Any, *args: Any, **kwargs: Any) -> None: ...
def critical(msg: Any, *args: Any, **kwargs: Any) -> None: ...
def exception(msg: Any, *args: Any, **kwargs: Any) -> None: ...
def log(level: int, msg: Any, *args: Any, **kwargs: Any) -> None: ...

CRITICAL: int
FATAL: int
ERROR: int
WARNING: int
WARN: int
INFO: int
DEBUG: int
NOTSET: int
