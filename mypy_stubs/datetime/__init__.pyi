"""
Type stubs for datetime
"""
from typing import Any, Callable, Dict, List, Optional, Set, Tuple, Type, Union, ClassVar, SupportsAbs, overload

class tzinfo:
    def tzname(self, dt: Optional['datetime']) -> Optional[str]: ...
    def utcoffset(self, dt: Optional['datetime']) -> Optional['timedelta']: ...
    def dst(self, dt: Optional['datetime']) -> Optional['timedelta']: ...
    def fromutc(self, dt: 'datetime') -> 'datetime': ...

class timezone(tzinfo):
    utc: ClassVar['timezone']
    min: ClassVar['timezone']
    max: ClassVar['timezone']

    def __init__(self, offset: 'timedelta', name: Optional[str] = None) -> None: ...
    def utcoffset(self, dt: Optional['datetime']) -> 'timedelta': ...
    def tzname(self, dt: Optional['datetime']) -> str: ...
    def dst(self, dt: Optional['datetime']) -> None: ...
    def fromutc(self, dt: 'datetime') -> 'datetime': ...

class date:
    min: ClassVar['date']
    max: ClassVar['date']
    resolution: ClassVar['timedelta']

    def __init__(self, year: int, month: int, day: int) -> None: ...
    @classmethod
    def fromtimestamp(cls, timestamp: float) -> 'date': ...
    @classmethod
    def today(cls) -> 'date': ...
    @classmethod
    def fromordinal(cls, ordinal: int) -> 'date': ...
    @classmethod
    def fromisoformat(cls, date_string: str) -> 'date': ...

    def replace(self, year: int = ..., month: int = ..., day: int = ...) -> 'date': ...
    def timetuple(self) -> Tuple[int, int, int, int, int, int, int, int, int]: ...
    def toordinal(self) -> int: ...
    def weekday(self) -> int: ...
    def isoweekday(self) -> int: ...
    def isocalendar(self) -> Tuple[int, int, int]: ...
    def isoformat(self) -> str: ...
    def ctime(self) -> str: ...
    def strftime(self, format: str) -> str: ...

class time:
    min: ClassVar['time']
    max: ClassVar['time']
    resolution: ClassVar['timedelta']

    def __init__(
        self,
        hour: int = 0,
        minute: int = 0,
        second: int = 0,
        microsecond: int = 0,
        tzinfo: Optional[tzinfo] = None,
        *,
        fold: int = 0,
    ) -> None: ...
    def replace(
        self,
        hour: int = ...,
        minute: int = ...,
        second: int = ...,
        microsecond: int = ...,
        tzinfo: Optional[tzinfo] = ...,
        *,
        fold: int = ...,
    ) -> 'time': ...
    def isoformat(self, timespec: str = 'auto') -> str: ...
    def strftime(self, format: str) -> str: ...
    def utcoffset(self) -> Optional['timedelta']: ...
    def tzname(self) -> Optional[str]: ...
    def dst(self) -> Optional['timedelta']: ...
    @classmethod
    def fromisoformat(cls, time_string: str) -> 'time': ...

class timedelta:
    min: ClassVar['timedelta']
    max: ClassVar['timedelta']
    resolution: ClassVar['timedelta']

    def __init__(
        self,
        days: float = 0,
        seconds: float = 0,
        microseconds: float = 0,
        milliseconds: float = 0,
        minutes: float = 0,
        hours: float = 0,
        weeks: float = 0,
    ) -> None: ...
    def total_seconds(self) -> float: ...
    def __abs__(self) -> 'timedelta': ...

class datetime(date):
    min: ClassVar['datetime']
    max: ClassVar['datetime']
    resolution: ClassVar['timedelta']

    def __init__(
        self,
        year: int,
        month: int,
        day: int,
        hour: int = 0,
        minute: int = 0,
        second: int = 0,
        microsecond: int = 0,
        tzinfo: Optional[tzinfo] = None,
        *,
        fold: int = 0,
    ) -> None: ...
    @classmethod
    def fromtimestamp(cls, timestamp: float, tz: Optional[tzinfo] = None) -> 'datetime': ...
    @classmethod
    def utcfromtimestamp(cls, timestamp: float) -> 'datetime': ...
    @classmethod
    def now(cls, tz: Optional[tzinfo] = None) -> 'datetime': ...
    @classmethod
    def utcnow(cls) -> 'datetime': ...
    @classmethod
    def combine(cls, date: date, time: time, tzinfo: Optional[tzinfo] = None) -> 'datetime': ...
    @classmethod
    def fromisoformat(cls, date_string: str) -> 'datetime': ...
    def astimezone(self, tz: Optional[tzinfo] = None) -> 'datetime': ...
    def replace(
        self,
        year: int = ...,
        month: int = ...,
        day: int = ...,
        hour: int = ...,
        minute: int = ...,
        second: int = ...,
        microsecond: int = ...,
        tzinfo: Optional[tzinfo] = ...,
        *,
        fold: int = ...,
    ) -> 'datetime': ...
    def utcoffset(self) -> Optional['timedelta']: ...
    def tzname(self) -> Optional[str]: ...
    def dst(self) -> Optional['timedelta']: ...
    def timestamp(self) -> float: ...
    def time(self) -> 'time': ...
    def date(self) -> 'date': ...
    def timetz(self) -> 'time': ...
    def isoformat(self, sep: str = 'T', timespec: str = 'auto') -> str: ...
    def utctimetuple(self) -> Tuple[int, int, int, int, int, int, int, int, int]: ...
