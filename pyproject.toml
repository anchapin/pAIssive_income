[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "paissive_income"
version = "0.1.0"
description = "pAIssive Income project - AI-powered passive income generation platform"
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE"}
authors = [
    {name = "pAIssive Income Team"}
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
    "fastapi>=0.95.0",
    "uvicorn>=0.22.0",
    "pydantic>=2.0.0",
    "redis>=4.5.0",
    "flask>=2.0.1",
    "httpx>=0.24.0",
    # Add other dependencies as needed
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.5.0",
]
agents = [
    "crewai>=0.120.0",  # AI agent orchestration framework
]
memory = [
    "mem0ai>=0.1.100",  # Memory layer for AI agents
    "qdrant-client>=1.9.1",  # Vector database client for mem0
    "openai>=1.33.0",  # Required for mem0 embeddings
]
ml = [
    "torch>=1.10.0",
    "transformers>=4.20.0",
    "sentence-transformers>=2.2.0",
    "numpy>=1.24.3",
    "scikit-learn>=1.0.0",
]

[project.urls]
homepage = "https://github.com/yourusername/pAIssive_income"
bug_tracker = "https://github.com/yourusername/pAIssive_income/issues"

[tool.setuptools]
packages = ["services"]
package-dir = {"" = "."}
package-data = {"services" = ["**/*.json"]}

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.ruff]
target-version = "py310"
line-length = 100
select = ["E", "F", "B", "S", "I", "N", "UP", "ANN", "C4", "SIM", "ARG", "PTH", "RUF", "ERA", "TRY", "PLR", "PLW", "PLE", "BLE", "ISC"]
ignore = []
extend-exclude = [
    "*.md",
    "docs/**/*.md",
    "**/.venv/*",
    "**/node_modules/*",
    "**/__pycache__/*",
    "build/*",
    "dist/*",
    ".git/*",
    ".github/*"
]

[tool.ruff.per-file-ignores]
"scripts/fix/fix_security_issues.py" = ["S603"]
"scripts/run/run_github_actions_locally.py" = ["S603", "G004", "TRY300", "RUF013", "RUF005"]
"scripts/setup/regenerate_venv.py" = ["S603", "TRY300"]
"scripts/setup/setup_pre_commit.py" = ["S603"]
"scripts/setup/setup_dev_environment.py" = ["S603"]

[tool.pyright]
pythonVersion = "3.10"
exclude = ["ui/react_frontend", "scripts/__init__.py", ".github/scripts/__init__.py", ".github/scripts"]
reportMissingImports = false
reportMissingTypeStubs = false
reportUnusedImport = false
reportUnusedVariable = false
reportGeneralTypeIssues = false
reportOptionalMemberAccess = false
reportOptionalSubscript = false
reportPrivateImportUsage = false
reportUnknownMemberType = false
reportUnknownArgumentType = false
reportUnknownVariableType = false
reportUnknownParameterType = false
reportMissingParameterType = false
reportMissingTypeArgument = false
reportUntypedFunctionDecorator = false
reportUntypedClassDecorator = false
reportUntypedBaseClass = false
reportUntypedNamedTuple = false
reportPrivateUsage = false
reportConstantRedefinition = false
reportIncompatibleMethodOverride = false
reportIncompatibleVariableOverride = false
reportOverlappingOverload = false
typeCheckingMode = "basic"


