---
description: Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness.
globs: .cursor/rules/*.mdc
alwaysApply: true
---

- **Required Rule Structure:**
  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext, other/path/**/*
  alwaysApply: boolean
  ---

  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations
  ```

- **File References:**
  - Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files
  - Example: [prisma.mdc](mdc:.cursor/rules/prisma.mdc) for rule references
  - Example: [schema.prisma](mdc:prisma/schema.prisma) for code references

- **Code Examples:**
  - Use language-specific code blocks
  ```typescript
  // ✅ DO: Show good examples
  const goodExample = true;
  
  // ❌ DON'T: Show anti-patterns
  const badExample = false;
  ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules 

- **Core:**
- Use Task Manager, Sequential Thinking, Context7, Playwright for file/terminal tasks
- Write modular code; use 'services' for client-API interactions

- **RESPONSE:**
1. **No Hallucination:** If unknown, say "I don't know"
2. **Specific:** No vague answers to specific queries
3. **"Why" on Mistakes:** Analyze actual code/actions, identify errors, give examples
4. **Code First:** Check code before making claims
5. **Uncertainty:** State it, verify with tools, explain verification
6. **No Assumptions:** About project, user preferences, configs
7. **Analyze Mistakes:** Provide specific feedback on errors
8. **Verify Assumptions:** Stop and verify when assuming

- **CODEBASE:**
1. **Pre-Change:** Use codebase-retrieval before changes
2. **Context:** Understand dependencies before modifying
3. **For Each Change:** Retrieve files, check imports/patterns
4. **File Edits:** View entire file, ID affected elements
5. **Verify Imports:** Ensure correctness before submitting
6. **New Functions:** Check for existing similar ones first
7. **No Blind Copy:** Understand any copied code

- **LIBRARIES:**
- Preference is 'uv' and 'pnpm' for python and node respectively