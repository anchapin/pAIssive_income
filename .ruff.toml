# Ruff configuration file

# Exclude a variety of commonly ignored directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black
line-length = 88

# Assume Python 3.10
target-version = "py310"

[lint]
# Enable all rules by default
select = ["ALL"]

# Exclude specific rules
ignore = [
    "D203",    # one-blank-line-before-class (conflicts with D211)
    "D212",    # multi-line-summary-first-line (conflicts with D213)
    "E501",    # line-too-long (handled by formatter)
    "UP007",   # Use `X | Y` for type annotations
    "FBT001",  # Boolean positional arg in function definition
    "FBT002",  # Boolean default value in function definition
    "FBT003",  # Boolean positional arg in function call
    "TD002",   # Missing author in TODO
    "TD003",   # Missing issue link in TODO
    "PLR0913", # Too many arguments to function call
    "COM812",  # Missing trailing comma
    "ISC001",  # Implicit string concatenation
    "D100",    # Missing docstring in public module
    "D102",    # Missing docstring in public method
    "D107",    # Missing docstring in __init__
    "ANN001",  # Missing type annotation for function argument
    "ANN003",  # Missing type annotation for **kwargs
    "ANN201",  # Missing return type annotation for public function
    "ANN206",  # Missing return type annotation for classmethod
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
    "G004",    # Logging statement uses f-string
    "TRY401",  # Redundant exception object included in logging.exception call
    "F401",    # Imported but unused (for mock modules and conditional imports)
    "E402",    # Module level import not at top of file (for conditional imports)
    "PGH003",  # Use specific rule codes when ignoring type issues
    "UP035",   # typing.Type is deprecated, use type instead
    "PTH123",  # open() should be replaced by Path.open()
    "PTH118",  # os.path.join() should be replaced by Path with / operator
    "BLE001",  # Do not catch blind exception: Exception
    "TRY300",  # Consider moving this statement to an else block
    "SIM102",  # Use a single if statement instead of nested if statements
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "PLR0911", # Too many return statements
    "C901",    # Function is too complex
    "ARG001",  # Unused function argument
    "ARG002",  # Unused method argument
    "FIX002",  # Line contains TODO, consider resolving the issue
    "A002",    # Function argument is shadowing a Python builtin
    "S602",    # subprocess call with shell=True identified, security issue
    "S603",    # subprocess call: check for execution of untrusted input
    "E722",    # Do not use bare except
    "PLR2004", # Magic value used in comparison
    "PERF203", # try-except within a loop incurs performance overhead
    "B007",    # Loop control variable not used within loop body
    "RUF012",  # Mutable class attributes should be annotated with typing.ClassVar
    "D401",    # First line of docstring should be in imperative mood
    "D205",    # 1 blank line required between summary line and description
]

# Allow autofix for all enabled rules (when `--fix`) is provided
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[lint.mccabe]
# Unlike Flake8, default to a complexity level of 10
max-complexity = 10

[lint.per-file-ignores]
# Tests can use assert and don't need docstrings, and can use root logger and os.path
"tests/**/*.py" = ["S101", "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107", "ANN", "LOG015", "G004", "PTH", "F401", "N806", "PLR2004"]
# Allow print statements in scripts and ignore subprocess security warnings
"scripts/**/*.py" = ["T201", "S603"]
# Ignore import issues in __init__.py files
"__init__.py" = ["F401", "F403"]
# Ignore subprocess security warnings in pre-commit scripts
"run_pre_commit.py" = ["S603"]
"run_pre_commit_on_all_files.py" = ["S603"]
"install_crewai_for_tests.py" = ["S603"]
"run_crewai_tests.py" = ["S603"]
"scripts/setup/install_pre_commit.py" = ["S603"]
"scripts/run/run_tests.py" = ["S603"]
"scripts/fix/fix_all_issues_final.py" = ["S603", "G004", "PTH", "TRY300", "PERF401", "PERF203", "INP001"]
# Ignore subprocess security warnings in manage.py
"manage.py" = ["S603", "C901", "PLR0912", "PLR0915"]
# Ignore type annotation issues in mypy stubs
"mypy_stubs/**/*.pyi" = ["ANN401", "PYI001", "PYI018", "PYI021", "D204"]
# Ignore most issues in verification and utility scripts
"add_logging_import.py" = ["D100", "F401", "ANN001", "PTH123", "ANN201", "PTH118"]
"adk_demo/**/*.py" = ["D107", "ARG002", "A002", "D102", "ANN401", "PGH003", "G004", "FIX002", "TRY401"]
"agent_team/**/*.py" = ["ANN003", "ANN001", "F401", "PGH003", "E402", "G004", "TRY401"]
"ai_models/**/*.py" = ["G004", "TRY401", "UP035", "PGH003", "RUF012", "ANN206"]
"verify_*.py" = ["D100", "D205", "ANN201", "ANN001", "S602", "TRY300", "BLE001", "PTH123", "C901", "PLR0912", "PLR0915", "D401", "G004", "S603", "PLR0911", "PERF203", "B007"]
"workflow_fixes_summary.py" = ["ANN001", "PLR2004", "E722"]

[format]
# Use double quotes for strings
quote-style = "double"
# Use spaces for indentation
indent-style = "space"
# Format docstrings
docstring-code-format = true
# Set line length for docstring code blocks
docstring-code-line-length = 88
# Automatically detect line ending
line-ending = "auto"
